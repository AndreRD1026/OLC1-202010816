package analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.io.IOException;
import java.io.PrintWriter;

parser code 
{:


    public static LinkedList<TError> errores = new LinkedList<TError>(); 

    public static String tipo="Lista";
    public String codigoTraducidoPython="";
    public String codigoTraducidoGolang="";
    public String errorm="";

    public static boolean isNumeric(String cadena) {

        boolean resultado;

        try {
            Integer.parseInt(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }

        return resultado;
    }
    
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\t" + errorm);
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        errores.add(tmp);
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left + 1)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 

        TError tmp = new TError("Sintactico",lexema, "TOKEN NO ERA EL ESPERADO",fila,columna);
        errores.add(tmp);
    }  
:}


//definicion de terminales
terminal String tvariable;
terminal String tcaracter;
terminal String tpunto;
terminal String tcoma;
terminal String tpuntoycoma;
terminal String tnumero_int;
terminal String tnumero_float;
terminal String tcadena;
terminal String tsuma;
terminal String tresta;
terminal String tmultiplicacion;
terminal String tdivision;
terminal String tmodulo;
terminal String tparA;
terminal String tparC;
terminal String tcorA;
terminal String tcorC;
terminal String tguionBajo;
terminal String tflecha;
terminal String tinterrogaciona;
terminal String tinterrogacionc;
terminal String tigual;
terminal String prInicio;
terminal String prBoolean;
terminal String prVerdadero;
terminal String prFalso;
terminal String prCaracter;
terminal String prNumero;
terminal String prCadena;
terminal String prPotencia;
terminal String prMod;
terminal String prIngresar;
terminal String prComo;
terminal String prConValor;
terminal String prSi;
terminal String prMayor;
terminal String prMenor;
terminal String prMayorIgual;
terminal String prMenorIgual;
terminal String prEsIGUAL;
terminal String prEsDiferente;
terminal String prEntonces;
terminal String prFinSi;
terminal String prOSi;
terminal String prDeloContrario;
terminal String prSegun;
terminal String prHacer;
terminal String prFinSegun;
terminal String prPara;
terminal String prHasta;
terminal String prFinPara;
terminal String prIncremental;
terminal String prMientras;
terminal String prFinMientras;
terminal String prRepetir;
terminal String prHastaQue;
terminal String prRetornar;
terminal String prMetodo;
terminal String prConParametros;
terminal String prFinMetodo;
terminal String prFuncion;
terminal String prFinFuncion;
terminal String prEjecutar;
terminal String prImprimir;
terminal String prImprimirNl;
terminal String prFin;



//definicion de no terminales
non terminal INICIO,INSTRUCCIONES,INSTRUCCION, ERROR;
non terminal E,DECLARACIONES,ASIGNACIONES,IF,LISTAOSI,LISTAOSI2,SEGUN,CICLO_FOR, CICLO_WHILE; 
non terminal CICLO_DOWHILE,RETORNO,METODO,FUNCIONES,PARAMETROS,EJECUTAR,IMPRIMIR,IMPRIMIRNL;
non terminal DECLARARNUM,DECLARARNUML,DECLARARCADENA,DECLARARCADENAL,DECLARARBOOLEANO,DECLARARBOOLEANOL,DECLARARCARACTER;
non terminal DECLARARCARACTERL,LISTAVARIABLES,LISTAVARIABLES2,DECLARARCONOPERACION,CONDICION,ERROR_INSTRUCCIONES;
non terminal ASIGNARNUM,ASIGNARNUML,ASIGNARCADENA,ASIGNARCADENAL,ASIGNARBOOLEANO,ASIGNARBOOLEANOL,ASIGNARCARACTER,ASIGNARCARACTERL;
non terminal EXPRESIONARITMETICA,PROCEDIMIENTOS;
non terminal CONDICIONMIENTRAS;
non terminal OPREACIONESP;
non terminal operaciones, relacional, PRUEBA;

//precedencia de los operadores

precedence left tsuma;
precedence left tresta, tmultiplicacion,tdivision, prMod, prPotencia;
precedence left prMayor, prMenor, prMayorIgual, prMenorIgual, prEsIGUAL,prEsDiferente;


//gramaticas
start with INICIO;

//INICIO::= prInicio INSTRUCCIONES prFin {:System.out.println("FIN DE ANALISIS");:};
INICIO::= prInicio INSTRUCCIONES prFin {: System.out.println("FIN DE ANALISIS");

    String fileName = "SalidaTraducida.py";
    try{
    PrintWriter writer = new PrintWriter(fileName);
    writer.println("def main():");
    writer.println(codigoTraducidoPython);
    writer.println("");
    writer.println("");
    writer.println("if __name__ == '__main__':");
    writer.println("\tmain()");
    writer.println("");
    writer.close();
    }
    catch (IOException e){
      System.out.println("An error occurred.");
      e.printStackTrace();
      }
:}
;



INSTRUCCIONES::= INSTRUCCION INSTRUCCIONES
                | INSTRUCCION
;


INSTRUCCION::= DECLARACIONES
            | ASIGNACIONES
            | IF
            | SEGUN
            | CICLO_FOR
            | CICLO_WHILE
            | CICLO_DOWHILE
            | RETORNO
            | METODO
            | FUNCIONES
            | EJECUTAR
            | IMPRIMIR
            | IMPRIMIRNL
            | error tpuntoycoma  {: System.out.println("Falta un ;"); :}
;

//gramatica para las declaraciones

DECLARACIONES::= DECLARARNUM
            | DECLARARNUML
            | DECLARARCADENA
            | DECLARARCADENAL
            | DECLARARBOOLEANO
            | DECLARARBOOLEANOL
            | DECLARARCARACTER
            | DECLARARCARACTERL
            | DECLARARCONOPERACION
;

//Lista de variables

LISTAVARIABLES::= tvariable LISTAVARIABLES2
            |
;

LISTAVARIABLES2::= tcoma tvariable LISTAVARIABLES2
            | tcoma tvariable
;


//declaracion de numeros

DECLARARNUM::= prIngresar tvariable:a prComo prNumero prConValor tnumero_int:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n" ; :}
            | prIngresar tvariable:a prComo prNumero prConValor tnumero_float:c tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + c + "\n" ; :}        
;

DECLARARNUML::= prIngresar LISTAVARIABLES prComo prNumero prConValor tnumero_int tpuntoycoma
             | prIngresar LISTAVARIABLES prComo prNumero prConValor tnumero_float tpuntoycoma
;

//declaracion de cadenas

DECLARARCADENA::= prIngresar tvariable:a prComo prCadena prConValor tcadena:b tpuntoycoma 
{: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n" ; :}
;

DECLARARCADENAL::= prIngresar LISTAVARIABLES prComo prCadena prConValor tcadena tpuntoycoma
;

//declaracion de booleanos

DECLARARBOOLEANO::= prIngresar tvariable:a prComo prBoolean prConValor prVerdadero:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython +=  a + " = " + "True" + "\n" ; :}   
                |  prIngresar tvariable:a prComo prBoolean prConValor prFalso:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + "False" + "\n" ; :}   
;

DECLARARBOOLEANOL::= prIngresar LISTAVARIABLES prComo prBoolean prConValor prVerdadero tpuntoycoma
                | prIngresar LISTAVARIABLES prComo prBoolean prConValor prFalso tpuntoycoma
;

//declaracion de caracteres

DECLARARCARACTER::= prIngresar tvariable:a prComo prCaracter prConValor tcaracter:b tpuntoycoma
{: a = a.replace("_", "");
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            codigoTraducidoPython += a + " = " + "'" +  s  + "'" + "\n";
            //System.out.println("Es un número");
        } else {
            codigoTraducidoPython += a + " = " + "'" + b  + "'" + "\n";
            //System.out.println("Es una letra");
        }
:}
;

DECLARARCARACTERL::= prIngresar LISTAVARIABLES prComo prCaracter prConValor tcaracter tpuntoycoma
;

//declaracion de operaciones

DECLARARCONOPERACION::= prIngresar tvariable prComo prNumero prConValor operaciones tpuntoycoma {: System.out.println("Reconoce operacion: ");:}
                    | prIngresar tvariable:z prComo prBoolean prConValor relacional tpuntoycoma {: System.out.println("salida: " + z);:}
;


operaciones::= operaciones:a tresta operaciones:b {: codigoTraducidoPython += "pruebaaaaaa" + a + " " + b ; :} 
            | operaciones tsuma operaciones
            | operaciones tmultiplicacion operaciones
            | operaciones tdivision operaciones
            | operaciones prPotencia operaciones
            | operaciones prMod operaciones
            | tparA:a operaciones:c tparC:b {: codigoTraducidoPython += a + b;:}
            | tcorA operaciones tcorC
            | tvariable
;

relacional::= operaciones prMayor operaciones 
        | operaciones prMenor operaciones
        | operaciones:b prMayorIgual:mi operaciones {:System.out.println(" booleano " + b + " " + mi );:}
        | operaciones prMenorIgual operaciones
        | operaciones prEsIGUAL operaciones
        | operaciones prEsDiferente operaciones
;  


PRUEBA::= tnumero_int
        | tnumero_float
;



// gramatica para las asignaciones


ASIGNACIONES::= ASIGNARNUM
            | ASIGNARNUML
            | ASIGNARCADENA
            | ASIGNARCADENAL
            | ASIGNARBOOLEANO
            | ASIGNARBOOLEANOL
            | ASIGNARCARACTER
            | ASIGNARCARACTERL
;

//asignando numeros

ASIGNARNUM::= tvariable:a tflecha tnumero_int:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython +=  a + " = " + b + "\n" ; :}   
            | tvariable:a tflecha tnumero_float:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n" ; :}   
;

ASIGNARNUML::= LISTAVARIABLES tflecha tnumero_int tpuntoycoma
            | LISTAVARIABLES tflecha tnumero_float tpuntoycoma
;

//asignando cadena

ASIGNARCADENA::= tvariable:a tflecha tcadena:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n" ; :}   
;

ASIGNARCADENAL::= LISTAVARIABLES tflecha tcadena tpuntoycoma
;

//asignando booleano

ASIGNARBOOLEANO::= tvariable:a tflecha prVerdadero:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + "True" + "\n" ; :}   
                | tvariable:a tflecha prFalso:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + "False" + "\n" ; :}   
;

ASIGNARBOOLEANOL::= LISTAVARIABLES tflecha prVerdadero tpuntoycoma
                | LISTAVARIABLES tflecha prFalso tpuntoycoma
;

//asignando caracter

ASIGNARCARACTER::= tvariable:a tflecha tcaracter:b tpuntoycoma {: a = a.replace("_", "");
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            codigoTraducidoPython += a + " = " + "'" +  s  + "'" + "\n";
            //System.out.println("Es un número");
        } else {
            codigoTraducidoPython += a + " = " + "'" + b  + "'" + "\n";
            //System.out.println("Es una letra");
        }
:}   
;

ASIGNARCARACTERL::= LISTAVARIABLES tflecha tcaracter tpuntoycoma
;

//Sentencias
// IF

IF::= prSi CONDICION prEntonces INSTRUCCIONES prFinSi
    | prSi CONDICION prEntonces INSTRUCCIONES prDeloContrario INSTRUCCIONES prFinSi
    | prSi CONDICION prEntonces INSTRUCCIONES prOSi CONDICION prEntonces INSTRUCCIONES prDeloContrario INSTRUCCIONES prFinSi
    | prSi CONDICION prEntonces INSTRUCCIONES LISTAOSI prDeloContrario INSTRUCCIONES prFinSi
;

CONDICION::= tvariable:a prEsIGUAL tvariable:b {: a = a.replace("_", ""); b = b.replace("_", "");
  codigoTraducidoPython += "("+ a + "==" + b + "):" + "\n"; :}
            | tvariable prEsIGUAL tnumero_int
            | tvariable prMayorIgual tvariable
            | tvariable
            | tvariable prMenorIgual tvariable
            | tvariable prMayorIgual tnumero_int
            | tvariable prMayorIgual tnumero_float
            | tvariable prMenorIgual tnumero_int
            | tvariable prMenorIgual tnumero_float
;

LISTAOSI::= prOSi CONDICION prEntonces INSTRUCCIONES LISTAOSI
;

// SEGUN

SEGUN::= prSegun tvariable prHacer prFinSegun
;

// PARA

CICLO_FOR::= prPara tvariable tflecha tvariable prHasta tvariable prHacer INSTRUCCIONES prFinPara
            | prPara tvariable tflecha tnumero_int prHasta tvariable prHacer INSTRUCCIONES prFinPara
            | prPara tvariable tflecha tvariable prHasta tnumero_int prHacer INSTRUCCIONES prFinPara
            | prPara tvariable tflecha tnumero_int prHasta tnumero_int prHacer INSTRUCCIONES prFinPara
            | prPara tvariable tflecha tnumero_float prHasta tvariable prHacer INSTRUCCIONES prFinPara
            | prPara tvariable tflecha tvariable prHasta tnumero_float prHacer INSTRUCCIONES prFinPara
            | prPara tvariable tflecha tnumero_int prHasta tnumero_float prHacer INSTRUCCIONES prFinPara
            | prPara tvariable tflecha tnumero_float prHasta tnumero_int prHacer INSTRUCCIONES prFinPara
            | prPara tvariable tflecha tnumero_float prHasta tnumero_float prHacer INSTRUCCIONES prFinPara
            | prPara tvariable tflecha prHasta prHacer 
;
// MIENTRAS

CICLO_WHILE::= prMientras CONDICIONMIENTRAS prHacer INSTRUCCIONES prFinMientras {:
//codigoTraducidoPython += "whileeee";
:}
            | prMientras CONDICIONMIENTRAS prHacer prFinMientras {: //codigoTraducidoPython += "while" + "\n"; :}
;

CONDICIONMIENTRAS::= tvariable:a prEsIGUAL tvariable:b {: a = a.replace("_", ""); b = b.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "==" + b + "):" + "\n"; :}
            | tvariable:a prEsIGUAL tnumero_int:b {: a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "==" + b + "):" + "\n"; :}
            | tvariable:a prMayorIgual tvariable:b {: a = a.replace("_", ""); b = b.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + ">=" + b + "):" + "\n"; :}
            | tvariable:a {: a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "):" + "\n"; :}
            | tvariable:a prMenorIgual tvariable:b {: a = a.replace("_", ""); b = b.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "<=" + b + "):" + "\n"; :}
            | tvariable:a prMayorIgual tnumero_int:b {: a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + ">=" + b + "):" + "\n"; :}
            | tvariable:a prMayorIgual tnumero_float:b {: a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + ">=" + b + "):" + "\n"; :}
            | tvariable:a prMenorIgual tnumero_int:b {: a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "<=" + b + "):" + "\n"; :}
            | tvariable:a prMenorIgual tnumero_float:b {: a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "<=" + b + "):" + "\n"; :}
;

//REPETIR HASTA

CICLO_DOWHILE::= prRepetir INSTRUCCION prHastaQue CONDICION
                | prRepetir prHastaQue CONDICION
;

//RETORNO

RETORNO::= prRetornar CONDICION
        | prRetornar tnumero_int
        | prRetornar tnumero_float
        | prRetornar EXPRESIONARITMETICA
;

//METODO

METODO::= prMetodo tvariable INSTRUCCIONES prFinMetodo
        | prMetodo tvariable prConParametros tparA tparC INSTRUCCIONES prFinMetodo
;


//FUNCIONES


//LLAMADA DE FUNCIONES Y METODOS

EJECUTAR::= prEjecutar tvariable:a tparA tparC tpuntoycoma
{: 
System.out.println("ejecutar" + a + "\n");
:}
;



// impresiones

IMPRIMIR::= prImprimir tcadena:a tpuntoycoma {: codigoTraducidoPython += "print" + "(" + a + ")" + "\n" ;:}
            | prImprimir tvariable:b tpuntoycoma {:  b = b.replace("_", ""); codigoTraducidoPython+= "print" + "(" +  b + ")" + "\n"; :}
            | prImprimir tparA tvariable:c tparC tpuntoycoma {:  c = c.replace("_", ""); codigoTraducidoPython+= "print" + "(" +  c + ")" + "\n"; :}
            | prImprimir tparA tcadena:d tparC tpuntoycoma {: codigoTraducidoPython+= "print" + "(" +  d + ")" + "\n"; :}

;


IMPRIMIRNL::= prImprimirNl tcadena:a tpuntoycoma {: codigoTraducidoPython += "print" + "(" + a + ")" + "\n" ;:}
            | prImprimirNl tvariable:a tpuntoycoma {:  a = a.replace("_", ""); codigoTraducidoPython += "print" + "(" + a + ")" + "\n" ;:}
            | prImprimirNl tparA tvariable:a tparC tpuntoycoma {:  a = a.replace("_", ""); codigoTraducidoPython += "print" + "(" + a + ")" + "\n" ;:}
            | prImprimirNl tparA tcadena:a tparC tpuntoycoma {: codigoTraducidoPython += "print" + "(" + a + ")" + "\n" ;:}
;

