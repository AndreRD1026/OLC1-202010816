/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,34],$V1=[1,30],$V2=[1,36],$V3=[1,37],$V4=[1,55],$V5=[1,56],$V6=[1,57],$V7=[1,58],$V8=[1,59],$V9=[1,41],$Va=[1,42],$Vb=[1,43],$Vc=[1,44],$Vd=[1,45],$Ve=[1,46],$Vf=[1,47],$Vg=[1,48],$Vh=[1,49],$Vi=[1,50],$Vj=[1,51],$Vk=[1,52],$Vl=[1,53],$Vm=[1,54],$Vn=[2,5,33,38,71,72,78,79,80,81,82,83,89,91,93,94,95,96,97,98,99,102,103,107,108,109,113],$Vo=[38,58,59,71],$Vp=[1,90],$Vq=[1,103],$Vr=[1,104],$Vs=[1,105],$Vt=[1,117],$Vu=[39,41],$Vv=[41,57,59,61],$Vw=[41,57,58,59,61],$Vx=[1,156],$Vy=[1,157],$Vz=[1,158],$VA=[1,159],$VB=[1,160],$VC=[41,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],$VD=[1,187],$VE=[1,186],$VF=[1,189],$VG=[1,188],$VH=[1,190],$VI=[1,191],$VJ=[47,58],$VK=[42,44,61,88],$VL=[1,322],$VM=[1,362],$VN=[1,363];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"LISTAINSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACIONES":7,"ASIGNACIONES":8,"CASTEO":9,"INCREMENTO":10,"DECREMENTO":11,"ENCAPSULAMIENTO":12,"VECTORES":13,"IF":14,"SWITCH":15,"WHILE":16,"FOR":17,"DOWHILE":18,"BREAK":19,"CONTINUE":20,"RETURN":21,"FUNCIONES":22,"METODO":23,"EJECUTAR":24,"PRINT":25,"PRINTLN":26,"TOLOWER":27,"TOUPPER":28,"ROUND":29,"LENGTH":30,"TYPEOF":31,"TOSTRING":32,"TOCHARARRAY":33,"PUSH":34,"POP":35,"RUN":36,"TIPOS":37,"expreID":38,"=":39,"OPERACIONA":40,";":41,"cadena":42,"char":43,"bool":44,"LISTAVARIABLES":45,"LISTAVARIABLES2":46,",":47,"EXPRESIONES":48,"EXPRESION":49,"RELACIONAL":50,"LOGICO":51,"+":52,"-":53,"*":54,"/":55,"%":56,"(":57,")":58,"[":59,"]":60,"numero":61,">":62,"<":63,">=":64,"<=":65,"==":66,"!=":67,"|":68,"&&":69,"!":70,"{":71,"}":72,"DECLARARVECTOR":73,"ACCESOVECTOR":74,"MODIFICARVECTOR":75,"pr_new":76,"LISTAVALORES":77,"pr_int":78,"pr_char":79,"pr_string":80,"pr_bool":81,"pr_double":82,"pr_if":83,"CONDICIONIF":84,"pr_else":85,"pr_elif":86,"OPERAD":87,"caracter":88,"pr_switch":89,"LISTACASE":90,"pr_default":91,":":92,"pr_case":93,"pr_while":94,"pr_for":95,"pr_do":96,"pr_break":97,"pr_continue":98,"pr_return":99,"LISTAPARAMETROS":100,"pr_void":101,"pr_print":102,"pr_println":103,"pr_tolower":104,"pr_toupper":105,"pr_round":106,"pr_length":107,"pr_typeof":108,"pr_tostring":109,".":110,"pr_push":111,"pr_pop":112,"pr_run":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",33:"TOCHARARRAY",38:"expreID",39:"=",41:";",42:"cadena",43:"char",44:"bool",47:",",52:"+",53:"-",54:"*",55:"/",56:"%",57:"(",58:")",59:"[",60:"]",61:"numero",62:">",63:"<",64:">=",65:"<=",66:"==",67:"!=",68:"|",69:"&&",70:"!",71:"{",72:"}",76:"pr_new",78:"pr_int",79:"pr_char",80:"pr_string",81:"pr_bool",82:"pr_double",83:"pr_if",85:"pr_else",86:"pr_elif",88:"caracter",89:"pr_switch",91:"pr_default",92:":",93:"pr_case",94:"pr_while",95:"pr_for",96:"pr_do",97:"pr_break",98:"pr_continue",99:"pr_return",101:"pr_void",102:"pr_print",103:"pr_println",104:"pr_tolower",105:"pr_toupper",106:"pr_round",107:"pr_length",108:"pr_typeof",109:"pr_tostring",110:".",111:"pr_push",112:"pr_pop",113:"pr_run"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,3],[7,3],[45,2],[46,3],[46,2],[8,4],[8,4],[8,4],[8,4],[8,4],[40,2],[40,1],[48,1],[48,1],[48,1],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,1],[50,3],[50,3],[50,3],[50,3],[50,3],[50,3],[51,3],[51,3],[51,3],[9,8],[9,8],[9,8],[9,8],[10,4],[11,4],[12,3],[12,5],[13,1],[13,1],[13,1],[73,11],[73,19],[73,16],[73,9],[73,17],[74,8],[74,11],[75,7],[75,12],[37,1],[37,1],[37,1],[37,1],[37,1],[77,3],[77,3],[14,7],[14,11],[14,18],[84,3],[84,3],[84,3],[84,3],[84,7],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[15,10],[90,5],[90,4],[16,7],[17,18],[17,17],[18,9],[19,2],[20,2],[21,2],[22,9],[100,2],[100,4],[23,8],[23,6],[23,9],[23,7],[24,4],[25,5],[25,5],[25,7],[25,7],[25,7],[25,7],[26,5],[26,5],[26,7],[26,7],[26,7],[26,7],[26,7],[26,7],[26,9],[26,9],[26,9],[27,8],[27,10],[28,8],[28,10],[29,8],[30,8],[30,11],[30,5],[31,5],[31,8],[31,8],[32,5],[32,8],[32,8],[32,8],[34,7],[34,7],[34,7],[34,6],[35,7],[35,7],[35,7],[35,6],[36,5],[36,6],[36,6],[36,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]);  this.$= $$[$0-1];  
break;
case 3:
this.$=[$$[$0]]
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 45: case 54: case 55: case 56: case 57: case 65: case 83: case 84: case 85: case 95: case 96: case 97: case 98: case 99: case 110: case 111: case 112: case 113: case 114: case 115: case 118:
this.$=$$[$0];
break;
case 34:
console.log("error sintactico")
break;
case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42:
this.$= new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 43: case 44:
this.$= new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 46: case 53: case 117: case 127:
this.$=$$[$0-1];
break;
case 48: case 49: case 50: case 51: case 52:
this.$= new Asignacion($$[$0-3], $$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 58:
this.$=$$[$0-2] + '+' + $$[$0];
break;
case 59:
this.$=$$[$0-2] + '-' + $$[$0];
break;
case 60:
this.$=$$[$0-2] + '*' + $$[$0];
break;
case 61:
this.$=$$[$0-2] + '/' + $$[$0];
break;
case 62:
this.$=$$[$0-2] + '%' + $$[$0];
break;
case 63:
this.$= "(" + $$[$0-1] + ")";
break;
case 64:
this.$= "[" + $$[$0-1] + "]";
break;
case 66:
this.$=$$[$0-2] + '>' + $$[$0];
break;
case 67:
this.$=$$[$0-2] + '<' + $$[$0];
break;
case 68:
this.$=$$[$0-2] + '>=' + $$[$0];
break;
case 69:
this.$=$$[$0-2] + '<=' + $$[$0];
break;
case 70:
this.$=$$[$0-2] + '==' + $$[$0];
break;
case 71:
this.$=$$[$0-2] + '!=' + $$[$0];
break;
case 72:
this.$=$$[$0-2] + '|' + $$[$0];
break;
case 73:
this.$=$$[$0-2] + '&&' + $$[$0];
break;
case 74:
this.$=$$[$0-2] + '!' + $$[$0];
break;
case 75: case 76: case 77: case 78:
this.$= new Casteo($$[$0-6], $$[$0-7], $$[$0-3], $$[$0-1]);
break;
case 79:
this.$= new Incremento($$[$0-3]);
break;
case 80:
this.$= new Decremento($$[$0-3]);
break;
case 81:
 this.$= new Bloque($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 82:
 this.$= new Bloque($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 86:
this.$= new Vector($$[$0-7]);
break;
case 87:
this.$= new Vector($$[$0-13]);
break;
case 88: case 94:
this.$= new Vector($$[$0-10]);
break;
case 89:
this.$= new Vector($$[$0-5]);
break;
case 90:
this.$= new Vector($$[$0-11]);
break;
case 91: case 93:
this.$= new Vector($$[$0-6]);
break;
case 92:
this.$= new Vector($$[$0-9]);
break;
case 100: case 101: case 105: case 106: case 107: case 108:
this.$=$$[$0-2];
break;
case 102:
 this.$= new If($$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 103:
 this.$= new If($$[$0-5],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 104:
 this.$= new If($$[$0-12],_$[$0-17].first_line,_$[$0-17].first_column);
break;
case 109:
this.$=$$[$0-6];
break;
case 116:
this.$= new SwitchG($$[$0-7]);
break;
case 119:
this.$= new WhileG($$[$0-3]);
break;
case 120:
this.$= new For($$[$0-1]);
break;
case 121:
this.$= new For($$[$0]);
break;
case 122:
this.$ = new DoWhile($$[$0-6]);
break;
case 123:
this.$=new Break($$[$0-1]);
break;
case 124:
this.$=new Continue($$[$0-1]);
break;
case 125:
this.$=new Return($$[$0-1]);
break;
case 126:
this.$=new Funcion($$[$0-1]);
break;
case 128:
this.$=$$[$0-3];
break;
case 129: case 130:
this.$= new Metodo($$[$0-1]);
break;
case 131: case 132:
this.$= new Metodo($$[$0-2]);
break;
case 133:
this.$= new Ejecutar($$[$0-3]);
break;
case 134: case 135: case 140: case 141:
this.$= new Impresion($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 136: case 137: case 138: case 139: case 142: case 143: case 144: case 145: case 146: case 147:
this.$= new Impresion($$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 148: case 149: case 150:
this.$= new Impresion($$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 151:
this.$ = new Lower($$[$0-6]);
break;
case 152:
this.$= new Lower($$[$0-8]);
break;
case 153:
this.$ = new Upper($$[$0-6]);
break;
case 154:
this.$= new Upper($$[$0-8]);
break;
case 155:
this.$= new Round($$[$0-6]);
break;
case 156:
this.$= new Length($$[$0-6]);
break;
case 157:
this.$= new Length($$[$0-9]);
break;
case 158:
this.$= new Length($$[$0-2]);
break;
case 159:
this.$ = new Typeof($$[$0-2]);
break;
case 160: case 161:
this.$= new Typeof($$[$0-6]); 
break;
case 162:
this.$ = new ToString($$[$0-2]);
break;
case 163: case 164: case 165:
this.$= new ToString($$[$0-2]); 
break;
case 166: case 167: case 168:
this.$= new Push($$[$0-2]);
break;
case 169:
this.$= new Push($$[$0-1]);
break;
case 170: case 171: case 172:
this.$= new Pop($$[$0-2]);
break;
case 173:
this.$= new Pop($$[$0-1]);
break;
case 174:
this.$= new Run($$[$0-3]);
break;
case 175: case 176: case 177:
this.$= new Run($$[$0-4]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{1:[3]},{2:$V0,5:[1,60],6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},o($Vn,[2,3]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),o($Vn,[2,20]),o($Vn,[2,21]),o($Vn,[2,22]),o($Vn,[2,23]),o($Vn,[2,24]),o($Vn,[2,25]),o($Vn,[2,26]),o($Vn,[2,27]),o($Vn,[2,28]),o($Vn,[2,29]),o($Vn,[2,30]),o($Vn,[2,31]),o($Vn,[2,32]),o($Vn,[2,33]),o($Vn,[2,34]),{38:[1,62],45:63,59:[1,64]},{39:[1,65],52:[1,66],53:[1,67],57:[1,68],59:[1,70],110:[1,69]},{2:$V0,4:71,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,42:[1,72],71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},o($Vn,[2,83]),o($Vn,[2,84]),o($Vn,[2,85]),{57:[1,73]},{57:[1,74]},{57:[1,75]},{57:[1,76]},{71:[1,77]},{41:[1,78]},{41:[1,79]},{41:[1,80]},{57:[1,81]},{57:[1,82]},{57:[1,83]},{57:[1,84]},{57:[1,85]},{38:[1,86]},o($Vo,[2,95]),o($Vo,[2,96]),o($Vo,[2,97]),o($Vo,[2,98]),o($Vo,[2,99]),{1:[2,1]},o($Vn,[2,2]),{39:[1,87],41:[1,88],46:89,47:$Vp},{39:[1,91],41:[1,92]},{60:[1,93]},{38:[1,98],40:94,42:[1,95],43:[1,97],44:[1,96],48:99,49:100,50:101,51:102,57:$Vq,59:$Vr,61:$Vs},{52:[1,106]},{53:[1,107]},{37:110,58:[1,109],78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,100:108},{111:[1,111],112:[1,112]},{61:[1,113]},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,114],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{47:[1,115]},{38:$Vt,84:116},{38:[1,118]},{38:$Vt,84:119},{37:120,38:[1,121],78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{2:$V0,4:122,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},o($Vn,[2,123]),o($Vn,[2,124]),o($Vn,[2,125]),{38:[1,124],42:[1,123]},{38:[1,126],42:[1,125]},{38:[1,127]},{61:[1,128]},{61:[1,129]},{57:[1,130]},{38:[1,142],40:131,42:[1,132],43:[1,133],44:[1,134],48:99,49:100,50:101,51:102,57:[1,135],59:$Vr,61:$Vs,104:[1,136],105:[1,137],106:[1,138],107:[1,139],108:[1,140],109:[1,141]},o($Vn,[2,44]),o($Vu,[2,45]),{38:[1,143]},{40:144,42:[1,145],43:[1,146],44:[1,147],48:99,49:100,50:101,51:102,57:$Vq,59:$Vr,61:$Vs},o($Vn,[2,43]),{38:[1,148],59:[1,149]},{41:[1,150],48:151,49:100,50:101,51:102,57:$Vq,59:$Vr,61:$Vs},{41:[1,152]},{41:[1,153]},{41:[1,154]},{41:[1,155]},o($Vv,[2,54]),o($Vw,[2,55],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,62:[1,161],63:[1,162],64:[1,163],65:[1,164],66:[1,165],67:[1,166],68:[1,167],69:[1,168],70:[1,169]}),o($Vw,[2,56]),o($Vw,[2,57]),{49:170,57:$Vq,59:$Vr,61:$Vs},{49:171,57:$Vq,59:$Vr,61:$Vs},o($VC,[2,65]),{41:[1,172]},{41:[1,173]},{47:[1,175],58:[1,174]},{41:[1,178],71:[1,177],92:[1,176]},{38:[1,179]},{57:[1,180]},{57:[1,181]},{60:[1,182]},o($Vn,[2,81]),{42:[1,183]},{58:[1,184]},{62:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,87:185},{58:[1,192]},{58:[1,193]},{38:[1,194]},{39:[1,195]},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,196],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{58:[1,197]},{58:[1,198]},{52:[1,200],58:[1,199]},{52:[1,202],58:[1,201]},{58:[1,203]},{58:[1,204]},{58:[1,205]},{42:[1,208],58:[1,206],61:[1,207],88:[1,209]},{41:[1,210],48:151,49:100,50:101,51:102,57:$Vq,59:$Vr,61:$Vs},{41:[1,211]},{41:[1,212]},{41:[1,213]},{37:214,49:170,57:$Vq,59:$Vr,61:$Vs,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{57:[1,215]},{57:[1,216]},{57:[1,217]},{57:[1,218]},{57:[1,219]},{57:[1,220]},{59:[1,221]},o($Vu,[2,47],{46:222,47:$Vp}),{41:[1,223],48:151,49:100,50:101,51:102,57:$Vq,59:$Vr,61:$Vs},{41:[1,224]},{41:[1,225]},{41:[1,226]},{39:[1,227]},{60:[1,228]},o($Vn,[2,48]),o($Vv,[2,53]),o($Vn,[2,49]),o($Vn,[2,50]),o($Vn,[2,51]),o($Vn,[2,52]),{49:229,57:$Vq,59:$Vr,61:$Vs},{49:230,57:$Vq,59:$Vr,61:$Vs},{49:231,57:$Vq,59:$Vr,61:$Vs},{49:232,57:$Vq,59:$Vr,61:$Vs},{49:233,57:$Vq,59:$Vr,61:$Vs},{49:234,57:$Vq,59:$Vr,61:$Vs},{49:235,57:$Vq,59:$Vr,61:$Vs},{49:236,57:$Vq,59:$Vr,61:$Vs},{49:237,57:$Vq,59:$Vr,61:$Vs},{49:238,57:$Vq,59:$Vr,61:$Vs},{49:239,57:$Vq,59:$Vr,61:$Vs},{49:240,57:$Vq,59:$Vr,61:$Vs},{49:241,57:$Vq,59:$Vr,61:$Vs},{49:242,57:$Vq,59:$Vr,61:$Vs},{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,58:[1,243]},{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,60:[1,244]},o($Vn,[2,79]),o($Vn,[2,80]),{71:[1,246],92:[1,245]},{37:247,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{101:[1,248]},{2:$V0,4:249,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},o($Vn,[2,133]),o($VJ,[2,127]),{42:[1,251],58:[1,253],61:[1,250],88:[1,252]},{42:[1,255],58:[1,257],61:[1,254],88:[1,256]},{39:[1,258]},{72:[1,259]},{71:[1,260]},{42:[1,262],44:[1,264],61:[1,261],88:[1,263]},o($VK,[2,110]),o($VK,[2,111]),o($VK,[2,112]),o($VK,[2,113]),o($VK,[2,114]),o($VK,[2,115]),{71:[1,265]},{71:[1,266]},{39:[1,267]},{61:[1,268]},{94:[1,269]},{41:[1,270],52:[1,271]},{41:[1,272],52:[1,273]},{41:[1,274],52:[1,275]},{38:[1,277],61:[1,276]},{41:[1,278],52:[1,279]},{38:[1,281],42:[1,282],61:[1,280]},{41:[1,283]},{41:[1,284]},{41:[1,285]},{41:[1,286]},{58:[1,287]},{58:[1,288]},{58:[1,289]},o($Vn,[2,35]),o($Vn,[2,36]),o($Vn,[2,37]),o($Vn,[2,38]),{58:[1,290]},{42:[1,291]},{42:[1,292]},{61:[1,293]},{38:[1,294]},{38:[1,296],61:[1,295]},{38:[1,298],44:[1,299],61:[1,297]},{61:[1,300]},o($Vu,[2,46]),o($Vn,[2,39]),o($Vn,[2,40]),o($Vn,[2,41]),o($Vn,[2,42]),{71:[1,302],76:[1,301]},{38:[1,303]},o([41,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70],[2,58],{53:$Vy,54:$Vz,55:$VA,56:$VB}),o([41,52,53,57,58,59,60,61,62,63,64,65,66,67,68,69,70],[2,59],{54:$Vz,55:$VA,56:$VB}),o([41,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70],[2,60],{55:$VA,56:$VB}),o([41,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70],[2,61],{56:$VB}),o($VC,[2,62]),o($Vw,[2,66],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vw,[2,67],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vw,[2,68],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vw,[2,69],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vw,[2,70],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vw,[2,71],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vw,[2,72],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vw,[2,73],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($Vw,[2,74],{52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB}),o($VC,[2,63]),o($VC,[2,64]),{37:304,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,101:[1,305]},{2:$V0,4:306,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{38:[1,307]},{71:[1,308]},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,309],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{58:[1,310]},{58:[1,311]},{58:[1,312]},{41:[1,313]},{58:[1,314]},{58:[1,315]},{58:[1,316]},{41:[1,317]},{42:[1,318]},o($Vn,[2,82]),{2:$V0,4:319,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{58:[2,105],69:[1,320]},{58:[2,106]},{58:[2,107]},{58:[2,108]},{90:321,93:$VL},{2:$V0,4:323,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{61:[1,324]},{41:[1,325]},{57:[1,326]},o($Vn,[2,134]),{38:[1,327],61:[1,328]},o($Vn,[2,135]),{38:[1,329],61:[1,330]},o($Vn,[2,140]),{38:[1,331],61:[1,332]},{58:[1,333]},{52:[1,334]},o($Vn,[2,141]),{38:[1,335],61:[1,336]},{58:[1,337]},{52:[1,338]},{52:[1,339]},o($Vn,[2,158]),o($Vn,[2,159]),o($Vn,[2,162]),o($Vn,[2,174]),{41:[1,340]},{41:[1,341]},{41:[1,342]},{42:[1,344],43:[1,345],44:[1,346],61:[1,343]},{52:[1,348],58:[1,347]},{52:[1,350],58:[1,349]},{58:[1,351]},{58:[1,352],59:[1,353]},{58:[1,354]},{58:[1,355]},{58:[1,356]},{58:[1,357]},{58:[1,358]},{60:[1,359]},{37:360,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{42:$VM,61:$VN,77:361},{39:[1,364]},{71:[1,365]},{71:[1,366]},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,367],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},o($VJ,[2,128]),{2:$V0,4:368,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},o($Vn,[2,130]),{41:[1,369]},{41:[1,370]},{41:[1,371]},o($Vn,[2,169]),{41:[1,372]},{41:[1,373]},{41:[1,374]},o($Vn,[2,173]),{41:[1,375],52:[1,376]},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,377],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{38:[1,378]},{91:[1,379]},{61:[1,380]},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,381],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{41:[1,382]},{38:[1,383]},{38:$Vt,84:384},{41:[1,385]},{41:[1,386]},{41:[1,387]},{41:[1,388]},{41:[1,389]},{41:[1,390]},{41:[1,391]},{42:[1,392]},{41:[1,393]},{41:[1,394]},{41:[1,395]},{42:[1,396]},{38:[1,397]},o($Vn,[2,175]),o($Vn,[2,176]),o($Vn,[2,177]),{41:[1,398]},{41:[1,399]},{41:[1,400]},{41:[1,401]},{41:[1,402]},{61:[1,403]},{41:[1,404]},{61:[1,405]},{41:[1,406]},{41:[1,407]},{61:[1,408]},{41:[1,409]},{41:[1,410]},{41:[1,411]},{41:[1,412]},{41:[1,413]},{41:[1,414],59:[1,415]},{59:[1,416]},{72:[1,417]},{47:[1,418]},{47:[1,419]},{71:[1,421],76:[1,420]},{2:$V0,4:422,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{2:$V0,4:423,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},o($Vn,[2,132]),{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,424],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},o($Vn,[2,166]),o($Vn,[2,167]),o($Vn,[2,168]),o($Vn,[2,170]),o($Vn,[2,171]),o($Vn,[2,172]),o($Vn,[2,93]),{38:[1,425]},o($Vn,[2,102],{85:[1,426],86:[1,427]}),{62:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,87:428},{92:[1,429]},{92:[1,430]},o($Vn,[2,119]),{38:[1,431]},{62:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,87:432},{58:[1,433]},o($Vn,[2,136]),o($Vn,[2,138]),o($Vn,[2,137]),o($Vn,[2,139]),o($Vn,[2,142]),o($Vn,[2,144]),o($Vn,[2,147]),{58:[1,434]},o($Vn,[2,143]),o($Vn,[2,145]),o($Vn,[2,146]),{58:[1,435]},{58:[1,436]},o($Vn,[2,75]),o($Vn,[2,76]),o($Vn,[2,77]),o($Vn,[2,78]),o($Vn,[2,151]),{58:[1,437]},o($Vn,[2,153]),{58:[1,438]},o($Vn,[2,155]),o($Vn,[2,156]),{60:[1,439]},o($Vn,[2,160]),o($Vn,[2,161]),o($Vn,[2,163]),o($Vn,[2,164]),o($Vn,[2,165]),o($Vn,[2,91]),{61:[1,440]},{61:[1,441]},{41:[1,442]},{42:[1,443]},{61:[1,444]},{37:445,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{71:[1,446]},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,447],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,448],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},o($Vn,[2,129]),{59:[1,449]},{71:[1,450]},{57:[1,451]},{61:[1,452]},{2:$V0,4:453,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{2:$V0,4:454,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{62:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,87:455},{61:[1,456]},{41:[1,457]},{41:[1,458]},{41:[1,459]},{41:[1,460]},{41:[1,461]},{41:[1,462]},{58:[1,463]},{60:[1,464]},{60:[1,465]},o($Vn,[2,89]),{72:[2,100]},{72:[2,101]},{59:[1,466]},{42:$VM,61:$VN,77:467},o($Vn,[2,126]),o($Vn,[2,131]),{61:[1,468]},{2:$V0,4:469,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{38:$Vt,84:470},{58:[2,109]},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,471],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,90:472,91:[2,118],93:$VL,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{61:[1,473]},{41:[1,474]},o($Vn,[2,122]),o($Vn,[2,148]),o($Vn,[2,149]),o($Vn,[2,150]),o($Vn,[2,152]),o($Vn,[2,154]),{41:[1,475]},{41:[1,476]},{41:[1,477]},{57:[1,478],61:[1,479]},{72:[1,480]},{60:[1,481]},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,482],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{58:[1,483]},o($Vn,[2,116]),{91:[2,117]},{41:[1,484]},{38:[1,485]},o($Vn,[2,157]),o($Vn,[2,92]),o($Vn,[2,86]),{37:486,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8},{60:[1,487]},{47:[1,488]},{41:[1,489]},o($Vn,[2,103]),{71:[1,490]},{38:[1,491]},{39:[1,492]},{58:[1,493]},{59:[1,494]},{71:[1,495]},o($Vn,[2,94]),{2:$V0,4:496,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{52:[1,497]},{48:498,49:100,50:101,51:102,57:$Vq,59:$Vr,61:$Vs},{42:[1,499]},{61:[1,500]},{42:$VM,61:$VN,77:501},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,502],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{52:[1,503]},{58:[1,504]},{60:[1,505]},{60:[1,506]},{72:[1,507]},{85:[1,508]},{58:[1,509]},{71:[1,510]},{59:[1,511]},{41:[1,512]},{72:[1,513]},{71:[1,514]},{71:[1,515]},{2:$V0,4:516,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{61:[1,517]},o($Vn,[2,88]),{41:[1,518]},{2:$V0,4:519,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{2:$V0,4:520,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,521],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{60:[1,522]},o($Vn,[2,90]),{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,523],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,30:27,31:28,32:29,33:$V1,34:31,35:32,36:33,37:35,38:$V2,71:$V3,72:[1,524],73:38,74:39,75:40,78:$V4,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9,89:$Va,94:$Vb,95:$Vc,96:$Vd,97:$Ve,98:$Vf,99:$Vg,102:$Vh,103:$Vi,107:$Vj,108:$Vk,109:$Vl,113:$Vm},o($Vn,[2,121]),{41:[1,525]},o($Vn,[2,104]),o($Vn,[2,120]),o($Vn,[2,87])],
defaultActions: {60:[2,1],262:[2,106],263:[2,107],264:[2,108],443:[2,100],444:[2,101],452:[2,109],472:[2,117]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Declarciones y tambien las importaciones
const {Declaracion} = require('../instrucciones/Declaracion.ts');
const {Impresion} = require('../instrucciones/Imprimir.ts');
const {Bloque} = require('../instrucciones/bloque.ts');
const {Asignacion} = require('../instrucciones/Asignacion.ts');
const {Casteo} = require('../instrucciones/Casteo.ts');
const {Incremento} = require('../instrucciones/Incremento.ts')
const {Decremento} = require('../instrucciones/Decremento.ts')
const {Vector} = require('../instrucciones/Vector.ts')
const {If} = require('../instrucciones/If.ts')
const {SwitchG} = require('../instrucciones/Switch.ts')
const {WhileG} = require('../instrucciones/While.ts')
const {For} = require('../instrucciones/For.ts')
const {DoWhile} = require('../instrucciones/DoWhile.ts')
const {Break} = require('../instrucciones/Break.ts')
const {Continue} = require('../instrucciones/Continue.ts')
const {Return} = require('../instrucciones/Return.ts')
const {Funcion} = require('../instrucciones/Funcion.ts')
const {Metodo} = require('../instrucciones/Metodo.ts')
const {Ejecutar} = require('../instrucciones/Ejecutar.ts')
const {Lower} = require('../instrucciones/Lower.ts')
const {Upper} = require('../instrucciones/Upper.ts')
const {Round} = require('../instrucciones/Round.ts')
const {Length} = require('../instrucciones/Length.ts')
const {Typeof} = require('../instrucciones/Typeof.ts')
const {ToString} = require('../instrucciones/ToString.ts')
const {ToCharArray} = require('../instrucciones/ToCharArray.ts')
const {Push} = require('../instrucciones/Push.ts')
const {Pop} = require('../instrucciones/Pop.ts')
const {Run} = require('../instrucciones/Run.ts')

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 42
break;
case 4:return 61
break;
case 5:return 44
break;
case 6:return 43
break;
case 7:return 80
break;
case 8:return 78
break;
case 9:return 81
break;
case 10:return 79
break;
case 11:return 82
break;
case 12:return 102
break;
case 13:return 103
break;
case 14:return 76
break;
case 15:return 83
break;
case 16:return 86
break;
case 17:return 85
break;
case 18:return 93
break;
case 19:return 89
break;
case 20:return 91
break;
case 21:return 94
break;
case 22:return 95
break;
case 23:return 96
break;
case 24:return 97
break;
case 25:return 98
break;
case 26:return 99
break;
case 27:return 101
break;
case 28:return 104
break;
case 29:return 105
break;
case 30:return 106
break;
case 31:return 107
break;
case 32:return 108
break;
case 33:return 109
break;
case 34:return 'pr_tochararray'
break;
case 35:return 111
break;
case 36:return 112
break;
case 37:return 113
break;
case 38:return 110
break;
case 39:return 41
break;
case 40:return 47
break;
case 41:return 52
break;
case 42:return 53
break;
case 43:return 54
break;
case 44:return 55
break;
case 45:return 56
break;
case 46:return 58
break;
case 47:return 57
break;
case 48:return 72
break;
case 49:return 71
break;
case 50:return 59
break;
case 51:return 60
break;
case 52:return 39
break;
case 53:return 47
break;
case 54:return 63
break;
case 55:return 62
break;
case 56:return ">="
break;
case 57:return "<="
break;
case 58:return 69
break;
case 59:return "=="
break;
case 60:return "!="
break;
case 61:return 92
break;
case 62:return 68
break;
case 63:return 38;
break;
case 64:return 5
break;
case 65: 
        console.log("error lexico: "+yy_.yytext +"En la linea: " + yy_.yylloc.first_line +", En la columna: "+ yy_.yylloc.first_column);
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([\"][^\"]*[\"]))/i,/^(?:([0-9]+([.][0-9]+)?))/i,/^(?:(true|false\b))/i,/^(?:(([\'][^\n\']*[\'])))/i,/^(?:String\b)/i,/^(?:Int\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:Double\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:New\b)/i,/^(?:If\b)/i,/^(?:Elif\b)/i,/^(?:Else\b)/i,/^(?:Case\b)/i,/^(?:Switch\b)/i,/^(?:Default\b)/i,/^(?:While\b)/i,/^(?:For\b)/i,/^(?:Do\b)/i,/^(?:Break\b)/i,/^(?:Continue\b)/i,/^(?:Return\b)/i,/^(?:Void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Round\b)/i,/^(?:Length\b)/i,/^(?:Typeof\b)/i,/^(?:ToString\b)/i,/^(?:ToCharArray\b)/i,/^(?:Push\b)/i,/^(?:Pop\b)/i,/^(?:Run\b)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\})/i,/^(?:\{)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:,)/i,/^(?:<)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:==)/i,/^(?:!=)/i,/^(?::)/i,/^(?:\|)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar2;
exports.Parser = grammar2.Parser;
exports.parse = function () { return grammar2.parse.apply(grammar2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}