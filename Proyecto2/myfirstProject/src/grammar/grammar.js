/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,6],$V2=[1,25],$V3=[1,26],$V4=[1,27],$V5=[1,36],$V6=[1,37],$V7=[1,38],$V8=[1,39],$V9=[1,40],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[2,5,9,34,61,62,63,64,65,66,67,68,69,70,71,72,75,77,81],$Vj=[1,44],$Vk=[1,48],$Vl=[2,29],$Vm=[1,62],$Vn=[1,63],$Vo=[1,64],$Vp=[1,65],$Vq=[29,47,48,49,51,60],$Vr=[1,91],$Vs=[1,92],$Vt=[1,93],$Vu=[1,94],$Vv=[1,95],$Vw=[1,96],$Vx=[1,97],$Vy=[1,98],$Vz=[29,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"LISTAINSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACIONES":7,"ASIGNACIONES":8,"CASTEO":9,"INCREMENTO":10,"DECREMENTO":11,"BREAK":12,"CONTINUE":13,"RETURN":14,"EJECUTAR":15,"PRINT":16,"PRINTLN":17,"TOUPPER":18,"ROUND":19,"TYPEOF":20,"TOSTRING":21,"PUSH":22,"POP":23,"RUN":24,"TIPOS":25,"EXID":26,"=":27,"OPERACIONA":28,";":29,"cadena":30,"char":31,"bool":32,",":33,"expreID":34,"EXPRESIONES":35,"EXPRESION":36,"RELACIONAL":37,"LOGICO":38,"+":39,"-":40,"*":41,"/":42,"^":43,"%":44,":":45,"?":46,"(":47,")":48,"[":49,"]":50,"numero":51,">":52,"<":53,">=":54,"<=":55,"==":56,"!=":57,"|":58,"&&":59,"!":60,"++":61,"--":62,"pr_int":63,"pr_char":64,"pr_string":65,"pr_bool":66,"pr_double":67,"pr_break":68,"pr_continue":69,"pr_return":70,"pr_print":71,"pr_println":72,"pr_toupper":73,"pr_round":74,"pr_typeof":75,"caracter":76,"pr_tostring":77,".":78,"pr_push":79,"pr_pop":80,"pr_run":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"CASTEO",27:"=",29:";",30:"cadena",31:"char",32:"bool",33:",",34:"expreID",39:"+",40:"-",41:"*",42:"/",43:"^",44:"%",45:":",46:"?",47:"(",48:")",49:"[",50:"]",51:"numero",52:">",53:"<",54:">=",55:"<=",56:"==",57:"!=",58:"|",59:"&&",60:"!",61:"++",62:"--",63:"pr_int",64:"pr_char",65:"pr_string",66:"pr_bool",67:"pr_double",68:"pr_break",69:"pr_continue",70:"pr_return",71:"pr_print",72:"pr_println",73:"pr_toupper",74:"pr_round",75:"pr_typeof",76:"caracter",77:"pr_tostring",78:".",79:"pr_push",80:"pr_pop",81:"pr_run"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,5],[7,5],[7,5],[7,3],[26,3],[26,1],[8,4],[8,4],[8,4],[8,4],[8,4],[28,2],[28,1],[35,1],[35,1],[35,1],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,1],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[38,3],[38,3],[38,2],[10,3],[10,3],[11,3],[11,3],[25,1],[25,1],[25,1],[25,1],[25,1],[12,2],[13,2],[14,2],[14,3],[14,3],[15,4],[16,5],[16,5],[16,7],[16,7],[16,7],[16,7],[17,5],[17,5],[17,7],[17,7],[17,7],[17,7],[17,7],[17,7],[17,9],[17,9],[17,9],[18,8],[18,10],[18,7],[18,9],[19,8],[19,7],[20,5],[20,8],[20,8],[20,8],[20,8],[20,8],[21,5],[21,8],[21,8],[21,8],[21,8],[21,8],[22,7],[22,7],[22,7],[22,6],[23,7],[23,7],[23,7],[23,6],[24,5],[24,6],[24,6],[24,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]);  this.$= $$[$0-1];  
break;
case 3:
this.$=[$$[$0]]
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 36: case 37: case 38: case 39: case 50: case 59: case 64: case 65: case 66: case 67: case 68:
this.$=$$[$0];
break;
case 22:
console.log($$[$0]);
break;
case 23: case 24: case 25: case 26:
this.$= new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 27:
this.$= new Declaracion($$[$0-1],$$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 28:
$$[$0-2].push($$[$0]); this.$ =$$[$0-2];
break;
case 29:
this.$ = [$$[$0]]
break;
case 30: case 31: case 32: case 33: case 34:
this.$= new Asignacion($$[$0-3], $$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 35:
this.$=$$[$0-1];
break;
case 40:
this.$=$$[$0-2] + '+' + $$[$0];
break;
case 41:
this.$=$$[$0-2] + '-' + $$[$0];
break;
case 42:
this.$=$$[$0-2] + '*' + $$[$0];
break;
case 43:
this.$=$$[$0-2] + '/' + $$[$0];
break;
case 44:
this.$=$$[$0-2] + '^' + $$[$0];
break;
case 45:
this.$=$$[$0-2] + '%' + $$[$0];
break;
case 46:
this.$=$$[$0-2] + ':' + $$[$0];
break;
case 47:
this.$=$$[$0-2] + '?' + $$[$0];
break;
case 48:
this.$= "(" + $$[$0-1] + ")";
break;
case 49:
this.$= "[" + $$[$0-1] + "]";
break;
case 51:
this.$=$$[$0-2] + '>' + $$[$0];
break;
case 52:
this.$=$$[$0-2] + '<' + $$[$0];
break;
case 53:
this.$=$$[$0-2] + '>=' + $$[$0];
break;
case 54:
this.$=$$[$0-2] + '<=' + $$[$0];
break;
case 55:
this.$=$$[$0-2] + '==' + $$[$0];
break;
case 56:
this.$=$$[$0-2] + '!=' + $$[$0];
break;
case 57:
this.$=$$[$0-2] + '|' + $$[$0];
break;
case 58:
this.$=$$[$0-2] + '&&' + $$[$0];
break;
case 60:
this.$= new Incremento($$[$0-2],$$[$0-1]);
break;
case 61:
this.$= new Incremento($$[$0-1],$$[$0-2]);
break;
case 62:
this.$= new Decremento($$[$0-2],$$[$0-1]);
break;
case 63:
this.$= new Decremento($$[$0-1],$$[$0-2]);
break;
case 69:
this.$=new Break($$[$0-1]);
break;
case 70:
this.$=new Continue($$[$0-1]);
break;
case 71:
this.$=new Return($$[$0-1],$$[$0-1]);
break;
case 72: case 73:
this.$=new Return($$[$0-2],$$[$0-1]);
break;
case 74:
this.$= new Ejecutar($$[$0-3]);
break;
case 75: case 76:
this.$= new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 77: case 78: case 79: case 80:
this.$= new Print($$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 81: case 82:
this.$= new PrintLn($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 83: case 84: case 85: case 86: case 87: case 88:
this.$= new PrintLn($$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 89: case 90: case 91:
this.$= new PrintLn($$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 92: case 94:
this.$ = new Upper($$[$0-6],$$[$0-2]);
break;
case 93:
this.$= new Upper($$[$0-8],$$[$0-4]);
break;
case 95:
this.$= new Upper($$[$0-8], $$[$0-4]);
break;
case 96: case 97:
this.$= new Round($$[$0-6],$$[$0-2]);
break;
case 98:
this.$ = new Typeof($$[$0-2],$$[$0-2]);
break;
case 99: case 100: case 101: case 102: case 103:
this.$= new Typeof($$[$0-6],$$[$0-2]); 
break;
case 104:
this.$ = new ToString($$[$0-2],$$[$0-2]);
break;
case 105: case 106: case 107: case 108: case 109:
this.$= new ToString($$[$0-6],$$[$0-2]); 
break;
case 110: case 111: case 112:
this.$= new Push($$[$0-6],$$[$0-2]);
break;
case 113:
this.$= new Push($$[$0-5],$$[$0-5]);
break;
case 114: case 115: case 116:
this.$= new Pop($$[$0-6]);
break;
case 117:
this.$= new Pop($$[$0-5]);
break;
case 118:
this.$= new Run($$[$0-3],$$[$0-3]);
break;
case 119: case 120: case 121:
this.$= new Run($$[$0-4],$$[$0-2]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:$V1,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:23,26:24,34:$V2,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,75:$Vf,77:$Vg,81:$Vh},{1:[3]},{2:$V0,5:[1,41],6:42,7:4,8:5,9:$V1,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:23,26:24,34:$V2,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9,68:$Va,69:$Vb,70:$Vc,71:$Vd,72:$Ve,75:$Vf,77:$Vg,81:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),{26:43,34:$Vj},{27:[1,45],33:$Vk,47:[1,46],78:[1,47]},o([27,33,47,78],$Vl,{61:[1,49],62:[1,50]}),{34:[1,51]},{34:[1,52]},{29:[1,53]},{29:[1,54]},{26:57,28:56,29:[1,55],34:$Vj,35:58,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp},{47:[1,66]},{47:[1,67]},{47:[1,68]},{47:[1,69]},{26:70,34:$Vj},{34:[2,64]},{34:[2,65]},{34:[2,66]},{34:[2,67]},{34:[2,68]},{1:[2,1]},o($Vi,[2,2]),{27:[1,71],29:[1,72],33:$Vk},o([27,29,33,47,48],$Vl),{26:77,28:73,30:[1,74],31:[1,76],32:[1,75],34:$Vj,35:58,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp,73:[1,78],74:[1,79]},{48:[1,80]},{79:[1,81],80:[1,82]},{34:[1,83]},{29:[1,84]},{29:[1,85]},{29:[1,86]},{29:[1,87]},o($Vi,[2,69]),o($Vi,[2,70]),o($Vi,[2,71]),{29:[1,88],35:89,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp},{29:[1,90],33:$Vk},o($Vq,[2,36]),o($Vq,[2,37],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,52:[1,99],53:[1,100],54:[1,101],55:[1,102],56:[1,103],57:[1,104],58:[1,105],59:[1,106]}),o($Vq,[2,38]),o($Vq,[2,39]),{36:107,47:$Vm,49:$Vn,51:$Vo},{36:108,47:$Vm,49:$Vn,51:$Vo},o($Vz,[2,50]),{36:109,47:$Vm,49:$Vn,51:$Vo},{30:[1,110],34:[1,111]},{30:[1,112],34:[1,113]},{51:[1,114]},{51:[1,115]},{33:$Vk,47:[1,116]},{28:117,30:[1,118],31:[1,119],32:[1,120],35:58,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp,73:[1,121],74:[1,122],75:[1,123],77:[1,124]},o($Vi,[2,27]),{29:[1,125],35:89,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp},{29:[1,126]},{29:[1,127]},{29:[1,128]},{29:[1,129],33:$Vk},{47:[1,130]},{47:[1,131]},{29:[1,132]},{47:[1,133]},{47:[1,134]},o([27,29,33,47,48,78],[2,28]),o($Vi,[2,60]),o($Vi,[2,62]),o($Vi,[2,61]),o($Vi,[2,63]),o($Vi,[2,72]),o($Vq,[2,35]),o($Vi,[2,73]),{36:135,47:$Vm,49:$Vn,51:$Vo},{36:136,47:$Vm,49:$Vn,51:$Vo},{36:137,47:$Vm,49:$Vn,51:$Vo},{36:138,47:$Vm,49:$Vn,51:$Vo},{36:139,47:$Vm,49:$Vn,51:$Vo},{36:140,47:$Vm,49:$Vn,51:$Vo},{36:141,47:$Vm,49:$Vn,51:$Vo},{36:142,47:$Vm,49:$Vn,51:$Vo},{36:143,47:$Vm,49:$Vn,51:$Vo},{36:144,47:$Vm,49:$Vn,51:$Vo},{36:145,47:$Vm,49:$Vn,51:$Vo},{36:146,47:$Vm,49:$Vn,51:$Vo},{36:147,47:$Vm,49:$Vn,51:$Vo},{36:148,47:$Vm,49:$Vn,51:$Vo},{36:149,47:$Vm,49:$Vn,51:$Vo},{36:150,47:$Vm,49:$Vn,51:$Vo},{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,48:[1,151]},{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,50:[1,152]},o($Vq,[2,59],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),{48:[1,153]},{48:[1,154]},{39:[1,156],48:[1,155]},{39:[1,158],48:[1,157]},{48:[1,159]},{48:[1,160]},{28:162,30:[1,163],35:58,36:59,37:60,38:61,47:$Vm,48:[1,161],49:$Vn,51:$Vo,60:$Vp,76:[1,164]},{29:[1,165],35:89,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp},{29:[1,166]},{29:[1,167]},{29:[1,168]},{47:[1,169]},{47:[1,170]},{47:[1,171]},{47:[1,172]},o($Vi,[2,30]),o($Vi,[2,31]),o($Vi,[2,32]),o($Vi,[2,33]),o($Vi,[2,34]),{30:[1,173]},{28:174,35:58,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp},o($Vi,[2,74]),{28:175,30:[1,176],35:58,36:59,37:60,38:61,47:$Vm,48:[1,178],49:$Vn,51:$Vo,60:$Vp,76:[1,177]},{28:179,30:[1,180],35:58,36:59,37:60,38:61,47:$Vm,48:[1,182],49:$Vn,51:$Vo,60:$Vp,76:[1,181]},o([29,39,47,48,49,50,51,52,53,54,55,56,57,58,59,60],[2,40],{40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o([29,39,40,47,48,49,50,51,52,53,54,55,56,57,58,59,60],[2,41],{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o([29,39,40,41,47,48,49,50,51,52,53,54,55,56,57,58,59,60],[2,42],{42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o([29,39,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60],[2,43],{43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o([29,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60],[2,44],{44:$Vw,45:$Vx,46:$Vy}),o([29,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,60],[2,45],{45:$Vx,46:$Vy}),o([29,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60],[2,46],{46:$Vy}),o($Vz,[2,47]),o($Vq,[2,51],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o($Vq,[2,52],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o($Vq,[2,53],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o($Vq,[2,54],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o($Vq,[2,55],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o($Vq,[2,56],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o($Vq,[2,57],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o($Vq,[2,58],{39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o($Vz,[2,48]),o($Vz,[2,49]),{29:[1,183],39:[1,184]},{29:[1,185],39:[1,186]},{29:[1,187],39:[1,188]},{28:189,34:[1,190],35:58,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp},{29:[1,191],39:[1,192]},{28:193,30:[1,195],34:[1,194],35:58,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp},{29:[1,196]},{29:[1,197]},{29:[1,198]},{35:89,36:59,37:60,38:61,47:$Vm,48:[1,199],49:$Vn,51:$Vo,60:$Vp},{48:[1,200]},{48:[1,201]},o($Vi,[2,23]),o($Vi,[2,24]),o($Vi,[2,25]),o($Vi,[2,26]),{30:[1,202]},{28:203,35:58,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp},{26:208,30:[1,205],32:[1,206],34:$Vj,51:[1,204],76:[1,207]},{26:210,28:209,30:[1,211],32:[1,213],34:$Vj,35:58,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp,76:[1,212]},{39:[1,215],48:[1,214]},{35:89,36:59,37:60,38:61,47:$Vm,48:[1,216],49:$Vn,51:$Vo,60:$Vp},{35:89,36:59,37:60,38:61,47:$Vm,48:[1,217],49:$Vn,51:$Vo,60:$Vp},{48:[1,218]},{48:[1,219]},{29:[1,220]},{35:89,36:59,37:60,38:61,47:$Vm,48:[1,221],49:$Vn,51:$Vo,60:$Vp},{48:[1,222]},{48:[1,223]},{29:[1,224]},o($Vi,[2,75]),{28:226,34:[1,225],35:58,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp},o($Vi,[2,76]),{28:228,34:[1,227],35:58,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp},o($Vi,[2,81]),{34:[1,229],51:[1,230]},{35:89,36:59,37:60,38:61,47:$Vm,48:[1,231],49:$Vn,51:$Vo,60:$Vp},{39:[1,232]},o($Vi,[2,82]),{34:[1,233],51:[1,234]},{35:89,36:59,37:60,38:61,47:$Vm,48:[1,235],49:$Vn,51:$Vo,60:$Vp},{39:[1,236]},{39:[1,237]},o($Vi,[2,98]),o($Vi,[2,104]),o($Vi,[2,118]),{29:[1,238]},{29:[1,239]},{29:[1,240]},{39:[1,242],48:[1,241]},{35:89,36:59,37:60,38:61,47:$Vm,48:[1,243],49:$Vn,51:$Vo,60:$Vp},{48:[1,244]},{48:[1,245]},{48:[1,246]},{48:[1,247]},{33:$Vk,48:[1,248]},{35:89,36:59,37:60,38:61,47:$Vm,48:[1,249],49:$Vn,51:$Vo,60:$Vp},{33:$Vk,48:[1,250]},{48:[1,251]},{48:[1,252]},{48:[1,253]},{29:[1,254]},{28:255,35:58,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp},{29:[1,256]},{29:[1,257]},{29:[1,258]},{29:[1,259]},o($Vi,[2,113]),{29:[1,260]},{29:[1,261]},{29:[1,262]},o($Vi,[2,117]),{29:[1,263]},{29:[1,264],35:89,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp},{29:[1,265]},{29:[1,266],35:89,36:59,37:60,38:61,47:$Vm,49:$Vn,51:$Vo,60:$Vp},{29:[1,267]},{29:[1,268]},{29:[1,269]},{30:[1,270]},{29:[1,271]},{29:[1,272]},{29:[1,273]},{30:[1,274]},{34:[1,275]},o($Vi,[2,119]),o($Vi,[2,120]),o($Vi,[2,121]),{29:[1,276]},{51:[1,277]},{29:[1,278]},{29:[1,279]},{29:[1,280]},{29:[1,281]},{29:[1,282]},{29:[1,283]},{29:[1,284]},{29:[1,285]},{29:[1,286]},{29:[1,287]},{29:[1,288]},o($Vi,[2,94]),{35:89,36:59,37:60,38:61,47:$Vm,48:[1,289],49:$Vn,51:$Vo,60:$Vp},o($Vi,[2,97]),o($Vi,[2,110]),o($Vi,[2,111]),o($Vi,[2,112]),o($Vi,[2,114]),o($Vi,[2,115]),o($Vi,[2,116]),o($Vi,[2,77]),o($Vi,[2,79]),o($Vi,[2,78]),o($Vi,[2,80]),o($Vi,[2,83]),o($Vi,[2,85]),o($Vi,[2,88]),{48:[1,290]},o($Vi,[2,84]),o($Vi,[2,86]),o($Vi,[2,87]),{48:[1,291]},{48:[1,292]},o($Vi,[2,92]),{48:[1,293]},o($Vi,[2,96]),o($Vi,[2,99]),o($Vi,[2,100]),o($Vi,[2,101]),o($Vi,[2,102]),o($Vi,[2,103]),o($Vi,[2,105]),o($Vi,[2,106]),o($Vi,[2,107]),o($Vi,[2,108]),o($Vi,[2,109]),{29:[1,294]},{29:[1,295]},{29:[1,296]},{29:[1,297]},{29:[1,298]},o($Vi,[2,95]),o($Vi,[2,89]),o($Vi,[2,90]),o($Vi,[2,91]),o($Vi,[2,93])],
defaultActions: {36:[2,64],37:[2,65],38:[2,66],39:[2,67],40:[2,68],41:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Declarciones y tambien las importaciones
const {Declaracion} = require('../instrucciones/Declaracion.ts');
const {Print} = require('../instrucciones/Print.ts');
const {PrintLn} = require('../instrucciones/PrintLn.ts');
const {Bloque} = require('../instrucciones/bloque.ts');
const {Asignacion} = require('../instrucciones/Asignacion.ts');
const {Casteo} = require('../instrucciones/Casteo.ts');
const {Incremento} = require('../instrucciones/Incremento.ts')
const {Decremento} = require('../instrucciones/Decremento.ts')
const {Vector} = require('../instrucciones/Vector.ts')
const {OTernario} = require('../instrucciones/OTernario.ts')
const {If} = require('../instrucciones/If.ts')
const {SwitchG} = require('../instrucciones/Switch.ts')
const {WhileG} = require('../instrucciones/While.ts')
const {For} = require('../instrucciones/For.ts')
const {DoWhile} = require('../instrucciones/DoWhile.ts')
const {DoUntil} = require('../instrucciones/DoUntil.ts')
const {Break} = require('../instrucciones/Break.ts')
const {Continue} = require('../instrucciones/Continue.ts')
const {Return} = require('../instrucciones/Return.ts')
const {Funcion} = require('../instrucciones/Funcion.ts')
const {Metodo} = require('../instrucciones/Metodo.ts')
const {Ejecutar} = require('../instrucciones/Ejecutar.ts')
const {Lower} = require('../instrucciones/Lower.ts')
const {Upper} = require('../instrucciones/Upper.ts')
const {Round} = require('../instrucciones/Round.ts')
const {Length} = require('../instrucciones/Length.ts')
const {Typeof} = require('../instrucciones/Typeof.ts')
const {ToString} = require('../instrucciones/ToString.ts')
const {ToCharArray} = require('../instrucciones/ToCharArray.ts')
const {Push} = require('../instrucciones/Push.ts')
const {Pop} = require('../instrucciones/Pop.ts')
const {Run} = require('../instrucciones/Run.ts')
//const { error } =require("../tool/error")

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 30
break;
case 4:return 51
break;
case 5:return 32
break;
case 6:return 31
break;
case 7:return 65
break;
case 8:return 63
break;
case 9:return 66
break;
case 10:return 64
break;
case 11:return 67
break;
case 12:return 71
break;
case 13:return 72
break;
case 14:return 'pr_new'
break;
case 15:return 'pr_if'
break;
case 16:return 'pr_elif'
break;
case 17:return 'pr_else'
break;
case 18:return 'pr_case'
break;
case 19:return 'pr_switch'
break;
case 20:return 'pr_default'
break;
case 21:return 'pr_while'
break;
case 22:return 'pr_for'
break;
case 23:return 'pr_do'
break;
case 24:return 'pr_until'
break;
case 25:return 68
break;
case 26:return 69
break;
case 27:return 70
break;
case 28:return 'pr_void'
break;
case 29:return 'pr_tolower'
break;
case 30:return 73
break;
case 31:return 74
break;
case 32:return 'pr_length'
break;
case 33:return 75
break;
case 34:return 77
break;
case 35:return 'pr_tochararray'
break;
case 36:return 79
break;
case 37:return 80
break;
case 38:return 81
break;
case 39:return "++"
break;
case 40:return "--"
break;
case 41:return ">="
break;
case 42:return "<="
break;
case 43:return 59
break;
case 44:return "=="
break;
case 45:return 78
break;
case 46:return 29
break;
case 47:return 33
break;
case 48:return 39
break;
case 49:return 40
break;
case 50:return 41
break;
case 51:return 42
break;
case 52:return 43
break;
case 53:return 44
break;
case 54:return 46
break;
case 55:return 48
break;
case 56:return 47
break;
case 57:return '}'
break;
case 58:return '{'
break;
case 59:return 49
break;
case 60:return 50
break;
case 61:return 27
break;
case 62:return 33
break;
case 63:return 53
break;
case 64:return 52
break;
case 65:return "!="
break;
case 66:return 45
break;
case 67:return 58
break;
case 68:return 34;
break;
case 69:return 5
break;
case 70: 
        console.log("error lexico: "+yy_.yytext +"En la linea: " + yy_.yylloc.first_line +", En la columna: "+ yy_.yylloc.first_column);
        //let s = s.add_error(new error("Lexico","No se reconoce el caracter "+yy_.yytext,yy_.yylineno+1,yy_.yylloc.first_column+1));
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([\"][^\"]*[\"]))/i,/^(?:([0-9]+([.][0-9]+)?))/i,/^(?:(true|false\b))/i,/^(?:(([\'][^\n\']*[\'])))/i,/^(?:String\b)/i,/^(?:Int\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:Double\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:New\b)/i,/^(?:If\b)/i,/^(?:Elif\b)/i,/^(?:Else\b)/i,/^(?:Case\b)/i,/^(?:Switch\b)/i,/^(?:Default\b)/i,/^(?:While\b)/i,/^(?:For\b)/i,/^(?:Do\b)/i,/^(?:Until\b)/i,/^(?:Break\b)/i,/^(?:Continue\b)/i,/^(?:Return\b)/i,/^(?:Void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Round\b)/i,/^(?:Length\b)/i,/^(?:Typeof\b)/i,/^(?:ToString\b)/i,/^(?:ToCharArray\b)/i,/^(?:Push\b)/i,/^(?:Pop\b)/i,/^(?:Run\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:==)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\})/i,/^(?:\{)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:,)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?::)/i,/^(?:\|)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}