package analizadores;
import java_cup.runtime.Symbol;



parser code
{:
    public static LinkedList<TError> errores = new LinkedList<TError>(); 

    public static String tipo="Lista";
    public String codigoTraducido="";


    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
      
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        errores.add(tmp);
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        TError tmp = new TError("Sintactico",lexema, "TOKEN NO ERA EL ESPERADO",fila,columna);
        errores.add(tmp);
     
    }
:}


//definicion de terminales
terminal var;
terminal tpunto;
terminal tcoma;
terminal tpuntoycoma;
terminal numero;
terminal Cadena;
terminal tcruz;
terminal tguion;
terminal tasterisco;
terminal tdiagonal;
terminal tparA;
terminal tparC;
terminal tguionBajo;
terminal tflecha;
terminal tinterrogaciona;
terminal tinterrogacionc;
terminal tigual;
terminal prInicio;
terminal prBoolean;
terminal prVerdadero;
terminal prFalso;
terminal prNumero;
terminal prCadena;
terminal prPotencia;
terminal prMod;
terminal prIngresar;
terminal prComo;
terminal prConValor;
terminal prSi;
terminal prEntonces;
terminal prFinSi;
terminal prOSi;
terminal prDeloContrario;
terminal prSegun;
terminal prHacer;
terminal prFinSegun;
terminal prPara;
terminal prHasta;
terminal prFinPara;
terminal prIncremental;
terminal prMientras;
terminal prFinMientras;
terminal prRepetir;
terminal prHastaQue;
terminal prRetornar;
terminal prMetodo;
terminal prConParametros;
terminal prFinMetodo;
terminal prFuncion;
terminal prFinFuncion;
terminal prEjecutar;
terminal prImprimir;
terminal prImprimirNl;
terminal prFin;

//definicion de no terminales
non terminal INICIO, E, INSTRUCCION, ASIGNACIONNUM, INGRESARNUM, INGRESARCADENA, INGRESARBOOLEANO,CONDICION;



//gramaticas
start with INICIO;

//INICIO::= prInicio ASIGNACIONNUM prFin {:System.out.println("FIN DE ANALISIS");:};
INICIO::= prInicio INSTRUCCION prFin {:System.out.println(codigoTraducido);:};

INSTRUCCION::= ASIGNACIONNUM INSTRUCCION
            | ASIGNACIONNUM
;

ASIGNACIONNUM::= INGRESARNUM
            | INGRESARCADENA
            | INGRESARBOOLEANO
{:  
        
        codigoTraducido+="prueba";
:}
;

INGRESARNUM::= prIngresar var prComo prNumero prConValor numero tpuntoycoma
;

INGRESARCADENA::= prIngresar var prComo prCadena prConValor Cadena tpuntoycoma
;

INGRESARBOOLEANO::= prIngresar var prComo prBoolean prConValor prVerdadero tpuntoycoma
                |  prIngresar var prComo prBoolean prConValor prFalso tpuntoycoma
;