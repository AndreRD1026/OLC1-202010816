/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,29],$V2=[1,30],$V3=[1,31],$V4=[1,32],$V5=[1,42],$V6=[1,43],$V7=[1,44],$V8=[1,45],$V9=[1,46],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[1,41],$Vj=[2,5,38,65,66,67,68,69,70,71,72,73,74,75,76,78,79,84,86,87,91],$Vk=[1,51],$Vl=[1,55],$Vm=[2,33],$Vn=[1,71],$Vo=[1,72],$Vp=[1,73],$Vq=[1,74],$Vr=[38,52,53,67],$Vs=[33,51,52,53,55,64],$Vt=[1,106],$Vu=[1,107],$Vv=[1,108],$Vw=[1,109],$Vx=[1,110],$Vy=[1,111],$Vz=[1,112],$VA=[1,113],$VB=[33,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],$VC=[37,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"LISTAINSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACIONES":7,"ASIGNACIONES":8,"CASTEO":9,"INCREMENTO":10,"DECREMENTO":11,"ENCAPSULAMIENTO":12,"BREAK":13,"CONTINUE":14,"RETURN":15,"FUNCIONES":16,"EJECUTAR":17,"PRINT":18,"PRINTLN":19,"TOLOWER":20,"TOUPPER":21,"ROUND":22,"TYPEOF":23,"TOSTRING":24,"TOCHARARRAY":25,"PUSH":26,"POP":27,"RUN":28,"TIPOS":29,"EXID":30,"=":31,"OPERACIONA":32,";":33,"cadena":34,"char":35,"bool":36,",":37,"expreID":38,"EXPRESIONES":39,"EXPRESION":40,"RELACIONAL":41,"LOGICO":42,"+":43,"-":44,"*":45,"/":46,"^":47,"%":48,":":49,"?":50,"(":51,")":52,"[":53,"]":54,"numero":55,">":56,"<":57,">=":58,"<=":59,"==":60,"!=":61,"|":62,"&&":63,"!":64,"++":65,"--":66,"{":67,"}":68,"pr_int":69,"pr_char":70,"pr_string":71,"pr_bool":72,"pr_double":73,"pr_break":74,"pr_continue":75,"pr_return":76,"LISTAPARAMETROS":77,"pr_print":78,"pr_println":79,"pr_tolower":80,"PRUEBA":81,"pr_toupper":82,"pr_round":83,"pr_typeof":84,"caracter":85,"pr_tostring":86,"pr_tochararray":87,".":88,"pr_push":89,"pr_pop":90,"pr_run":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",31:"=",33:";",34:"cadena",35:"char",36:"bool",37:",",38:"expreID",43:"+",44:"-",45:"*",46:"/",47:"^",48:"%",49:":",50:"?",51:"(",52:")",53:"[",54:"]",55:"numero",56:">",57:"<",58:">=",59:"<=",60:"==",61:"!=",62:"|",63:"&&",64:"!",65:"++",66:"--",67:"{",68:"}",69:"pr_int",70:"pr_char",71:"pr_string",72:"pr_bool",73:"pr_double",74:"pr_break",75:"pr_continue",76:"pr_return",78:"pr_print",79:"pr_println",80:"pr_tolower",82:"pr_toupper",83:"pr_round",84:"pr_typeof",85:"caracter",86:"pr_tostring",87:"pr_tochararray",88:".",89:"pr_push",90:"pr_pop",91:"pr_run"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,5],[7,5],[7,5],[7,3],[30,3],[30,1],[8,4],[8,4],[8,4],[8,4],[8,4],[32,2],[32,1],[39,1],[39,1],[39,1],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,1],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[42,3],[42,3],[42,2],[9,8],[9,8],[9,8],[9,8],[10,3],[10,3],[11,3],[11,3],[12,3],[12,5],[29,1],[29,1],[29,1],[29,1],[29,1],[13,2],[14,2],[15,2],[15,3],[15,3],[16,9],[77,2],[77,4],[17,4],[18,5],[18,5],[18,7],[18,7],[18,7],[18,7],[19,5],[19,5],[19,7],[19,7],[19,7],[19,7],[19,7],[19,7],[19,9],[19,9],[19,9],[20,8],[20,8],[21,8],[21,10],[21,7],[21,9],[22,8],[22,7],[23,5],[23,8],[23,8],[23,8],[23,8],[23,8],[24,5],[24,8],[24,8],[24,8],[24,8],[24,8],[25,5],[25,10],[25,10],[25,10],[25,10],[25,10],[26,7],[26,7],[26,7],[26,6],[27,7],[27,7],[27,7],[27,6],[28,5],[28,6],[28,6],[28,6],[81,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]);  this.$= $$[$0-1];  
break;
case 3:
this.$=[$$[$0]]
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 40: case 41: case 42: case 43: case 54: case 63: case 74: case 75: case 76: case 77: case 78:
this.$=$$[$0];
break;
case 26:
let s= Singleton.getInstance()
        s.add_error(new error("Sintactico","No se esperaba el caracter "+yytext,yylineno+1,_$[$0].first_column+1));
break;
case 27: case 28: case 29: case 30:
this.$= new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 31:
this.$= new Declaracion($$[$0-1],$$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 32:
$$[$0-2].push($$[$0]); this.$ =$$[$0-2];
break;
case 33:
this.$ = [$$[$0]]
break;
case 34: case 35: case 36: case 37: case 38:
this.$= new Asignacion($$[$0-3], $$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 39:
this.$=$$[$0-1];
break;
case 44:
this.$=$$[$0-2] + '+' + $$[$0];
break;
case 45:
this.$=$$[$0-2] + '-' + $$[$0];
break;
case 46:
this.$=$$[$0-2] + '*' + $$[$0];
break;
case 47:
this.$=$$[$0-2] + '/' + $$[$0];
break;
case 48:
this.$=$$[$0-2] + '^' + $$[$0];
break;
case 49:
this.$=$$[$0-2] + '%' + $$[$0];
break;
case 50:
this.$=$$[$0-2] + ':' + $$[$0];
break;
case 51:
this.$=$$[$0-2] + '?' + $$[$0];
break;
case 52:
this.$= "(" + $$[$0-1] + ")";
break;
case 53:
this.$= "[" + $$[$0-1] + "]";
break;
case 55:
this.$=$$[$0-2] + '>' + $$[$0];
break;
case 56:
this.$=$$[$0-2] + '<' + $$[$0];
break;
case 57:
this.$=$$[$0-2] + '>=' + $$[$0];
break;
case 58:
this.$=$$[$0-2] + '<=' + $$[$0];
break;
case 59:
this.$=$$[$0-2] + '==' + $$[$0];
break;
case 60:
this.$=$$[$0-2] + '!=' + $$[$0];
break;
case 61:
this.$=$$[$0-2] + '|' + $$[$0];
break;
case 62:
this.$=$$[$0-2] + '&&' + $$[$0];
break;
case 64:
this.$= new Casteo($$[$0-7], $$[$0-6], $$[$0-3], $$[$0-1]);
break;
case 65: case 66: case 67:
this.$= new Casteo($$[$0-6], $$[$0-7], $$[$0-3], $$[$0-1]);
break;
case 68:
this.$= new Incremento($$[$0-2],$$[$0-1]);
break;
case 69:
this.$= new Incremento($$[$0-1],$$[$0-2]);
break;
case 70:
this.$= new Decremento($$[$0-2],$$[$0-1]);
break;
case 71:
this.$= new Decremento($$[$0-1],$$[$0-2]);
break;
case 72:
 this.$= new Bloque($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 73:
 this.$= new Bloque($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 79:
this.$=new Break($$[$0-1]);
break;
case 80:
this.$=new Continue($$[$0-1]);
break;
case 81:
this.$=new Return($$[$0-1],$$[$0-1]);
break;
case 82: case 83:
this.$=new Return($$[$0-2],$$[$0-1]);
break;
case 84:
this.$=new Funcion($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1]);
break;
case 85:
this.$=$$[$0];this.$=$$[$0-1];
break;
case 86:
this.$=$$[$0-3];
break;
case 87:
this.$= new Ejecutar($$[$0-3]);
break;
case 88: case 89:
this.$= new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 90: case 91: case 92: case 93:
this.$= new Print($$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 94: case 95:
this.$= new PrintLn($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 96: case 97: case 98: case 99: case 100: case 101:
this.$= new PrintLn($$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 102: case 103: case 104:
this.$= new PrintLn($$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 105:
this.$ = new Lower($$[$0-6],$$[$0-2]);
break;
case 106:
this.$= new Lower($$[$0-6],$$[$0-2]);
break;
case 107: case 109:
this.$ = new Upper($$[$0-6],$$[$0-2]);
break;
case 108:
this.$= new Upper($$[$0-8],$$[$0-4]);
break;
case 110:
this.$= new Upper($$[$0-8], $$[$0-4]);
break;
case 111: case 112:
this.$= new Round($$[$0-6],$$[$0-2]);
break;
case 113:
this.$ = new Typeof($$[$0-2],$$[$0-2]);
break;
case 114: case 115: case 116: case 117: case 118:
this.$= new Typeof($$[$0-6],$$[$0-2]); 
break;
case 119:
this.$ = new ToString($$[$0-2],$$[$0-2]);
break;
case 120: case 121: case 122: case 123: case 124:
this.$= new ToString($$[$0-6],$$[$0-2]); 
break;
case 125:
this.$ = new ToCharArray($$[$0-2],$$[$0-2]);
break;
case 126: case 127: case 128: case 129: case 130:
this.$= new ToCharArray($$[$0-6],$$[$0-2]); 
break;
case 131: case 132: case 133:
this.$= new Push($$[$0-6],$$[$0-2]);
break;
case 134:
this.$= new Push($$[$0-5],$$[$0-5]);
break;
case 135: case 136: case 137:
this.$= new Pop($$[$0-6]);
break;
case 138:
this.$= new Pop($$[$0-5]);
break;
case 139:
this.$= new Run($$[$0-3],$$[$0-3]);
break;
case 140: case 141: case 142:
this.$= new Run($$[$0-4],$$[$0-2]);
break;
case 143:
this.$= new Prueba($$[$0-2],$$[$0-1]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:27,30:28,38:$V1,65:$V2,66:$V3,67:$V4,69:$V5,70:$V6,71:$V7,72:$V8,73:$V9,74:$Va,75:$Vb,76:$Vc,78:$Vd,79:$Ve,84:$Vf,86:$Vg,87:$Vh,91:$Vi},{1:[3]},{2:$V0,5:[1,47],6:48,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:27,30:28,38:$V1,65:$V2,66:$V3,67:$V4,69:$V5,70:$V6,71:$V7,72:$V8,73:$V9,74:$Va,75:$Vb,76:$Vc,78:$Vd,79:$Ve,84:$Vf,86:$Vg,87:$Vh,91:$Vi},o($Vj,[2,3]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),o($Vj,[2,23]),o($Vj,[2,24]),o($Vj,[2,25]),o($Vj,[2,26]),{30:49,38:$Vk,53:[1,50]},{31:[1,52],37:$Vl,51:[1,53],88:[1,54]},o([31,37,51,88],$Vm,{65:[1,56],66:[1,57]}),{38:[1,58]},{38:[1,59]},{2:$V0,4:60,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:27,30:28,34:[1,61],38:$V1,65:$V2,66:$V3,67:$V4,69:$V5,70:$V6,71:$V7,72:$V8,73:$V9,74:$Va,75:$Vb,76:$Vc,78:$Vd,79:$Ve,84:$Vf,86:$Vg,87:$Vh,91:$Vi},{33:[1,62]},{33:[1,63]},{30:66,32:65,33:[1,64],38:$Vk,39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{51:[1,75]},{51:[1,76]},{51:[1,77]},{51:[1,78]},{51:[1,79]},{30:80,38:$Vk},o($Vr,[2,74]),o($Vr,[2,75]),o($Vr,[2,76]),o($Vr,[2,77]),o($Vr,[2,78]),{1:[2,1]},o($Vj,[2,2]),{31:[1,81],33:[1,82],37:$Vl},{54:[1,83]},o([31,33,37,51,52],$Vm),{30:88,32:84,34:[1,85],35:[1,87],36:[1,86],38:$Vk,39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq,82:[1,89],83:[1,90]},{29:93,52:[1,92],69:$V5,70:$V6,71:$V7,72:$V8,73:$V9,77:91},{89:[1,94],90:[1,95]},{38:[1,96]},{33:[1,97]},{33:[1,98]},{33:[1,99]},{33:[1,100]},{2:$V0,6:48,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:27,30:28,38:$V1,65:$V2,66:$V3,67:$V4,68:[1,101],69:$V5,70:$V6,71:$V7,72:$V8,73:$V9,74:$Va,75:$Vb,76:$Vc,78:$Vd,79:$Ve,84:$Vf,86:$Vg,87:$Vh,91:$Vi},{37:[1,102]},o($Vj,[2,79]),o($Vj,[2,80]),o($Vj,[2,81]),{33:[1,103],39:104,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{33:[1,105],37:$Vl},o($Vs,[2,40]),o($Vs,[2,41],{43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,56:[1,114],57:[1,115],58:[1,116],59:[1,117],60:[1,118],61:[1,119],62:[1,120],63:[1,121]}),o($Vs,[2,42]),o($Vs,[2,43]),{40:122,51:$Vn,53:$Vo,55:$Vp},{40:123,51:$Vn,53:$Vo,55:$Vp},o($VB,[2,54]),{40:124,51:$Vn,53:$Vo,55:$Vp},{34:[1,125],38:[1,126]},{34:[1,127],38:[1,128]},{32:129,39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{55:[1,130]},{32:131,39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{37:$Vl,51:[1,132]},{32:133,34:[1,134],35:[1,135],36:[1,136],39:67,40:68,41:69,42:70,51:[1,137],53:$Vo,55:$Vp,64:$Vq,80:[1,138],82:[1,139],83:[1,140],84:[1,141],86:[1,142]},o($Vj,[2,31]),{30:143,38:$Vk},{33:[1,144],39:104,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{33:[1,145]},{33:[1,146]},{33:[1,147]},{33:[1,148],37:$Vl},{51:[1,149]},{51:[1,150]},{37:[1,152],52:[1,151]},{33:[1,153]},{38:[1,154]},{51:[1,155]},{51:[1,156]},o([31,33,37,51,52,88],[2,32]),o($Vj,[2,68]),o($Vj,[2,70]),o($Vj,[2,69]),o($Vj,[2,71]),o($Vj,[2,72]),{34:[1,157]},o($Vj,[2,82]),o($Vs,[2,39]),o($Vj,[2,83]),{40:158,51:$Vn,53:$Vo,55:$Vp},{40:159,51:$Vn,53:$Vo,55:$Vp},{40:160,51:$Vn,53:$Vo,55:$Vp},{40:161,51:$Vn,53:$Vo,55:$Vp},{40:162,51:$Vn,53:$Vo,55:$Vp},{40:163,51:$Vn,53:$Vo,55:$Vp},{40:164,51:$Vn,53:$Vo,55:$Vp},{40:165,51:$Vn,53:$Vo,55:$Vp},{40:166,51:$Vn,53:$Vo,55:$Vp},{40:167,51:$Vn,53:$Vo,55:$Vp},{40:168,51:$Vn,53:$Vo,55:$Vp},{40:169,51:$Vn,53:$Vo,55:$Vp},{40:170,51:$Vn,53:$Vo,55:$Vp},{40:171,51:$Vn,53:$Vo,55:$Vp},{40:172,51:$Vn,53:$Vo,55:$Vp},{40:173,51:$Vn,53:$Vo,55:$Vp},{43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,52:[1,174]},{43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,54:[1,175]},o($Vs,[2,63],{43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),{52:[1,176]},{52:[1,177]},{43:[1,179],52:[1,178]},{43:[1,181],52:[1,180]},{39:104,40:68,41:69,42:70,51:$Vn,52:[1,182],53:$Vo,55:$Vp,64:$Vq},{52:[1,183]},{39:104,40:68,41:69,42:70,51:$Vn,52:[1,184],53:$Vo,55:$Vp,64:$Vq},{32:186,34:[1,187],39:67,40:68,41:69,42:70,51:$Vn,52:[1,185],53:$Vo,55:$Vp,64:$Vq,85:[1,188]},{33:[1,189],39:104,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{33:[1,190]},{33:[1,191]},{33:[1,192]},{29:193,40:122,51:$Vn,53:$Vo,55:$Vp,69:$V5,70:$V6,71:$V7,72:$V8,73:$V9},{51:[1,194]},{51:[1,195]},{51:[1,196]},{51:[1,197]},{51:[1,198]},{31:[1,199],37:$Vl},o($Vj,[2,34]),o($Vj,[2,35]),o($Vj,[2,36]),o($Vj,[2,37]),o($Vj,[2,38]),{34:[1,200]},{32:201,39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{49:[1,202]},{29:203,69:$V5,70:$V6,71:$V7,72:$V8,73:$V9},o($Vj,[2,87]),o($VC,[2,85]),{32:204,34:[1,205],39:67,40:68,41:69,42:70,51:$Vn,52:[1,207],53:$Vo,55:$Vp,64:$Vq,85:[1,206]},{32:208,34:[1,209],39:67,40:68,41:69,42:70,51:$Vn,52:[1,211],53:$Vo,55:$Vp,64:$Vq,85:[1,210]},{68:[1,212]},o([33,43,51,52,53,54,55,56,57,58,59,60,61,62,63,64],[2,44],{44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o([33,43,44,51,52,53,54,55,56,57,58,59,60,61,62,63,64],[2,45],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o([33,43,44,45,51,52,53,54,55,56,57,58,59,60,61,62,63,64],[2,46],{46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o([33,43,44,45,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64],[2,47],{47:$Vx,48:$Vy,49:$Vz,50:$VA}),o([33,43,44,45,46,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64],[2,48],{48:$Vy,49:$Vz,50:$VA}),o([33,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64],[2,49],{49:$Vz,50:$VA}),o([33,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64],[2,50],{50:$VA}),o($VB,[2,51]),o($Vs,[2,55],{43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($Vs,[2,56],{43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($Vs,[2,57],{43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($Vs,[2,58],{43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($Vs,[2,59],{43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($Vs,[2,60],{43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($Vs,[2,61],{43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($Vs,[2,62],{43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA}),o($VB,[2,52]),o($VB,[2,53]),{33:[1,213],43:[1,214]},{33:[1,215],43:[1,216]},{33:[1,217],43:[1,218]},{32:219,38:[1,220],39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{33:[1,221],43:[1,222]},{32:223,34:[1,225],38:[1,224],39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{33:[1,226]},{33:[1,227]},{33:[1,228]},{33:[1,229]},{39:104,40:68,41:69,42:70,51:$Vn,52:[1,230],53:$Vo,55:$Vp,64:$Vq},{52:[1,231]},{52:[1,232]},o($Vj,[2,27]),o($Vj,[2,28]),o($Vj,[2,29]),o($Vj,[2,30]),{52:[1,233]},{34:[1,234],81:235},{34:[1,236]},{32:237,39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{30:242,34:[1,239],36:[1,240],38:$Vk,55:[1,238],85:[1,241]},{30:244,32:243,34:[1,245],36:[1,247],38:$Vk,39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq,85:[1,246]},{87:[1,248]},{43:[1,250],52:[1,249]},{39:104,40:68,41:69,42:70,51:$Vn,52:[1,251],53:$Vo,55:$Vp,64:$Vq},{29:252,69:$V5,70:$V6,71:$V7,72:$V8,73:$V9},{38:[1,253]},{39:104,40:68,41:69,42:70,51:$Vn,52:[1,254],53:$Vo,55:$Vp,64:$Vq},{52:[1,255]},{52:[1,256]},{33:[1,257]},{39:104,40:68,41:69,42:70,51:$Vn,52:[1,258],53:$Vo,55:$Vp,64:$Vq},{52:[1,259]},{52:[1,260]},{33:[1,261]},o($Vj,[2,73]),o($Vj,[2,88]),{32:263,38:[1,262],39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},o($Vj,[2,89]),{32:265,38:[1,264],39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},o($Vj,[2,94]),{38:[1,266],55:[1,267]},{39:104,40:68,41:69,42:70,51:$Vn,52:[1,268],53:$Vo,55:$Vp,64:$Vq},{43:[1,269]},o($Vj,[2,95]),{38:[1,270],55:[1,271]},{39:104,40:68,41:69,42:70,51:$Vn,52:[1,272],53:$Vo,55:$Vp,64:$Vq},{43:[1,273]},{43:[1,274]},o($Vj,[2,113]),o($Vj,[2,119]),o($Vj,[2,125]),o($Vj,[2,139]),{33:[1,275]},{33:[1,276]},{33:[1,277]},{32:278,34:[1,279],35:[1,280],36:[1,281],39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{43:[1,283],52:[1,282]},{52:[1,284]},{43:[1,286],52:[1,285]},{39:104,40:68,41:69,42:70,51:$Vn,52:[1,287],53:$Vo,55:$Vp,64:$Vq},{52:[1,288]},{52:[1,289]},{52:[1,290]},{52:[1,291]},{37:$Vl,52:[1,292]},{39:104,40:68,41:69,42:70,51:$Vn,52:[1,293],53:$Vo,55:$Vp,64:$Vq},{37:$Vl,52:[1,294]},{52:[1,295]},{52:[1,296]},{52:[1,297]},{51:[1,298]},{33:[1,299]},{32:300,39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{33:[1,301]},{67:[1,302]},o($VC,[2,86]),{33:[1,303]},{33:[1,304]},{33:[1,305]},o($Vj,[2,134]),{33:[1,306]},{33:[1,307]},{33:[1,308]},o($Vj,[2,138]),{33:[1,309]},{33:[1,310],39:104,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{33:[1,311]},{33:[1,312],39:104,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{33:[1,313]},{33:[1,314]},{33:[1,315]},{34:[1,316]},{33:[1,317]},{33:[1,318]},{33:[1,319]},{34:[1,320]},{38:[1,321]},o($Vj,[2,140]),o($Vj,[2,141]),o($Vj,[2,142]),{33:[1,322],39:104,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{33:[1,323]},{33:[1,324]},{33:[1,325]},{33:[1,326]},{32:327,39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq},{33:[1,328]},{33:[1,329]},{55:[1,330]},{33:[1,331]},{33:[1,332]},{33:[1,333]},{33:[1,334]},{33:[1,335]},{33:[1,336]},{33:[1,337]},{33:[1,338]},{33:[1,339]},{33:[1,340]},{33:[1,341]},{30:343,32:342,34:[1,344],36:[1,346],38:$Vk,39:67,40:68,41:69,42:70,51:$Vn,53:$Vo,55:$Vp,64:$Vq,85:[1,345]},o($Vj,[2,109]),{39:104,40:68,41:69,42:70,51:$Vn,52:[1,347],53:$Vo,55:$Vp,64:$Vq},o($Vj,[2,112]),{2:$V0,4:348,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:27,30:28,38:$V1,65:$V2,66:$V3,67:$V4,69:$V5,70:$V6,71:$V7,72:$V8,73:$V9,74:$Va,75:$Vb,76:$Vc,78:$Vd,79:$Ve,84:$Vf,86:$Vg,87:$Vh,91:$Vi},o($Vj,[2,131]),o($Vj,[2,132]),o($Vj,[2,133]),o($Vj,[2,135]),o($Vj,[2,136]),o($Vj,[2,137]),o($Vj,[2,90]),o($Vj,[2,92]),o($Vj,[2,91]),o($Vj,[2,93]),o($Vj,[2,96]),o($Vj,[2,98]),o($Vj,[2,101]),{52:[1,349]},o($Vj,[2,97]),o($Vj,[2,99]),o($Vj,[2,100]),{52:[1,350]},{52:[1,351]},o($Vj,[2,64]),o($Vj,[2,65]),o($Vj,[2,66]),o($Vj,[2,67]),o($Vj,[2,105]),{39:104,40:68,41:69,42:70,51:$Vn,52:[2,143],53:$Vo,55:$Vp,64:$Vq},o($Vj,[2,106]),o($Vj,[2,107]),{52:[1,352]},o($Vj,[2,111]),o($Vj,[2,114]),o($Vj,[2,115]),o($Vj,[2,116]),o($Vj,[2,117]),o($Vj,[2,118]),o($Vj,[2,120]),o($Vj,[2,121]),o($Vj,[2,122]),o($Vj,[2,123]),o($Vj,[2,124]),{39:104,40:68,41:69,42:70,51:$Vn,52:[1,353],53:$Vo,55:$Vp,64:$Vq},{37:$Vl,52:[1,354]},{52:[1,355]},{52:[1,356]},{52:[1,357]},{33:[1,358]},{2:$V0,6:48,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:27,30:28,38:$V1,65:$V2,66:$V3,67:$V4,68:[1,359],69:$V5,70:$V6,71:$V7,72:$V8,73:$V9,74:$Va,75:$Vb,76:$Vc,78:$Vd,79:$Ve,84:$Vf,86:$Vg,87:$Vh,91:$Vi},{33:[1,360]},{33:[1,361]},{33:[1,362]},{33:[1,363]},{33:[1,364]},{33:[1,365]},{33:[1,366]},{33:[1,367]},{33:[1,368]},o($Vj,[2,110]),o($Vj,[2,84]),o($Vj,[2,102]),o($Vj,[2,103]),o($Vj,[2,104]),o($Vj,[2,108]),o($Vj,[2,126]),o($Vj,[2,127]),o($Vj,[2,128]),o($Vj,[2,129]),o($Vj,[2,130])],
defaultActions: {47:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Declarciones y tambien las importaciones
const {Declaracion} = require('../instrucciones/Declaracion.ts');
const {Print} = require('../instrucciones/Print.ts');
const {PrintLn} = require('../instrucciones/PrintLn.ts');
const {Bloque} = require('../instrucciones/bloque.ts');
const {Asignacion} = require('../instrucciones/Asignacion.ts');
const {Casteo} = require('../instrucciones/Casteo.ts');
const {Incremento} = require('../instrucciones/Incremento.ts')
const {Decremento} = require('../instrucciones/Decremento.ts')
const {Vector} = require('../instrucciones/Vector.ts')
const {OTernario} = require('../instrucciones/OTernario.ts')
const {If} = require('../instrucciones/If.ts')
const {SwitchG} = require('../instrucciones/Switch.ts')
const {WhileG} = require('../instrucciones/While.ts')
const {For} = require('../instrucciones/For.ts')
const {DoWhile} = require('../instrucciones/DoWhile.ts')
const {DoUntil} = require('../instrucciones/DoUntil.ts')
const {Break} = require('../instrucciones/Break.ts')
const {Continue} = require('../instrucciones/Continue.ts')
const {Return} = require('../instrucciones/Return.ts')
const {Funcion} = require('../instrucciones/Funcion.ts')
const {Metodo} = require('../instrucciones/Metodo.ts')
const {Ejecutar} = require('../instrucciones/Ejecutar.ts')
const {Lower} = require('../instrucciones/Lower.ts')
const {Upper} = require('../instrucciones/Upper.ts')
const {Round} = require('../instrucciones/Round.ts')
const {Length} = require('../instrucciones/Length.ts')
const {Typeof} = require('../instrucciones/Typeof.ts')
const {ToString} = require('../instrucciones/ToString.ts')
const {ToCharArray} = require('../instrucciones/ToCharArray.ts')
const {Push} = require('../instrucciones/Push.ts')
const {Pop} = require('../instrucciones/Pop.ts')
const {Run} = require('../instrucciones/Run.ts')
const {Prueba} = require('../instrucciones/Prueba.ts')
const { Singleton}=  require("../Singleton/Singleton")
const { error } =require("../tool/error")

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 34
break;
case 4:return 55
break;
case 5:return 36
break;
case 6:return 35
break;
case 7:return 71
break;
case 8:return 69
break;
case 9:return 72
break;
case 10:return 70
break;
case 11:return 73
break;
case 12:return 78
break;
case 13:return 79
break;
case 14:return 'pr_new'
break;
case 15:return 'pr_if'
break;
case 16:return 'pr_elif'
break;
case 17:return 'pr_else'
break;
case 18:return 'pr_case'
break;
case 19:return 'pr_switch'
break;
case 20:return 'pr_default'
break;
case 21:return 'pr_while'
break;
case 22:return 'pr_for'
break;
case 23:return 'pr_do'
break;
case 24:return 'pr_until'
break;
case 25:return 74
break;
case 26:return 75
break;
case 27:return 76
break;
case 28:return 'pr_void'
break;
case 29:return 80
break;
case 30:return 82
break;
case 31:return 83
break;
case 32:return 'pr_length'
break;
case 33:return 84
break;
case 34:return 86
break;
case 35:return 87
break;
case 36:return 89
break;
case 37:return 90
break;
case 38:return 91
break;
case 39:return "++"
break;
case 40:return "--"
break;
case 41:return ">="
break;
case 42:return "<="
break;
case 43:return 63
break;
case 44:return "=="
break;
case 45:return 88
break;
case 46:return 33
break;
case 47:return 37
break;
case 48:return 43
break;
case 49:return 44
break;
case 50:return 45
break;
case 51:return 46
break;
case 52:return 47
break;
case 53:return 48
break;
case 54:return 50
break;
case 55:return 52
break;
case 56:return 51
break;
case 57:return 68
break;
case 58:return 67
break;
case 59:return 53
break;
case 60:return 54
break;
case 61:return 31
break;
case 62:return 37
break;
case 63:return 57
break;
case 64:return 56
break;
case 65:return "!="
break;
case 66:return 49
break;
case 67:return 62
break;
case 68:return 38;
break;
case 69:return 5
break;
case 70: 
        let s= Singleton.getInstance()
        s.add_error(new error("Lexico","No se reconoce el caracter "+yy_.yytext,yy_.yylineno+1,yy_.yylloc.first_column+1));
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([\"][^\"]*[\"]))/i,/^(?:([0-9]+([.][0-9]+)?))/i,/^(?:(true|false\b))/i,/^(?:(([\'][^\n\']*[\'])))/i,/^(?:String\b)/i,/^(?:Int\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:Double\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:New\b)/i,/^(?:If\b)/i,/^(?:Elif\b)/i,/^(?:Else\b)/i,/^(?:Case\b)/i,/^(?:Switch\b)/i,/^(?:Default\b)/i,/^(?:While\b)/i,/^(?:For\b)/i,/^(?:Do\b)/i,/^(?:Until\b)/i,/^(?:Break\b)/i,/^(?:Continue\b)/i,/^(?:Return\b)/i,/^(?:Void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Round\b)/i,/^(?:Length\b)/i,/^(?:Typeof\b)/i,/^(?:ToString\b)/i,/^(?:ToCharArray\b)/i,/^(?:Push\b)/i,/^(?:Pop\b)/i,/^(?:Run\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:==)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\})/i,/^(?:\{)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:,)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?::)/i,/^(?:\|)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}