
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;
import java.io.IOException;
import java.io.PrintWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\037\004\000\002\037" +
    "\002\000\002\040\005\000\002\040\004\000\002\041\011" +
    "\000\002\041\011\000\002\041\011\000\002\041\011\000" +
    "\002\041\011\000\002\041\011\000\002\054\004\000\002" +
    "\054\003\000\002\055\003\000\002\056\003\000\002\056" +
    "\005\000\002\056\005\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\056\005\000\002\056\005\000" +
    "\002\056\005\000\002\063\005\000\002\063\005\000\002" +
    "\063\005\000\002\063\005\000\002\063\005\000\002\063" +
    "\005\000\002\063\005\000\002\063\005\000\002\063\003" +
    "\000\002\064\005\000\002\064\005\000\002\064\005\000" +
    "\002\064\005\000\002\064\005\000\002\064\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\030" +
    "\011\000\002\031\011\000\002\032\011\000\002\033\011" +
    "\000\002\033\011\000\002\034\011\000\002\034\011\000" +
    "\002\035\011\000\002\036\011\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\044\006\000\002\045\006\000\002\046\006\000" +
    "\002\047\006\000\002\050\006\000\002\050\006\000\002" +
    "\051\006\000\002\051\006\000\002\052\006\000\002\053" +
    "\006\000\002\011\007\000\002\011\011\000\002\011\012" +
    "\000\002\012\007\000\002\012\006\000\002\042\005\000" +
    "\002\042\005\000\002\042\003\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\005" +
    "\000\002\014\006\000\002\015\013\000\002\015\013\000" +
    "\002\015\013\000\002\015\013\000\002\015\007\000\002" +
    "\016\007\000\002\016\006\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\003\000\002\060\005" +
    "\000\002\060\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\005\000\002\017\006\000\002\017\005\000\002" +
    "\020\004\000\002\020\004\000\002\021\006\000\002\021" +
    "\011\000\002\061\004\000\002\024\007\000\002\025\005" +
    "\000\002\025\005\000\002\025\007\000\002\025\007\000" +
    "\002\026\005\000\002\026\005\000\002\026\007\000\002" +
    "\026\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\004\032\004\001\002\000\036\003\037\006" +
    "\014\026\uffe5\043\007\046\044\064\045\067\063\073\051" +
    "\075\060\077\016\100\011\105\022\106\032\107\035\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\006\313\044\uffe5\001\002\000\056\003\uffb1\006" +
    "\uffb1\026\uffb1\043\uffb1\046\uffb1\061\uffb1\062\uffb1\063\uffb1" +
    "\064\uffb1\067\uffb1\071\uffb1\073\uffb1\074\uffb1\075\uffb1\076" +
    "\uffb1\077\uffb1\100\uffb1\102\uffb1\105\uffb1\106\uffb1\107\uffb1" +
    "\110\uffb1\001\002\000\004\006\301\001\002\000\056\003" +
    "\ufff2\006\ufff2\026\ufff2\043\ufff2\046\ufff2\061\ufff2\062\ufff2" +
    "\063\ufff2\064\ufff2\067\ufff2\071\ufff2\073\ufff2\074\ufff2\075" +
    "\ufff2\076\ufff2\077\ufff2\100\ufff2\102\ufff2\105\ufff2\106\ufff2" +
    "\107\ufff2\110\ufff2\001\002\000\056\003\ufff7\006\ufff7\026" +
    "\ufff7\043\ufff7\046\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7" +
    "\067\ufff7\071\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077" +
    "\ufff7\100\ufff7\102\ufff7\105\ufff7\106\ufff7\107\ufff7\110\ufff7" +
    "\001\002\000\006\011\264\026\263\001\002\000\056\003" +
    "\ufff5\006\ufff5\026\ufff5\043\ufff5\046\ufff5\061\ufff5\062\ufff5" +
    "\063\ufff5\064\ufff5\067\ufff5\071\ufff5\073\ufff5\074\ufff5\075" +
    "\ufff5\076\ufff5\077\ufff5\100\ufff5\102\ufff5\105\ufff5\106\ufff5" +
    "\107\ufff5\110\ufff5\001\002\000\006\004\260\006\117\001" +
    "\002\000\054\003\037\006\014\026\uffe5\043\007\046\044" +
    "\061\ufffe\062\ufffe\063\ufffe\064\045\067\063\071\ufffe\073" +
    "\051\074\ufffe\075\060\077\016\100\011\102\ufffe\105\022" +
    "\106\032\107\035\110\ufffe\001\002\000\004\026\244\001" +
    "\002\000\056\003\ufff1\006\ufff1\026\ufff1\043\ufff1\046\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\064\ufff1\067\ufff1\071\ufff1\073" +
    "\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\102\ufff1" +
    "\105\ufff1\106\ufff1\107\ufff1\110\ufff1\001\002\000\004\006" +
    "\240\001\002\000\004\110\237\001\002\000\056\003\ufff9" +
    "\006\ufff9\026\ufff9\043\ufff9\046\ufff9\061\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\067\ufff9\071\ufff9\073\ufff9\074\ufff9\075\ufff9" +
    "\076\ufff9\077\ufff9\100\ufff9\102\ufff9\105\ufff9\106\ufff9\107" +
    "\ufff9\110\ufff9\001\002\000\056\003\uffe9\006\uffe9\026\uffe9" +
    "\043\uffe9\046\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\067" +
    "\uffe9\071\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9" +
    "\100\uffe9\102\uffe9\105\uffe9\106\uffe9\107\uffe9\110\uffe9\001" +
    "\002\000\056\003\uffb5\006\uffb5\026\uffb5\043\uffb5\046\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\067\uffb5\071\uffb5\073" +
    "\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\102\uffb5" +
    "\105\uffb5\106\uffb5\107\uffb5\110\uffb5\001\002\000\056\003" +
    "\ufff4\006\ufff4\026\ufff4\043\ufff4\046\ufff4\061\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\067\ufff4\071\ufff4\073\ufff4\074\ufff4\075" +
    "\ufff4\076\ufff4\077\ufff4\100\ufff4\102\ufff4\105\ufff4\106\ufff4" +
    "\107\ufff4\110\ufff4\001\002\000\056\003\uffe7\006\uffe7\026" +
    "\uffe7\043\uffe7\046\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7" +
    "\067\uffe7\071\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077" +
    "\uffe7\100\uffe7\102\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7" +
    "\001\002\000\056\003\uffea\006\uffea\026\uffea\043\uffea\046" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\067\uffea\071\uffea" +
    "\073\uffea\074\uffea\075\uffea\076\uffea\077\uffea\100\uffea\102" +
    "\uffea\105\uffea\106\uffea\107\uffea\110\uffea\001\002\000\010" +
    "\006\225\013\224\021\226\001\002\000\056\003\uffe8\006" +
    "\uffe8\026\uffe8\043\uffe8\046\uffe8\061\uffe8\062\uffe8\063\uffe8" +
    "\064\uffe8\067\uffe8\071\uffe8\073\uffe8\074\uffe8\075\uffe8\076" +
    "\uffe8\077\uffe8\100\uffe8\102\uffe8\105\uffe8\106\uffe8\107\uffe8" +
    "\110\uffe8\001\002\000\056\003\ufffb\006\ufffb\026\ufffb\043" +
    "\ufffb\046\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\067\ufffb" +
    "\071\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100" +
    "\ufffb\102\ufffb\105\ufffb\106\ufffb\107\ufffb\110\ufffb\001\002" +
    "\000\010\006\211\013\212\021\213\001\002\000\056\003" +
    "\ufff6\006\ufff6\026\ufff6\043\ufff6\046\ufff6\061\ufff6\062\ufff6" +
    "\063\ufff6\064\ufff6\067\ufff6\071\ufff6\073\ufff6\074\ufff6\075" +
    "\ufff6\076\ufff6\077\ufff6\100\ufff6\102\ufff6\105\ufff6\106\ufff6" +
    "\107\ufff6\110\ufff6\001\002\000\004\012\210\001\002\000" +
    "\056\003\uffed\006\uffed\026\uffed\043\uffed\046\uffed\061\uffed" +
    "\062\uffed\063\uffed\064\uffed\067\uffed\071\uffed\073\uffed\074" +
    "\uffed\075\uffed\076\uffed\077\uffed\100\uffed\102\uffed\105\uffed" +
    "\106\uffed\107\uffed\110\uffed\001\002\000\056\003\uffaf\006" +
    "\uffaf\026\uffaf\043\uffaf\046\uffaf\061\uffaf\062\uffaf\063\uffaf" +
    "\064\uffaf\067\uffaf\071\uffaf\073\uffaf\074\uffaf\075\uffaf\076" +
    "\uffaf\077\uffaf\100\uffaf\102\uffaf\105\uffaf\106\uffaf\107\uffaf" +
    "\110\uffaf\001\002\000\056\003\ufffc\006\ufffc\026\ufffc\043" +
    "\ufffc\046\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\067\ufffc" +
    "\071\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\100" +
    "\ufffc\102\ufffc\105\ufffc\106\ufffc\107\ufffc\110\ufffc\001\002" +
    "\000\056\003\uffb0\006\uffb0\026\uffb0\043\uffb0\046\uffb0\061" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\067\uffb0\071\uffb0\073\uffb0" +
    "\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\102\uffb0\105" +
    "\uffb0\106\uffb0\107\uffb0\110\uffb0\001\002\000\004\006\150" +
    "\001\002\000\004\006\145\001\002\000\056\003\uffb2\006" +
    "\uffb2\026\uffb2\043\uffb2\046\uffb2\061\uffb2\062\uffb2\063\uffb2" +
    "\064\uffb2\067\uffb2\071\uffb2\073\uffb2\074\uffb2\075\uffb2\076" +
    "\uffb2\077\uffb2\100\uffb2\102\uffb2\105\uffb2\106\uffb2\107\uffb2" +
    "\110\uffb2\001\002\000\056\003\uffae\006\uffae\026\uffae\043" +
    "\uffae\046\uffae\061\uffae\062\uffae\063\uffae\064\uffae\067\uffae" +
    "\071\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077\uffae\100" +
    "\uffae\102\uffae\105\uffae\106\uffae\107\uffae\110\uffae\001\002" +
    "\000\056\003\uffee\006\uffee\026\uffee\043\uffee\046\uffee\061" +
    "\uffee\062\uffee\063\uffee\064\uffee\067\uffee\071\uffee\073\uffee" +
    "\074\uffee\075\uffee\076\uffee\077\uffee\100\uffee\102\uffee\105" +
    "\uffee\106\uffee\107\uffee\110\uffee\001\002\000\004\006\117" +
    "\001\002\000\056\003\uffec\006\uffec\026\uffec\043\uffec\046" +
    "\uffec\061\uffec\062\uffec\063\uffec\064\uffec\067\uffec\071\uffec" +
    "\073\uffec\074\uffec\075\uffec\076\uffec\077\uffec\100\uffec\102" +
    "\uffec\105\uffec\106\uffec\107\uffec\110\uffec\001\002\000\056" +
    "\003\ufffd\006\ufffd\026\ufffd\043\ufffd\046\ufffd\061\ufffd\062" +
    "\ufffd\063\ufffd\064\ufffd\067\ufffd\071\ufffd\073\ufffd\074\ufffd" +
    "\075\ufffd\076\ufffd\077\ufffd\100\ufffd\102\ufffd\105\ufffd\106" +
    "\ufffd\107\ufffd\110\ufffd\001\002\000\056\003\uffeb\006\uffeb" +
    "\026\uffeb\043\uffeb\046\uffeb\061\uffeb\062\uffeb\063\uffeb\064" +
    "\uffeb\067\uffeb\071\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb" +
    "\077\uffeb\100\uffeb\102\uffeb\105\uffeb\106\uffeb\107\uffeb\110" +
    "\uffeb\001\002\000\056\003\uffb4\006\uffb4\026\uffb4\043\uffb4" +
    "\046\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\067\uffb4\071" +
    "\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4" +
    "\102\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4\001\002\000" +
    "\056\003\ufffa\006\ufffa\026\ufffa\043\ufffa\046\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\064\ufffa\067\ufffa\071\ufffa\073\ufffa\074" +
    "\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa\102\ufffa\105\ufffa" +
    "\106\ufffa\107\ufffa\110\ufffa\001\002\000\056\003\uffef\006" +
    "\uffef\026\uffef\043\uffef\046\uffef\061\uffef\062\uffef\063\uffef" +
    "\064\uffef\067\uffef\071\uffef\073\uffef\074\uffef\075\uffef\076" +
    "\uffef\077\uffef\100\uffef\102\uffef\105\uffef\106\uffef\107\uffef" +
    "\110\uffef\001\002\000\040\003\037\006\014\026\uffe5\043" +
    "\007\046\044\064\045\067\063\073\051\075\060\076\116" +
    "\077\016\100\011\105\022\106\032\107\035\001\002\000" +
    "\056\003\ufff8\006\ufff8\026\ufff8\043\ufff8\046\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\064\ufff8\067\ufff8\071\ufff8\073\ufff8\074" +
    "\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\102\ufff8\105\ufff8" +
    "\106\ufff8\107\ufff8\110\ufff8\001\002\000\056\003\ufff3\006" +
    "\ufff3\026\ufff3\043\ufff3\046\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\067\ufff3\071\ufff3\073\ufff3\074\ufff3\075\ufff3\076" +
    "\ufff3\077\ufff3\100\ufff3\102\ufff3\105\ufff3\106\ufff3\107\ufff3" +
    "\110\ufff3\001\002\000\004\006\065\001\002\000\056\003" +
    "\uffb3\006\uffb3\026\uffb3\043\uffb3\046\uffb3\061\uffb3\062\uffb3" +
    "\063\uffb3\064\uffb3\067\uffb3\071\uffb3\073\uffb3\074\uffb3\075" +
    "\uffb3\076\uffb3\077\uffb3\100\uffb3\102\uffb3\105\uffb3\106\uffb3" +
    "\107\uffb3\110\uffb3\001\002\000\004\026\066\001\002\000" +
    "\010\004\070\006\067\070\071\001\002\000\004\070\104" +
    "\001\002\000\004\070\073\001\002\000\004\065\072\001" +
    "\002\000\056\003\uff8e\006\uff8e\026\uff8e\043\uff8e\046\uff8e" +
    "\061\uff8e\062\uff8e\063\uff8e\064\uff8e\067\uff8e\071\uff8e\073" +
    "\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e\102\uff8e" +
    "\105\uff8e\106\uff8e\107\uff8e\110\uff8e\001\002\000\006\004" +
    "\075\006\074\001\002\000\004\065\101\001\002\000\004" +
    "\065\076\001\002\000\036\003\037\006\014\026\uffe5\043" +
    "\007\046\044\064\045\067\063\073\051\075\060\077\016" +
    "\100\011\105\022\106\032\107\035\001\002\000\004\071" +
    "\100\001\002\000\056\003\uff8f\006\uff8f\026\uff8f\043\uff8f" +
    "\046\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\067\uff8f\071" +
    "\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f" +
    "\102\uff8f\105\uff8f\106\uff8f\107\uff8f\110\uff8f\001\002\000" +
    "\036\003\037\006\014\026\uffe5\043\007\046\044\064\045" +
    "\067\063\073\051\075\060\077\016\100\011\105\022\106" +
    "\032\107\035\001\002\000\004\071\103\001\002\000\056" +
    "\003\uff91\006\uff91\026\uff91\043\uff91\046\uff91\061\uff91\062" +
    "\uff91\063\uff91\064\uff91\067\uff91\071\uff91\073\uff91\074\uff91" +
    "\075\uff91\076\uff91\077\uff91\100\uff91\102\uff91\105\uff91\106" +
    "\uff91\107\uff91\110\uff91\001\002\000\006\004\106\006\105" +
    "\001\002\000\004\065\112\001\002\000\004\065\107\001" +
    "\002\000\036\003\037\006\014\026\uffe5\043\007\046\044" +
    "\064\045\067\063\073\051\075\060\077\016\100\011\105" +
    "\022\106\032\107\035\001\002\000\004\071\111\001\002" +
    "\000\056\003\uff90\006\uff90\026\uff90\043\uff90\046\uff90\061" +
    "\uff90\062\uff90\063\uff90\064\uff90\067\uff90\071\uff90\073\uff90" +
    "\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90\102\uff90\105" +
    "\uff90\106\uff90\107\uff90\110\uff90\001\002\000\036\003\037" +
    "\006\014\026\uffe5\043\007\046\044\064\045\067\063\073" +
    "\051\075\060\077\016\100\011\105\022\106\032\107\035" +
    "\001\002\000\004\071\114\001\002\000\056\003\uff92\006" +
    "\uff92\026\uff92\043\uff92\046\uff92\061\uff92\062\uff92\063\uff92" +
    "\064\uff92\067\uff92\071\uff92\073\uff92\074\uff92\075\uff92\076" +
    "\uff92\077\uff92\100\uff92\102\uff92\105\uff92\106\uff92\107\uff92" +
    "\110\uff92\001\002\000\004\076\136\001\002\000\004\006" +
    "\117\001\002\000\072\003\uff88\006\uff88\026\uff88\043\uff88" +
    "\046\uff88\047\125\050\124\051\123\052\122\053\121\061" +
    "\uff88\062\uff88\063\uff88\064\uff88\065\uff88\067\uff88\071\uff88" +
    "\073\uff88\074\uff88\075\uff88\076\uff88\077\uff88\100\uff88\102" +
    "\uff88\105\uff88\106\uff88\107\uff88\110\uff88\001\002\000\056" +
    "\003\uff81\006\uff81\026\uff81\043\uff81\046\uff81\061\uff81\062" +
    "\uff81\063\uff81\064\uff81\067\uff81\071\uff81\073\uff81\074\uff81" +
    "\075\uff81\076\uff81\077\uff81\100\uff81\102\uff81\105\uff81\106" +
    "\uff81\107\uff81\110\uff81\001\002\000\006\004\135\006\134" +
    "\001\002\000\006\004\133\006\132\001\002\000\006\004" +
    "\131\006\130\001\002\000\004\004\127\001\002\000\004" +
    "\004\126\001\002\000\060\003\uff84\006\uff84\026\uff84\043" +
    "\uff84\046\uff84\061\uff84\062\uff84\063\uff84\064\uff84\065\uff84" +
    "\067\uff84\071\uff84\073\uff84\074\uff84\075\uff84\076\uff84\077" +
    "\uff84\100\uff84\102\uff84\105\uff84\106\uff84\107\uff84\110\uff84" +
    "\001\002\000\060\003\uff83\006\uff83\026\uff83\043\uff83\046" +
    "\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83\067\uff83" +
    "\071\uff83\073\uff83\074\uff83\075\uff83\076\uff83\077\uff83\100" +
    "\uff83\102\uff83\105\uff83\106\uff83\107\uff83\110\uff83\001\002" +
    "\000\060\003\uff89\006\uff89\026\uff89\043\uff89\046\uff89\061" +
    "\uff89\062\uff89\063\uff89\064\uff89\065\uff89\067\uff89\071\uff89" +
    "\073\uff89\074\uff89\075\uff89\076\uff89\077\uff89\100\uff89\102" +
    "\uff89\105\uff89\106\uff89\107\uff89\110\uff89\001\002\000\060" +
    "\003\uff86\006\uff86\026\uff86\043\uff86\046\uff86\061\uff86\062" +
    "\uff86\063\uff86\064\uff86\065\uff86\067\uff86\071\uff86\073\uff86" +
    "\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86\102\uff86\105" +
    "\uff86\106\uff86\107\uff86\110\uff86\001\002\000\060\003\uff87" +
    "\006\uff87\026\uff87\043\uff87\046\uff87\061\uff87\062\uff87\063" +
    "\uff87\064\uff87\065\uff87\067\uff87\071\uff87\073\uff87\074\uff87" +
    "\075\uff87\076\uff87\077\uff87\100\uff87\102\uff87\105\uff87\106" +
    "\uff87\107\uff87\110\uff87\001\002\000\060\003\uff85\006\uff85" +
    "\026\uff85\043\uff85\046\uff85\061\uff85\062\uff85\063\uff85\064" +
    "\uff85\065\uff85\067\uff85\071\uff85\073\uff85\074\uff85\075\uff85" +
    "\076\uff85\077\uff85\100\uff85\102\uff85\105\uff85\106\uff85\107" +
    "\uff85\110\uff85\001\002\000\060\003\uff8b\006\uff8b\026\uff8b" +
    "\043\uff8b\046\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\065" +
    "\uff8b\067\uff8b\071\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b" +
    "\077\uff8b\100\uff8b\102\uff8b\105\uff8b\106\uff8b\107\uff8b\110" +
    "\uff8b\001\002\000\060\003\uff8a\006\uff8a\026\uff8a\043\uff8a" +
    "\046\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\067" +
    "\uff8a\071\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a" +
    "\100\uff8a\102\uff8a\105\uff8a\106\uff8a\107\uff8a\110\uff8a\001" +
    "\002\000\004\006\117\001\002\000\056\003\uff82\006\uff82" +
    "\026\uff82\043\uff82\046\uff82\061\uff82\062\uff82\063\uff82\064" +
    "\uff82\067\uff82\071\uff82\073\uff82\074\uff82\075\uff82\076\uff82" +
    "\077\uff82\100\uff82\102\uff82\105\uff82\106\uff82\107\uff82\110" +
    "\uff82\001\002\000\004\065\141\001\002\000\040\003\037" +
    "\006\014\026\uffe5\043\007\046\044\064\045\067\063\073" +
    "\051\074\142\075\060\077\016\100\011\105\022\106\032" +
    "\107\035\001\002\000\056\003\uff8c\006\uff8c\026\uff8c\043" +
    "\uff8c\046\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\067\uff8c" +
    "\071\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100" +
    "\uff8c\102\uff8c\105\uff8c\106\uff8c\107\uff8c\110\uff8c\001\002" +
    "\000\004\074\144\001\002\000\056\003\uff8d\006\uff8d\026" +
    "\uff8d\043\uff8d\046\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d" +
    "\067\uff8d\071\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077" +
    "\uff8d\100\uff8d\102\uff8d\105\uff8d\106\uff8d\107\uff8d\110\uff8d" +
    "\001\002\000\004\065\146\001\002\000\004\066\147\001" +
    "\002\000\056\003\uff93\006\uff93\026\uff93\043\uff93\046\uff93" +
    "\061\uff93\062\uff93\063\uff93\064\uff93\067\uff93\071\uff93\073" +
    "\uff93\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93\102\uff93" +
    "\105\uff93\106\uff93\107\uff93\110\uff93\001\002\000\016\047" +
    "\175\050\174\051\172\052\173\053\171\060\uff9c\001\002" +
    "\000\004\060\152\001\002\000\036\003\037\006\014\026" +
    "\uffe5\043\007\046\044\064\045\067\063\073\051\075\060" +
    "\077\016\100\011\105\022\106\032\107\035\001\002\000" +
    "\010\061\155\062\156\063\157\001\002\000\004\063\166" +
    "\001\002\000\056\003\uffa3\006\uffa3\026\uffa3\043\uffa3\046" +
    "\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\067\uffa3\071\uffa3" +
    "\073\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\100\uffa3\102" +
    "\uffa3\105\uffa3\106\uffa3\107\uffa3\110\uffa3\001\002\000\004" +
    "\006\150\001\002\000\036\003\037\006\014\026\uffe5\043" +
    "\007\046\044\064\045\067\063\073\051\075\060\077\016" +
    "\100\011\105\022\106\032\107\035\001\002\000\004\061" +
    "\161\001\002\000\056\003\uffa2\006\uffa2\026\uffa2\043\uffa2" +
    "\046\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\067\uffa2\071" +
    "\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2" +
    "\102\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\001\002\000" +
    "\004\060\163\001\002\000\036\003\037\006\014\026\uffe5" +
    "\043\007\046\044\064\045\067\063\073\051\075\060\077" +
    "\016\100\011\105\022\106\032\107\035\001\002\000\006" +
    "\062\156\063\uff9f\001\002\000\004\063\uffa0\001\002\000" +
    "\036\003\037\006\014\026\uffe5\043\007\046\044\064\045" +
    "\067\063\073\051\075\060\077\016\100\011\105\022\106" +
    "\032\107\035\001\002\000\004\061\170\001\002\000\056" +
    "\003\uffa1\006\uffa1\026\uffa1\043\uffa1\046\uffa1\061\uffa1\062" +
    "\uffa1\063\uffa1\064\uffa1\067\uffa1\071\uffa1\073\uffa1\074\uffa1" +
    "\075\uffa1\076\uffa1\077\uffa1\100\uffa1\102\uffa1\105\uffa1\106" +
    "\uffa1\107\uffa1\110\uffa1\001\002\000\006\004\207\006\206" +
    "\001\002\000\006\004\205\006\204\001\002\000\006\004" +
    "\203\006\202\001\002\000\006\004\201\006\200\001\002" +
    "\000\006\004\177\006\176\001\002\000\004\060\uff97\001" +
    "\002\000\004\060\uff95\001\002\000\004\060\uff96\001\002" +
    "\000\004\060\uff94\001\002\000\004\060\uff9a\001\002\000" +
    "\004\060\uff98\001\002\000\004\060\uff9b\001\002\000\004" +
    "\060\uff99\001\002\000\004\060\uff9e\001\002\000\004\060" +
    "\uff9d\001\002\000\056\003\ufff0\006\ufff0\026\ufff0\043\ufff0" +
    "\046\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\067\ufff0\071" +
    "\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0" +
    "\102\ufff0\105\ufff0\106\ufff0\107\ufff0\110\ufff0\001\002\000" +
    "\004\012\223\001\002\000\004\012\222\001\002\000\006" +
    "\006\214\013\215\001\002\000\004\022\220\001\002\000" +
    "\004\022\216\001\002\000\004\012\217\001\002\000\056" +
    "\003\uff73\006\uff73\026\uff73\043\uff73\046\uff73\061\uff73\062" +
    "\uff73\063\uff73\064\uff73\067\uff73\071\uff73\073\uff73\074\uff73" +
    "\075\uff73\076\uff73\077\uff73\100\uff73\102\uff73\105\uff73\106" +
    "\uff73\107\uff73\110\uff73\001\002\000\004\012\221\001\002" +
    "\000\056\003\uff74\006\uff74\026\uff74\043\uff74\046\uff74\061" +
    "\uff74\062\uff74\063\uff74\064\uff74\067\uff74\071\uff74\073\uff74" +
    "\074\uff74\075\uff74\076\uff74\077\uff74\100\uff74\102\uff74\105" +
    "\uff74\106\uff74\107\uff74\110\uff74\001\002\000\056\003\uff76" +
    "\006\uff76\026\uff76\043\uff76\046\uff76\061\uff76\062\uff76\063" +
    "\uff76\064\uff76\067\uff76\071\uff76\073\uff76\074\uff76\075\uff76" +
    "\076\uff76\077\uff76\100\uff76\102\uff76\105\uff76\106\uff76\107" +
    "\uff76\110\uff76\001\002\000\056\003\uff75\006\uff75\026\uff75" +
    "\043\uff75\046\uff75\061\uff75\062\uff75\063\uff75\064\uff75\067" +
    "\uff75\071\uff75\073\uff75\074\uff75\075\uff75\076\uff75\077\uff75" +
    "\100\uff75\102\uff75\105\uff75\106\uff75\107\uff75\110\uff75\001" +
    "\002\000\004\012\236\001\002\000\004\012\235\001\002" +
    "\000\006\006\227\013\230\001\002\000\004\022\233\001" +
    "\002\000\004\022\231\001\002\000\004\012\232\001\002" +
    "\000\056\003\uff77\006\uff77\026\uff77\043\uff77\046\uff77\061" +
    "\uff77\062\uff77\063\uff77\064\uff77\067\uff77\071\uff77\073\uff77" +
    "\074\uff77\075\uff77\076\uff77\077\uff77\100\uff77\102\uff77\105" +
    "\uff77\106\uff77\107\uff77\110\uff77\001\002\000\004\012\234" +
    "\001\002\000\056\003\uff78\006\uff78\026\uff78\043\uff78\046" +
    "\uff78\061\uff78\062\uff78\063\uff78\064\uff78\067\uff78\071\uff78" +
    "\073\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78\102" +
    "\uff78\105\uff78\106\uff78\107\uff78\110\uff78\001\002\000\056" +
    "\003\uff79\006\uff79\026\uff79\043\uff79\046\uff79\061\uff79\062" +
    "\uff79\063\uff79\064\uff79\067\uff79\071\uff79\073\uff79\074\uff79" +
    "\075\uff79\076\uff79\077\uff79\100\uff79\102\uff79\105\uff79\106" +
    "\uff79\107\uff79\110\uff79\001\002\000\056\003\uff7a\006\uff7a" +
    "\026\uff7a\043\uff7a\046\uff7a\061\uff7a\062\uff7a\063\uff7a\064" +
    "\uff7a\067\uff7a\071\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a" +
    "\077\uff7a\100\uff7a\102\uff7a\105\uff7a\106\uff7a\107\uff7a\110" +
    "\uff7a\001\002\000\004\002\000\001\002\000\004\021\241" +
    "\001\002\000\004\022\242\001\002\000\004\012\243\001" +
    "\002\000\056\003\uff7b\006\uff7b\026\uff7b\043\uff7b\046\uff7b" +
    "\061\uff7b\062\uff7b\063\uff7b\064\uff7b\067\uff7b\071\uff7b\073" +
    "\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b\100\uff7b\102\uff7b" +
    "\105\uff7b\106\uff7b\107\uff7b\110\uff7b\001\002\000\014\004" +
    "\246\007\251\013\245\034\247\035\250\001\002\000\004" +
    "\012\256\001\002\000\004\012\255\001\002\000\004\012" +
    "\254\001\002\000\004\012\253\001\002\000\004\012\252" +
    "\001\002\000\056\003\uffa4\006\uffa4\026\uffa4\043\uffa4\046" +
    "\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\067\uffa4\071\uffa4" +
    "\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\102" +
    "\uffa4\105\uffa4\106\uffa4\107\uffa4\110\uffa4\001\002\000\056" +
    "\003\uffa6\006\uffa6\026\uffa6\043\uffa6\046\uffa6\061\uffa6\062" +
    "\uffa6\063\uffa6\064\uffa6\067\uffa6\071\uffa6\073\uffa6\074\uffa6" +
    "\075\uffa6\076\uffa6\077\uffa6\100\uffa6\102\uffa6\105\uffa6\106" +
    "\uffa6\107\uffa6\110\uffa6\001\002\000\056\003\uffa7\006\uffa7" +
    "\026\uffa7\043\uffa7\046\uffa7\061\uffa7\062\uffa7\063\uffa7\064" +
    "\uffa7\067\uffa7\071\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7" +
    "\077\uffa7\100\uffa7\102\uffa7\105\uffa7\106\uffa7\107\uffa7\110" +
    "\uffa7\001\002\000\056\003\uffac\006\uffac\026\uffac\043\uffac" +
    "\046\uffac\061\uffac\062\uffac\063\uffac\064\uffac\067\uffac\071" +
    "\uffac\073\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac" +
    "\102\uffac\105\uffac\106\uffac\107\uffac\110\uffac\001\002\000" +
    "\056\003\uffaa\006\uffaa\026\uffaa\043\uffaa\046\uffaa\061\uffaa" +
    "\062\uffaa\063\uffaa\064\uffaa\067\uffaa\071\uffaa\073\uffaa\074" +
    "\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\102\uffaa\105\uffaa" +
    "\106\uffaa\107\uffaa\110\uffaa\001\002\000\020\061\uffff\062" +
    "\uffff\063\uffff\071\uffff\074\uffff\102\uffff\110\uffff\001\002" +
    "\000\056\003\uff7f\006\uff7f\026\uff7f\043\uff7f\046\uff7f\061" +
    "\uff7f\062\uff7f\063\uff7f\064\uff7f\067\uff7f\071\uff7f\073\uff7f" +
    "\074\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f\102\uff7f\105" +
    "\uff7f\106\uff7f\107\uff7f\110\uff7f\001\002\000\056\003\uff80" +
    "\006\uff80\026\uff80\043\uff80\046\uff80\061\uff80\062\uff80\063" +
    "\uff80\064\uff80\067\uff80\071\uff80\073\uff80\074\uff80\075\uff80" +
    "\076\uff80\077\uff80\100\uff80\102\uff80\105\uff80\106\uff80\107" +
    "\uff80\110\uff80\001\002\000\006\026\uffe6\044\uffe6\001\002" +
    "\000\014\004\270\007\273\013\267\034\271\035\272\001" +
    "\002\000\004\006\265\001\002\000\010\011\264\026\uffe3" +
    "\044\uffe3\001\002\000\006\026\uffe4\044\uffe4\001\002\000" +
    "\004\012\300\001\002\000\004\012\277\001\002\000\004" +
    "\012\276\001\002\000\004\012\275\001\002\000\004\012" +
    "\274\001\002\000\056\003\uffa5\006\uffa5\026\uffa5\043\uffa5" +
    "\046\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\067\uffa5\071" +
    "\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5" +
    "\102\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5\001\002\000" +
    "\056\003\uffa8\006\uffa8\026\uffa8\043\uffa8\046\uffa8\061\uffa8" +
    "\062\uffa8\063\uffa8\064\uffa8\067\uffa8\071\uffa8\073\uffa8\074" +
    "\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\102\uffa8\105\uffa8" +
    "\106\uffa8\107\uffa8\110\uffa8\001\002\000\056\003\uffa9\006" +
    "\uffa9\026\uffa9\043\uffa9\046\uffa9\061\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\067\uffa9\071\uffa9\073\uffa9\074\uffa9\075\uffa9\076" +
    "\uffa9\077\uffa9\100\uffa9\102\uffa9\105\uffa9\106\uffa9\107\uffa9" +
    "\110\uffa9\001\002\000\056\003\uffad\006\uffad\026\uffad\043" +
    "\uffad\046\uffad\061\uffad\062\uffad\063\uffad\064\uffad\067\uffad" +
    "\071\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100" +
    "\uffad\102\uffad\105\uffad\106\uffad\107\uffad\110\uffad\001\002" +
    "\000\056\003\uffab\006\uffab\026\uffab\043\uffab\046\uffab\061" +
    "\uffab\062\uffab\063\uffab\064\uffab\067\uffab\071\uffab\073\uffab" +
    "\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab\102\uffab\105" +
    "\uffab\106\uffab\107\uffab\110\uffab\001\002\000\040\003\037" +
    "\006\014\026\uffe5\043\007\046\044\064\045\067\063\073" +
    "\051\075\060\077\016\100\011\101\302\105\022\106\032" +
    "\107\035\001\002\000\004\021\305\001\002\000\004\102" +
    "\304\001\002\000\056\003\uff7e\006\uff7e\026\uff7e\043\uff7e" +
    "\046\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\067\uff7e\071" +
    "\uff7e\073\uff7e\074\uff7e\075\uff7e\076\uff7e\077\uff7e\100\uff7e" +
    "\102\uff7e\105\uff7e\106\uff7e\107\uff7e\110\uff7e\001\002\000" +
    "\004\022\306\001\002\000\004\006\307\001\002\000\004" +
    "\011\312\001\002\000\004\102\311\001\002\000\056\003" +
    "\uff7d\006\uff7d\026\uff7d\043\uff7d\046\uff7d\061\uff7d\062\uff7d" +
    "\063\uff7d\064\uff7d\067\uff7d\071\uff7d\073\uff7d\074\uff7d\075" +
    "\uff7d\076\uff7d\077\uff7d\100\uff7d\102\uff7d\105\uff7d\106\uff7d" +
    "\107\uff7d\110\uff7d\001\002\000\004\102\uff7c\001\002\000" +
    "\006\011\264\044\340\001\002\000\004\044\315\001\002" +
    "\000\012\033\316\036\317\037\321\040\320\001\002\000" +
    "\004\045\333\001\002\000\004\045\330\001\002\000\004" +
    "\045\325\001\002\000\004\045\322\001\002\000\004\004" +
    "\323\001\002\000\004\012\324\001\002\000\056\003\uffbe" +
    "\006\uffbe\026\uffbe\043\uffbe\046\uffbe\061\uffbe\062\uffbe\063" +
    "\uffbe\064\uffbe\067\uffbe\071\uffbe\073\uffbe\074\uffbe\075\uffbe" +
    "\076\uffbe\077\uffbe\100\uffbe\102\uffbe\105\uffbe\106\uffbe\107" +
    "\uffbe\110\uffbe\001\002\000\004\013\326\001\002\000\004" +
    "\012\327\001\002\000\056\003\uffbc\006\uffbc\026\uffbc\043" +
    "\uffbc\046\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\067\uffbc" +
    "\071\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100" +
    "\uffbc\102\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\001\002" +
    "\000\004\007\331\001\002\000\004\012\332\001\002\000" +
    "\056\003\uffb6\006\uffb6\026\uffb6\043\uffb6\046\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\064\uffb6\067\uffb6\071\uffb6\073\uffb6\074" +
    "\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\102\uffb6\105\uffb6" +
    "\106\uffb6\107\uffb6\110\uffb6\001\002\000\006\034\334\035" +
    "\335\001\002\000\004\012\337\001\002\000\004\012\336" +
    "\001\002\000\056\003\uffb8\006\uffb8\026\uffb8\043\uffb8\046" +
    "\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\067\uffb8\071\uffb8" +
    "\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\102" +
    "\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8\001\002\000\056" +
    "\003\uffb9\006\uffb9\026\uffb9\043\uffb9\046\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\067\uffb9\071\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\077\uffb9\100\uffb9\102\uffb9\105\uffb9\106" +
    "\uffb9\107\uffb9\110\uffb9\001\002\000\012\033\341\036\342" +
    "\037\344\040\343\001\002\000\004\045\u0130\001\002\000" +
    "\004\045\u012d\001\002\000\004\045\u012a\001\002\000\004" +
    "\045\345\001\002\000\012\004\354\006\351\021\347\023" +
    "\355\001\002\000\004\012\u0129\001\002\000\012\004\354" +
    "\006\351\021\347\023\355\001\002\000\012\004\uffdb\012" +
    "\uffdb\021\uffdb\023\uffdb\001\002\000\046\012\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\022\uffc8\024\uffc8\041\uffc8\042" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\057\uffc8\001\002\000\004\012\u0128\001" +
    "\002\000\012\004\354\012\u0126\021\366\023\370\001\002" +
    "\000\032\004\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\041\uffd9\042\uffd9" +
    "\001\002\000\012\004\354\006\351\021\347\023\355\001" +
    "\002\000\040\014\u0103\015\u010e\016\u010d\017\u010c\041\u0102" +
    "\042\u0105\047\u0107\050\u0110\051\u0104\052\u010f\053\u0109\054" +
    "\u0108\055\u010a\056\u010b\057\u0106\001\002\000\026\004\uffda" +
    "\012\uffda\014\362\015\365\016\363\017\364\021\uffda\023" +
    "\uffda\041\361\042\360\001\002\000\010\004\354\021\366" +
    "\023\370\001\002\000\010\004\354\021\366\023\370\001" +
    "\002\000\010\004\354\021\366\023\370\001\002\000\010" +
    "\004\354\021\366\023\370\001\002\000\010\004\354\021" +
    "\366\023\370\001\002\000\010\004\354\021\366\023\370" +
    "\001\002\000\010\004\354\021\366\023\370\001\002\000" +
    "\032\004\uffd7\012\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\041\uffd7\042\uffd7\001" +
    "\002\000\010\004\354\021\366\023\370\001\002\000\020" +
    "\014\362\015\365\016\363\017\364\024\372\041\361\042" +
    "\360\001\002\000\032\004\uffd1\012\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\041" +
    "\uffd1\042\uffd1\001\002\000\020\014\362\015\365\016\363" +
    "\017\364\022\374\041\361\042\360\001\002\000\032\004" +
    "\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\041\uffd2\042\uffd2\001\002\000" +
    "\032\004\uffd5\012\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\041\uffd5\042\uffd5\001" +
    "\002\000\032\004\uffd6\012\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\041\uffd6\042" +
    "\uffd6\001\002\000\032\004\uffd8\012\uffd8\014\uffd8\015\365" +
    "\016\363\017\364\021\uffd8\022\uffd8\023\uffd8\024\uffd8\041" +
    "\361\042\360\001\002\000\032\004\uffd3\012\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\041\uffd3\042\uffd3\001\002\000\032\004\uffd4\012\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\041\uffd4\042\uffd4\001\002\000\010\006\351" +
    "\021\u0111\023\u0113\001\002\000\010\006\351\021\u0111\023" +
    "\u0113\001\002\000\010\006\351\021\u0111\023\u0113\001\002" +
    "\000\010\006\351\021\u0111\023\u0113\001\002\000\010\006" +
    "\351\021\u0111\023\u0113\001\002\000\010\006\351\021\u0111" +
    "\023\u0113\001\002\000\010\006\351\021\u0111\023\u0113\001" +
    "\002\000\010\006\351\021\u0111\023\u0113\001\002\000\010" +
    "\006\351\021\u0111\023\u0113\001\002\000\010\006\351\021" +
    "\u0111\023\u0113\001\002\000\010\006\351\021\u0111\023\u0113" +
    "\001\002\000\010\006\351\021\u0111\023\u0113\001\002\000" +
    "\010\006\351\021\u0111\023\u0113\001\002\000\010\006\351" +
    "\021\u0111\023\u0113\001\002\000\010\006\351\021\u0111\023" +
    "\u0113\001\002\000\010\006\351\021\u0111\023\u0113\001\002" +
    "\000\020\012\uffc6\014\u0103\015\u010e\016\u010d\017\u010c\041" +
    "\u0102\042\u0105\001\002\000\010\006\351\021\u0111\023\u0113" +
    "\001\002\000\020\014\u0103\015\u010e\016\u010d\017\u010c\024" +
    "\u0115\041\u0102\042\u0105\001\002\000\046\012\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\022\uffc9\024\uffc9\041\uffc9\042" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\001\002\000\020\014\u0103\015" +
    "\u010e\016\u010d\017\u010c\022\u0117\041\u0102\042\u0105\001\002" +
    "\000\046\012\uffca\014\uffca\015\uffca\016\uffca\017\uffca\022" +
    "\uffca\024\uffca\041\uffca\042\uffca\047\uffca\050\uffca\051\uffca" +
    "\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\001" +
    "\002\000\020\012\uffc4\014\u0103\015\u010e\016\u010d\017\u010c" +
    "\041\u0102\042\u0105\001\002\000\046\012\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\022\uffd0\024\uffd0\041\uffd0\042\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\056\uffd0\057\uffd0\001\002\000\046\012\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\022\uffce\024\uffce\041\uffce\042" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce" +
    "\055\uffce\056\uffce\057\uffce\001\002\000\046\012\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\022\uffcd\024\uffcd\041\uffcd" +
    "\042\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\001\002\000\020\012\uffc0" +
    "\014\u0103\015\u010e\016\u010d\017\u010c\041\u0102\042\u0105\001" +
    "\002\000\020\012\uffc1\014\u0103\015\u010e\016\u010d\017\u010c" +
    "\041\u0102\042\u0105\001\002\000\020\012\uffc3\014\u0103\015" +
    "\u010e\016\u010d\017\u010c\041\u0102\042\u0105\001\002\000\020" +
    "\012\uffc2\014\u0103\015\u010e\016\u010d\017\u010c\041\u0102\042" +
    "\u0105\001\002\000\020\012\uffc7\014\u0103\015\u010e\016\u010d" +
    "\017\u010c\041\u0102\042\u0105\001\002\000\020\012\uffbf\014" +
    "\u0103\015\u010e\016\u010d\017\u010c\041\u0102\042\u0105\001\002" +
    "\000\046\012\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\022" +
    "\uffcb\024\uffcb\041\uffcb\042\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\001" +
    "\002\000\020\012\uffc5\014\u0103\015\u010e\016\u010d\017\u010c" +
    "\041\u0102\042\u0105\001\002\000\046\012\uffcf\014\uffcf\015" +
    "\u010e\016\u010d\017\u010c\022\uffcf\024\uffcf\041\u0102\042\u0105" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\001\002\000\046\012\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\022\uffcc\024\uffcc\041\uffcc\042" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\001\002\000\056\003\uffe2\006" +
    "\uffe2\026\uffe2\043\uffe2\046\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\064\uffe2\067\uffe2\071\uffe2\073\uffe2\074\uffe2\075\uffe2\076" +
    "\uffe2\077\uffe2\100\uffe2\102\uffe2\105\uffe2\106\uffe2\107\uffe2" +
    "\110\uffe2\001\002\000\012\004\uffdc\012\uffdc\021\uffdc\023" +
    "\uffdc\001\002\000\056\003\uffe1\006\uffe1\026\uffe1\043\uffe1" +
    "\046\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\067\uffe1\071" +
    "\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1" +
    "\102\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1\001\002\000" +
    "\056\003\uffe0\006\uffe0\026\uffe0\043\uffe0\046\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\uffe0\067\uffe0\071\uffe0\073\uffe0\074" +
    "\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\102\uffe0\105\uffe0" +
    "\106\uffe0\107\uffe0\110\uffe0\001\002\000\004\013\u012b\001" +
    "\002\000\004\012\u012c\001\002\000\056\003\uffbd\006\uffbd" +
    "\026\uffbd\043\uffbd\046\uffbd\061\uffbd\062\uffbd\063\uffbd\064" +
    "\uffbd\067\uffbd\071\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd" +
    "\077\uffbd\100\uffbd\102\uffbd\105\uffbd\106\uffbd\107\uffbd\110" +
    "\uffbd\001\002\000\004\007\u012e\001\002\000\004\012\u012f" +
    "\001\002\000\056\003\uffb7\006\uffb7\026\uffb7\043\uffb7\046" +
    "\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\067\uffb7\071\uffb7" +
    "\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\102" +
    "\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\001\002\000\014" +
    "\006\351\021\u0111\023\u0113\034\u0131\035\u0135\001\002\000" +
    "\004\012\u013a\001\002\000\004\012\u0139\001\002\000\004" +
    "\012\u0138\001\002\000\042\012\u0137\014\u0103\015\u010e\016" +
    "\u010d\017\u010c\041\u0102\042\u0105\047\u0107\050\u0110\051\u0104" +
    "\052\u010f\053\u0109\054\u0108\055\u010a\056\u010b\057\u0106\001" +
    "\002\000\004\012\u0136\001\002\000\056\003\uffba\006\uffba" +
    "\026\uffba\043\uffba\046\uffba\061\uffba\062\uffba\063\uffba\064" +
    "\uffba\067\uffba\071\uffba\073\uffba\074\uffba\075\uffba\076\uffba" +
    "\077\uffba\100\uffba\102\uffba\105\uffba\106\uffba\107\uffba\110" +
    "\uffba\001\002\000\056\003\uffdf\006\uffdf\026\uffdf\043\uffdf" +
    "\046\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\067\uffdf\071" +
    "\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf" +
    "\102\uffdf\105\uffdf\106\uffdf\107\uffdf\110\uffdf\001\002\000" +
    "\056\003\uffdd\006\uffdd\026\uffdd\043\uffdd\046\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\064\uffdd\067\uffdd\071\uffdd\073\uffdd\074" +
    "\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\102\uffdd\105\uffdd" +
    "\106\uffdd\107\uffdd\110\uffdd\001\002\000\056\003\uffde\006" +
    "\uffde\026\uffde\043\uffde\046\uffde\061\uffde\062\uffde\063\uffde" +
    "\064\uffde\067\uffde\071\uffde\073\uffde\074\uffde\075\uffde\076" +
    "\uffde\077\uffde\100\uffde\102\uffde\105\uffde\106\uffde\107\uffde" +
    "\110\uffde\001\002\000\056\003\uffbb\006\uffbb\026\uffbb\043" +
    "\uffbb\046\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\067\uffbb" +
    "\071\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\100" +
    "\uffbb\102\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\004\002\004\001\001\000\104\003\022\004" +
    "\016\007\052\010\041\011\033\014\055\015\023\016\060" +
    "\017\012\020\035\021\014\022\026\024\061\025\011\026" +
    "\020\027\027\030\047\031\037\032\051\033\053\034\030" +
    "\035\024\036\032\037\017\041\056\044\025\045\054\046" +
    "\063\047\045\050\007\051\042\052\040\053\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\261\001\001\000\002\001" +
    "\001\000\004\060\260\001\001\000\104\003\256\004\016" +
    "\007\052\010\041\011\033\014\055\015\023\016\060\017" +
    "\012\020\035\021\014\022\026\024\061\025\011\026\020" +
    "\027\027\030\047\031\037\032\051\033\053\034\030\035" +
    "\024\036\032\037\017\041\056\044\025\045\054\046\063" +
    "\047\045\050\007\051\042\052\040\053\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\102\004\114\007\052\010\041\011\033\014\055" +
    "\015\023\016\060\017\012\020\035\021\014\022\026\024" +
    "\061\025\011\026\020\027\027\030\047\031\037\032\051" +
    "\033\053\034\030\035\024\036\032\037\017\041\056\044" +
    "\025\045\054\046\063\047\045\050\007\051\042\052\040" +
    "\053\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\003\076\004\016\007\052\010" +
    "\041\011\033\014\055\015\023\016\060\017\012\020\035" +
    "\021\014\022\026\024\061\025\011\026\020\027\027\030" +
    "\047\031\037\032\051\033\053\034\030\035\024\036\032" +
    "\037\017\041\056\044\025\045\054\046\063\047\045\050" +
    "\007\051\042\052\040\053\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\003\101\004\016\007\052\010" +
    "\041\011\033\014\055\015\023\016\060\017\012\020\035" +
    "\021\014\022\026\024\061\025\011\026\020\027\027\030" +
    "\047\031\037\032\051\033\053\034\030\035\024\036\032" +
    "\037\017\041\056\044\025\045\054\046\063\047\045\050" +
    "\007\051\042\052\040\053\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\104\003\107\004\016\007\052\010\041" +
    "\011\033\014\055\015\023\016\060\017\012\020\035\021" +
    "\014\022\026\024\061\025\011\026\020\027\027\030\047" +
    "\031\037\032\051\033\053\034\030\035\024\036\032\037" +
    "\017\041\056\044\025\045\054\046\063\047\045\050\007" +
    "\051\042\052\040\053\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\104\003\112\004\016\007\052\010\041" +
    "\011\033\014\055\015\023\016\060\017\012\020\035\021" +
    "\014\022\026\024\061\025\011\026\020\027\027\030\047" +
    "\031\037\032\051\033\053\034\030\035\024\036\032\037" +
    "\017\041\056\044\025\045\054\046\063\047\045\050\007" +
    "\051\042\052\040\053\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\104\003\142" +
    "\004\016\007\052\010\041\011\033\014\055\015\023\016" +
    "\060\017\012\020\035\021\014\022\026\024\061\025\011" +
    "\026\020\027\027\030\047\031\037\032\051\033\053\034" +
    "\030\035\024\036\032\037\017\041\056\044\025\045\054" +
    "\046\063\047\045\050\007\051\042\052\040\053\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\003\152\004\016" +
    "\007\052\010\041\011\033\014\055\015\023\016\060\017" +
    "\012\020\035\021\014\022\026\024\061\025\011\026\020" +
    "\027\027\030\047\031\037\032\051\033\053\034\030\035" +
    "\024\036\032\037\017\041\056\044\025\045\054\046\063" +
    "\047\045\050\007\051\042\052\040\053\046\001\001\000" +
    "\004\012\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\161\001\001\000\104\003\157\004\016\007" +
    "\052\010\041\011\033\014\055\015\023\016\060\017\012" +
    "\020\035\021\014\022\026\024\061\025\011\026\020\027" +
    "\027\030\047\031\037\032\051\033\053\034\030\035\024" +
    "\036\032\037\017\041\056\044\025\045\054\046\063\047" +
    "\045\050\007\051\042\052\040\053\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\003" +
    "\163\004\016\007\052\010\041\011\033\014\055\015\023" +
    "\016\060\017\012\020\035\021\014\022\026\024\061\025" +
    "\011\026\020\027\027\030\047\031\037\032\051\033\053" +
    "\034\030\035\024\036\032\037\017\041\056\044\025\045" +
    "\054\046\063\047\045\050\007\051\042\052\040\053\046" +
    "\001\001\000\004\012\164\001\001\000\002\001\001\000" +
    "\104\003\166\004\016\007\052\010\041\011\033\014\055" +
    "\015\023\016\060\017\012\020\035\021\014\022\026\024" +
    "\061\025\011\026\020\027\027\030\047\031\037\032\051" +
    "\033\053\034\030\035\024\036\032\037\017\041\056\044" +
    "\025\045\054\046\063\047\045\050\007\051\042\052\040" +
    "\053\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\104\003\302\004\016\007\052\010\041" +
    "\011\033\014\055\015\023\016\060\017\012\020\035\021" +
    "\014\022\026\024\061\025\011\026\020\027\027\030\047" +
    "\031\037\032\051\033\053\034\030\035\024\036\032\037" +
    "\017\041\056\044\025\045\054\046\063\047\045\050\007" +
    "\051\042\052\040\053\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\054\352" +
    "\055\347\056\356\063\355\064\351\065\345\001\001\000" +
    "\002\001\001\000\006\056\372\063\u0115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\055" +
    "\u0126\056\356\001\001\000\002\001\001\000\006\056\370" +
    "\063\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\u0100\001\001\000\004\056\377\001\001\000\004" +
    "\056\376\001\001\000\004\056\375\001\001\000\004\056" +
    "\374\001\001\000\004\056\366\001\001\000\004\056\372" +
    "\001\001\000\002\001\001\000\004\056\370\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\u0124" +
    "\001\001\000\004\063\u0123\001\001\000\004\063\u0122\001" +
    "\001\000\004\063\u0121\001\001\000\004\063\u0120\001\001" +
    "\000\004\063\u011f\001\001\000\004\063\u011e\001\001\000" +
    "\004\063\u011d\001\001\000\004\063\u011c\001\001\000\004" +
    "\063\u011b\001\001\000\004\063\u011a\001\001\000\004\063" +
    "\u0119\001\001\000\004\063\u0118\001\001\000\004\063\u0117" +
    "\001\001\000\004\063\u0111\001\001\000\004\063\u0115\001" +
    "\001\000\002\001\001\000\004\063\u0113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\063\u0133\064\u0131\065" +
    "\u0132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static LinkedList<TError> errores = new LinkedList<TError>();
    public static ArrayList<String> vars = new ArrayList<String>();


    public static String tipo="Lista";
    public String codigoTraducidoPython="";
    public String codigoTraducidoGolang="";
    public String errorm="";

    public static boolean isNumeric(String cadena) {

        boolean resultado;

        try {
            Integer.parseInt(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }

        return resultado;
    }
    
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\t" + errorm);
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        errores.add(tmp);
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left + 1)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 

        TError tmp = new TError("Sintactico",lexema, "TOKEN NO ERA EL ESPERADO",fila,columna);
        errores.add(tmp);
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= prInicio INSTRUCCIONES prFin 
            {
              Object RESULT =null;
		 System.out.println("FIN DE ANALISIS");

    String fileName = "SalidaTraducida.py";
    try{
    PrintWriter writer = new PrintWriter(fileName);
    writer.println("def main():");
    writer.println(codigoTraducidoPython);
    writer.println("");
    writer.println("");
    writer.println("if __name__ == '__main__':");
    writer.println("\tmain()");
    writer.println("");
    writer.close();
    }
    catch (IOException e){
      System.out.println("An error occurred.");
      e.printStackTrace();
      }

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACIONES 
            {
              Object RESULT =null;
		int declararleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int declararright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object declarar = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=declarar; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACIONES 
            {
              Object RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=asign; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IF 
            {
              Object RESULT =null;
		int conifleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int conifright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object conif = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=conif; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SEGUN 
            {
              Object RESULT =null;
		int segleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int segright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object seg = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=seg; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CICLO_FOR 
            {
              Object RESULT =null;
		int foorleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int foorright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object foor = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=foor; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CICLO_WHILE 
            {
              Object RESULT =null;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object whilee = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=whilee; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CICLO_DOWHILE 
            {
              Object RESULT =null;
		int dowhileleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dowhileright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object dowhile = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=dowhile; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= RETORNO 
            {
              Object RESULT =null;
		int retrnleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int retrnright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object retrn = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=retrn; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= METODO 
            {
              Object RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object met = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=met; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= FUNCIONES 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=func; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= EJECUTAR 
            {
              Object RESULT =null;
		int execleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int execright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object exec = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=exec; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= IMPRIMIR 
            {
              Object RESULT =null;
		int imprleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int imprright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object impr = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=impr; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= IMPRIMIRNL 
            {
              Object RESULT =null;
		int imprlnleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int imprlnright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object imprln = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=imprln; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= error tpuntoycoma 
            {
              Object RESULT =null;
		 System.out.println("Falta un ;"); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES ::= DECLARARCONOPERACION 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=dec; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONES ::= DECLARARNUML 
            {
              Object RESULT =null;
		int dec1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dec1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object dec1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=dec1; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACIONES ::= DECLARARCADENA 
            {
              Object RESULT =null;
		int dec2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dec2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object dec2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=dec2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACIONES ::= DECLARARCADENAL 
            {
              Object RESULT =null;
		int dec3left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dec3right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object dec3 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=dec3; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACIONES ::= DECLARARBOOLEANO 
            {
              Object RESULT =null;
		int dec4left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dec4right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object dec4 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=dec4; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACIONES ::= DECLARARBOOLEANOL 
            {
              Object RESULT =null;
		int dec5left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dec5right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object dec5 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=dec5; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACIONES ::= DECLARARCARACTER 
            {
              Object RESULT =null;
		int dec6left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dec6right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object dec6 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=dec6; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACIONES ::= DECLARARCARACTERL 
            {
              Object RESULT =null;
		int dec7left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dec7right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object dec7 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=dec7; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACIONES ::= DECLARARNUM 
            {
              Object RESULT =null;
		int dec8left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dec8right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object dec8 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=dec8; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTAVARIABLES ::= tvariable LISTAVARIABLES2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 vars.add(a); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTAVARIABLES ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTAVARIABLES2 ::= tcoma tvariable LISTAVARIABLES2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 vars.add(a); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES2",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTAVARIABLES2 ::= tcoma tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 vars.add(a); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES2",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARARCONOPERACION ::= prIngresar tvariable prComo prNumero prConValor EXPRESIONARITMETICA tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCONOPERACION",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARARCONOPERACION ::= prIngresar tvariable prComo prNumero prConValor relacional tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCONOPERACION",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARARCONOPERACION ::= prIngresar tvariable prComo prNumero prConValor logico tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCONOPERACION",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARARCONOPERACION ::= prIngresar tvariable prComo prBoolean prConValor operaciones tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCONOPERACION",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARARCONOPERACION ::= prIngresar tvariable prComo prBoolean prConValor relacional tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCONOPERACION",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARARCONOPERACION ::= prIngresar tvariable prComo prBoolean prConValor logico tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCONOPERACION",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESIONARITMETICA ::= EXPRESIONARITMETICA EXPRESIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONARITMETICA",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESIONARITMETICA ::= EXPRESIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONARITMETICA",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESIONES ::= EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 System.out.println("=" + e + ";"); RESULT=e; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",43, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION tsuma EXPRESION 
            {
              Object RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= I + " + " + r ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION tresta EXPRESION 
            {
              Object RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= I + " - " + r ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION tmultiplicacion EXPRESION 
            {
              Object RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= I + " * " + r ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION tdivision EXPRESION 
            {
              Object RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= I + " / " + r ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION prMod EXPRESION 
            {
              Object RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT= I + "%" + r;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION prPotencia EXPRESION 
            {
              Object RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= I + "**" + r;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= tparA EXPRESION tparC 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 RESULT= "(" + e + ")"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= tcorA EXPRESION tcorC 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 RESULT= "[" + e + "]"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operaciones ::= operaciones tresta operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+signo+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",49, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operaciones ::= operaciones tsuma operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+signo+op1; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",49, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operaciones ::= operaciones tmultiplicacion operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+signo+op1; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",49, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operaciones ::= operaciones tdivision operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+signo+op1; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",49, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operaciones ::= operaciones prPotencia operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+signo+op1; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",49, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operaciones ::= operaciones prMod operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+signo+op1; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",49, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operaciones ::= tparA operaciones tparC 
            {
              Object RESULT =null;
		int parAleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String parA = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String parC = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=parA+op+parC; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",49, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operaciones ::= tcorA operaciones tcorC 
            {
              Object RESULT =null;
		int corAleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int corAright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String corA = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int corCleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int corCright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String corC = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=corA+op+corC; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",49, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operaciones ::= tvariable 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=b; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",49, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relacional ::= operaciones prMayor operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+">"+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",50, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relacional ::= operaciones prMenor operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+"<"+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",50, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relacional ::= operaciones prMayorIgual operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+">="+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",50, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relacional ::= operaciones prMenorIgual operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+"<="+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",50, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relacional ::= operaciones prEsIGUAL operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+"=="+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",50, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relacional ::= operaciones prEsDiferente operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+"!="+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",50, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // logico ::= operaciones prOR operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+"or"+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("logico",51, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // logico ::= operaciones prAND operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+"and"+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("logico",51, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // logico ::= operaciones prNOT operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+"not"+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("logico",51, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARARNUML ::= prIngresar LISTAVARIABLES prComo prNumero prConValor numero tpuntoycoma 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + num + "\n" ;
}
vars.clear(); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARNUML",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARARCADENA ::= prIngresar tvariable prComo prCadena prConValor tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCADENA",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARARCADENAL ::= prIngresar LISTAVARIABLES prComo prCadena prConValor tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + cad + "\n" ;
}
vars.clear(); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCADENAL",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARARBOOLEANO ::= prIngresar tvariable prComo prBoolean prConValor prVerdadero tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython +=  a + " = " + "True" + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARBOOLEANO",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARARBOOLEANO ::= prIngresar tvariable prComo prBoolean prConValor prFalso tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + "False" + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARBOOLEANO",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARARBOOLEANOL ::= prIngresar LISTAVARIABLES prComo prBoolean prConValor prVerdadero tpuntoycoma 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + v + "\n" ;
}
vars.clear(); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARBOOLEANOL",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARARBOOLEANOL ::= prIngresar LISTAVARIABLES prComo prBoolean prConValor prFalso tpuntoycoma 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + f + "\n" ;
}
vars.clear(); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARBOOLEANOL",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARARCARACTER ::= prIngresar tvariable prComo prCaracter prConValor tcaracter tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            codigoTraducidoPython += a + " = " + "'" +  s  + "'" + "\n";
            //System.out.println("Es un número");
        } else {
            codigoTraducidoPython += a + " = " + "'" + b  + "'" + "\n";
            //System.out.println("Es una letra");
        }

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCARACTER",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARARCARACTERL ::= prIngresar LISTAVARIABLES prComo prCaracter prConValor tcaracter tpuntoycoma 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
            codigoTraducidoPython += varia + " = " + "'" +  s  + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es un número");
        } else {
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
             codigoTraducidoPython += varia + " = " + "'" + b  + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es una letra");
        } 

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCARACTERL",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIGNACIONES ::= ASIGNARNUM 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNACIONES ::= ASIGNARNUML 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ASIGNACIONES ::= ASIGNARCADENA 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ASIGNACIONES ::= ASIGNARCADENAL 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ASIGNACIONES ::= ASIGNARBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ASIGNACIONES ::= ASIGNARBOOLEANOL 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIGNACIONES ::= ASIGNARCARACTER 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIGNACIONES ::= ASIGNARCARACTERL 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ASIGNARNUM ::= tvariable tflecha numero tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython +=  a + " = " + b + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARNUM",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ASIGNARNUML ::= LISTAVARIABLES tflecha numero tpuntoycoma 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + num + "\n" ;
}
vars.clear(); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARNUML",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASIGNARCADENA ::= tvariable tflecha tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARCADENA",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ASIGNARCADENAL ::= LISTAVARIABLES tflecha tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + cad + "\n" ;
}
vars.clear(); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARCADENAL",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIGNARBOOLEANO ::= tvariable tflecha prVerdadero tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + "True" + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARBOOLEANO",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIGNARBOOLEANO ::= tvariable tflecha prFalso tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + "False" + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARBOOLEANO",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ASIGNARBOOLEANOL ::= LISTAVARIABLES tflecha prVerdadero tpuntoycoma 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + v + "\n" ;
}
vars.clear(); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARBOOLEANOL",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ASIGNARBOOLEANOL ::= LISTAVARIABLES tflecha prFalso tpuntoycoma 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + f + "\n" ;
}
vars.clear(); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARBOOLEANOL",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ASIGNARCARACTER ::= tvariable tflecha tcaracter tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            codigoTraducidoPython += a + " = " + "'" +  s  + "'" + "\n";
            //System.out.println("Es un número");
        } else {
            codigoTraducidoPython += a + " = " + "'" + b  + "'" + "\n";
            //System.out.println("Es una letra");
        }

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARCARACTER",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ASIGNARCARACTERL ::= LISTAVARIABLES tflecha tcaracter tpuntoycoma 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
            codigoTraducidoPython += varia + " = " + "'" +  s  + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es un número");
        } else {
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
             codigoTraducidoPython += varia + " = " + "'" + b  + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es una letra");
        } 

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARCARACTERL",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IF ::= prSi CONDICIONIF prEntonces INSTRUCCIONES prFinSi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 codigoTraducidoPython += "if " + "(" + a + "):" + "\n" + in; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // IF ::= prSi CONDICIONIF prEntonces INSTRUCCIONES prDeloContrario INSTRUCCIONES prFinSi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int in2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int in2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 codigoTraducidoPython += "if " + "(" + a + "):" + "\n" + in + " else: " + "\n" + in2 +  "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IF ::= prSi CONDICIONIF prEntonces INSTRUCCIONES LISTAOSI prDeloContrario INSTRUCCIONES prFinSi 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int in2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int in2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 codigoTraducidoPython += "if " + "(" + a + "):" + "\n" + in + ls + in2 + " else: " + "\n" + in2 +  "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LISTAOSI ::= prOSi CONDICIONIF prEntonces INSTRUCCIONES LISTAOSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object lis = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= "else " +  a + in + lis  + "\n" ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAOSI",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LISTAOSI ::= prOSi CONDICIONIF prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= "else " + a +  in + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAOSI",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONDICIONIF ::= tvariable prEsIGUAL tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); b = b.replace("_", "");  RESULT= a + "==" + b; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONDICIONIF ::= tvariable prEsIGUAL numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "("+ a + "==" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONDICIONIF ::= tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); 
  RESULT = "("+ a + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONDICIONIF ::= tvariable prMayorIgual tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); b = b.replace("_", "");
  RESULT = "("+ a + ">=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONDICIONIF ::= tvariable prMenorIgual tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); b = b.replace("_", "");
  RESULT = "("+ a + "<=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONDICIONIF ::= tvariable prMayorIgual numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); 
  RESULT = "("+ a + ">=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONDICIONIF ::= tvariable prMenorIgual numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "("+ a + "<=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONDICIONIF ::= tvariable prMayor tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); b = b.replace("_", "");
  RESULT = "("+ a + ">" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONDICIONIF ::= tvariable prMenor tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); b = b.replace("_", "");
  RESULT = "("+ a + "<" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONDICIONIF ::= tvariable prMayor numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "("+ a + ">" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONDICIONIF ::= tvariable prMenor numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "("+ a + "<" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SEGUN ::= prSegun tvariable prHacer prFinSegun 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CICLO_FOR ::= prPara tvariable tflecha tvariable prHasta tvariable prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CICLO_FOR ::= prPara tvariable tflecha numero prHasta tvariable prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CICLO_FOR ::= prPara tvariable tflecha tvariable prHasta numero prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CICLO_FOR ::= prPara tvariable tflecha numero prHasta numero prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CICLO_FOR ::= prPara tvariable tflecha prHasta prHacer 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CICLO_WHILE ::= prMientras CONDICIONMIENTRAS prHacer INSTRUCCIONES prFinMientras 
            {
              Object RESULT =null;
		
//codigoTraducidoPython += "whileeee";

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_WHILE",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CICLO_WHILE ::= prMientras CONDICIONMIENTRAS prHacer prFinMientras 
            {
              Object RESULT =null;
		 //codigoTraducidoPython += "while" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_WHILE",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONDICIONMIENTRAS ::= tvariable prEsIGUAL tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); b = b.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "==" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONDICIONMIENTRAS ::= tvariable prEsIGUAL numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "==" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONDICIONMIENTRAS ::= tvariable prMayorIgual tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); b = b.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + ">=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONDICIONMIENTRAS ::= tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONDICIONMIENTRAS ::= tvariable prMenorIgual tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); b = b.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "<=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONDICIONMIENTRAS ::= tvariable prMayorIgual numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + ">=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONDICIONMIENTRAS ::= tvariable prMenorIgual numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "<=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONDICIONMIENTRAS ::= tvariable prMayor numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + ">" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONDICIONMIENTRAS ::= tvariable prMenor numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "<" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CICLO_DOWHILE ::= prRepetir INSTRUCCION prHastaQue CONDICIONMIENTRAS 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_DOWHILE",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CICLO_DOWHILE ::= prRepetir prHastaQue CONDICIONMIENTRAS 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_DOWHILE",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // RETORNO ::= prRetornar CONDICIONMIENTRAS 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // RETORNO ::= prRetornar numero 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // METODO ::= prMetodo tvariable INSTRUCCIONES prFinMetodo 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // METODO ::= prMetodo tvariable prConParametros tparA tparC LISTAPARAMETROS prFinMetodo 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LISTAPARAMETROS ::= tvariable tcoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",47, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EJECUTAR ::= prEjecutar tvariable tparA tparC tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		 
System.out.println("ejecutar" + a + "\n");

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // IMPRIMIR ::= prImprimir tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", ""); RESULT= "print" + "(" + a + ")" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IMPRIMIR ::= prImprimir tvariable tpuntoycoma 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		  b = b.replace("_", ""); RESULT= "print" + "(" +  b + ")" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IMPRIMIR ::= prImprimir tparA tvariable tparC tpuntoycoma 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		  c = c.replace("_", ""); RESULT= "print" + "(" +  c + ")" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // IMPRIMIR ::= prImprimir tparA tcadena tparC tpuntoycoma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		 RESULT= "print" + "(" +  d + ")" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // IMPRIMIRNL ::= prImprimirNl tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_",""); RESULT = "print" + "(" + a + ")" + "\n" ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRNL",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // IMPRIMIRNL ::= prImprimirNl tvariable tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		  a = a.replace("_", ""); RESULT = "print" + "(" + a + ")" + "\n" ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRNL",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // IMPRIMIRNL ::= prImprimirNl tparA tvariable tparC tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		  a = a.replace("_", ""); RESULT = "print" + "(" + a + ")" + "\n" ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRNL",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // IMPRIMIRNL ::= prImprimirNl tparA tcadena tparC tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		 RESULT = "print" + "(" + a + ")" + "\n" ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRNL",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
