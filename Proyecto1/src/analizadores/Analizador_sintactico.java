
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;
import java.io.IOException;
import java.io.PrintWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\224\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\032\004\000\002\032\002\000\002\033" +
    "\005\000\002\033\004\000\002\034\011\000\002\034\011" +
    "\000\002\046\004\000\002\046\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\050\003\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\003\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\056\005" +
    "\000\002\056\005\000\002\056\005\000\002\023\011\000" +
    "\002\024\011\000\002\025\011\000\002\026\011\000\002" +
    "\026\011\000\002\027\011\000\002\027\011\000\002\030" +
    "\011\000\002\031\011\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\036\006\000\002\037\006\000\002\040\006\000\002\041" +
    "\006\000\002\042\006\000\002\042\006\000\002\043\006" +
    "\000\002\043\006\000\002\044\006\000\002\045\006\000" +
    "\002\007\007\000\002\007\011\000\002\007\012\000\002" +
    "\010\007\000\002\010\006\000\002\035\005\000\002\035" +
    "\003\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\004\000\002\011\012\000\002\011\007\000\002" +
    "\051\010\000\002\051\007\000\002\012\013\000\002\012" +
    "\015\000\002\012\012\000\002\013\007\000\002\013\006" +
    "\000\002\052\005\000\002\052\005\000\002\052\003\000" +
    "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\052\004\000\002\014" +
    "\006\000\002\014\005\000\002\015\005\000\002\016\006" +
    "\000\002\016\012\000\002\053\004\000\002\053\004\000" +
    "\002\053\004\000\002\053\004\000\002\053\006\000\002" +
    "\053\006\000\002\053\006\000\002\053\006\000\002\017" +
    "\007\000\002\017\013\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\020\007\000" +
    "\002\020\010\000\002\021\005\000\002\021\005\000\002" +
    "\021\007\000\002\021\007\000\002\022\005\000\002\022" +
    "\005\000\002\022\007\000\002\022\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0144\000\004\031\004\001\002\000\040\003\037\005" +
    "\014\025\uffe6\042\007\045\044\063\045\066\063\072\051" +
    "\074\057\076\016\077\012\102\017\104\023\105\032\106" +
    "\035\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\006\005\u011d\043\uffe6\001\002\000\066\003" +
    "\uffb8\005\uffb8\025\uffb8\026\uffb8\042\uffb8\045\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\063\uffb8\065\uffb8\066\uffb8\070\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\101\uffb8" +
    "\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\001" +
    "\002\000\066\003\ufff2\005\ufff2\025\ufff2\026\ufff2\042\ufff2" +
    "\045\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\065\ufff2\066" +
    "\ufff2\070\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2" +
    "\077\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2\105\ufff2\106" +
    "\ufff2\107\ufff2\001\002\000\004\005\u0114\001\002\000\066" +
    "\003\ufff7\005\ufff7\025\ufff7\026\ufff7\042\ufff7\045\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\063\ufff7\065\ufff7\066\ufff7\070\ufff7" +
    "\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\101" +
    "\ufff7\102\ufff7\103\ufff7\104\ufff7\105\ufff7\106\ufff7\107\ufff7" +
    "\001\002\000\006\010\u0107\025\u0106\001\002\000\066\003" +
    "\ufff5\005\ufff5\025\ufff5\026\ufff5\042\ufff5\045\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\065\ufff5\066\ufff5\070\ufff5\072" +
    "\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\101\ufff5" +
    "\102\ufff5\103\ufff5\104\ufff5\105\ufff5\106\ufff5\107\ufff5\001" +
    "\002\000\012\004\074\005\072\020\070\022\076\001\002" +
    "\000\004\005\365\001\002\000\066\003\037\005\014\025" +
    "\uffe6\026\ufffe\042\007\045\044\060\ufffe\061\ufffe\062\ufffe" +
    "\063\045\065\ufffe\066\063\070\ufffe\072\051\073\ufffe\074" +
    "\057\075\ufffe\076\016\077\012\101\ufffe\102\017\103\ufffe" +
    "\104\023\105\032\106\035\107\ufffe\001\002\000\004\025" +
    "\351\001\002\000\066\003\ufff1\005\ufff1\025\ufff1\026\ufff1" +
    "\042\ufff1\045\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\065" +
    "\ufff1\066\ufff1\070\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1" +
    "\076\ufff1\077\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\105" +
    "\ufff1\106\ufff1\107\ufff1\001\002\000\004\005\327\001\002" +
    "\000\004\107\326\001\002\000\066\003\ufff9\005\ufff9\025" +
    "\ufff9\026\ufff9\042\ufff9\045\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\065\ufff9\066\ufff9\070\ufff9\072\ufff9\073\ufff9\074" +
    "\ufff9\075\ufff9\076\ufff9\077\ufff9\101\ufff9\102\ufff9\103\ufff9" +
    "\104\ufff9\105\ufff9\106\ufff9\107\ufff9\001\002\000\066\003" +
    "\uffe9\005\uffe9\025\uffe9\026\uffe9\042\uffe9\045\uffe9\060\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\065\uffe9\066\uffe9\070\uffe9\072" +
    "\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\101\uffe9" +
    "\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9\001" +
    "\002\000\066\003\uffbc\005\uffbc\025\uffbc\026\uffbc\042\uffbc" +
    "\045\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\065\uffbc\066" +
    "\uffbc\070\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc" +
    "\077\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106" +
    "\uffbc\107\uffbc\001\002\000\066\003\ufff4\005\ufff4\025\ufff4" +
    "\026\ufff4\042\ufff4\045\ufff4\060\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\065\ufff4\066\ufff4\070\ufff4\072\ufff4\073\ufff4\074\ufff4" +
    "\075\ufff4\076\ufff4\077\ufff4\101\ufff4\102\ufff4\103\ufff4\104" +
    "\ufff4\105\ufff4\106\ufff4\107\ufff4\001\002\000\066\003\uffea" +
    "\005\uffea\025\uffea\026\uffea\042\uffea\045\uffea\060\uffea\061" +
    "\uffea\062\uffea\063\uffea\065\uffea\066\uffea\070\uffea\072\uffea" +
    "\073\uffea\074\uffea\075\uffea\076\uffea\077\uffea\101\uffea\102" +
    "\uffea\103\uffea\104\uffea\105\uffea\106\uffea\107\uffea\001\002" +
    "\000\010\005\314\012\313\020\315\001\002\000\066\003" +
    "\uffe8\005\uffe8\025\uffe8\026\uffe8\042\uffe8\045\uffe8\060\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\065\uffe8\066\uffe8\070\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\101\uffe8" +
    "\102\uffe8\103\uffe8\104\uffe8\105\uffe8\106\uffe8\107\uffe8\001" +
    "\002\000\066\003\ufffb\005\ufffb\025\ufffb\026\ufffb\042\ufffb" +
    "\045\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\065\ufffb\066" +
    "\ufffb\070\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb" +
    "\077\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb\106" +
    "\ufffb\107\ufffb\001\002\000\010\005\301\012\300\020\302" +
    "\001\002\000\066\003\ufff6\005\ufff6\025\ufff6\026\ufff6\042" +
    "\ufff6\045\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\065\ufff6" +
    "\066\ufff6\070\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076" +
    "\ufff6\077\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6\105\ufff6" +
    "\106\ufff6\107\ufff6\001\002\000\066\003\ufff0\005\ufff0\025" +
    "\ufff0\026\ufff0\042\ufff0\045\ufff0\060\ufff0\061\ufff0\062\ufff0" +
    "\063\ufff0\065\ufff0\066\ufff0\070\ufff0\072\ufff0\073\ufff0\074" +
    "\ufff0\075\ufff0\076\ufff0\077\ufff0\101\ufff0\102\ufff0\103\ufff0" +
    "\104\ufff0\105\ufff0\106\ufff0\107\ufff0\001\002\000\066\003" +
    "\uffed\005\uffed\025\uffed\026\uffed\042\uffed\045\uffed\060\uffed" +
    "\061\uffed\062\uffed\063\uffed\065\uffed\066\uffed\070\uffed\072" +
    "\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077\uffed\101\uffed" +
    "\102\uffed\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed\001" +
    "\002\000\066\003\uffb6\005\uffb6\025\uffb6\026\uffb6\042\uffb6" +
    "\045\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\065\uffb6\066" +
    "\uffb6\070\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6" +
    "\077\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106" +
    "\uffb6\107\uffb6\001\002\000\066\003\ufffc\005\ufffc\025\ufffc" +
    "\026\ufffc\042\ufffc\045\ufffc\060\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\065\ufffc\066\ufffc\070\ufffc\072\ufffc\073\ufffc\074\ufffc" +
    "\075\ufffc\076\ufffc\077\ufffc\101\ufffc\102\ufffc\103\ufffc\104" +
    "\ufffc\105\ufffc\106\ufffc\107\ufffc\001\002\000\066\003\uffb7" +
    "\005\uffb7\025\uffb7\026\uffb7\042\uffb7\045\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\065\uffb7\066\uffb7\070\uffb7\072\uffb7" +
    "\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\101\uffb7\102" +
    "\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\001\002" +
    "\000\006\005\237\056\240\001\002\000\012\004\074\005" +
    "\072\020\070\022\076\001\002\000\066\003\uffb9\005\uffb9" +
    "\025\uffb9\026\uffb9\042\uffb9\045\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\065\uffb9\066\uffb9\070\uffb9\072\uffb9\073\uffb9" +
    "\074\uffb9\075\uffb9\076\uffb9\077\uffb9\101\uffb9\102\uffb9\103" +
    "\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\001\002\000\066" +
    "\003\uffb5\005\uffb5\025\uffb5\026\uffb5\042\uffb5\045\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\065\uffb5\066\uffb5\070\uffb5" +
    "\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\101" +
    "\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5" +
    "\001\002\000\066\003\uffee\005\uffee\025\uffee\026\uffee\042" +
    "\uffee\045\uffee\060\uffee\061\uffee\062\uffee\063\uffee\065\uffee" +
    "\066\uffee\070\uffee\072\uffee\073\uffee\074\uffee\075\uffee\076" +
    "\uffee\077\uffee\101\uffee\102\uffee\103\uffee\104\uffee\105\uffee" +
    "\106\uffee\107\uffee\001\002\000\006\005\170\056\172\001" +
    "\002\000\066\003\uffec\005\uffec\025\uffec\026\uffec\042\uffec" +
    "\045\uffec\060\uffec\061\uffec\062\uffec\063\uffec\065\uffec\066" +
    "\uffec\070\uffec\072\uffec\073\uffec\074\uffec\075\uffec\076\uffec" +
    "\077\uffec\101\uffec\102\uffec\103\uffec\104\uffec\105\uffec\106" +
    "\uffec\107\uffec\001\002\000\066\003\ufffd\005\ufffd\025\ufffd" +
    "\026\ufffd\042\ufffd\045\ufffd\060\ufffd\061\ufffd\062\ufffd\063" +
    "\ufffd\065\ufffd\066\ufffd\070\ufffd\072\ufffd\073\ufffd\074\ufffd" +
    "\075\ufffd\076\ufffd\077\ufffd\101\ufffd\102\ufffd\103\ufffd\104" +
    "\ufffd\105\ufffd\106\ufffd\107\ufffd\001\002\000\066\003\uffeb" +
    "\005\uffeb\025\uffeb\026\uffeb\042\uffeb\045\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\065\uffeb\066\uffeb\070\uffeb\072\uffeb" +
    "\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\101\uffeb\102" +
    "\uffeb\103\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb\001\002" +
    "\000\066\003\ufffa\005\ufffa\025\ufffa\026\ufffa\042\ufffa\045" +
    "\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\065\ufffa\066\ufffa" +
    "\070\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077" +
    "\ufffa\101\ufffa\102\ufffa\103\ufffa\104\ufffa\105\ufffa\106\ufffa" +
    "\107\ufffa\001\002\000\066\003\uffbb\005\uffbb\025\uffbb\026" +
    "\uffbb\042\uffbb\045\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb" +
    "\065\uffbb\066\uffbb\070\uffbb\072\uffbb\073\uffbb\074\uffbb\075" +
    "\uffbb\076\uffbb\077\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb" +
    "\105\uffbb\106\uffbb\107\uffbb\001\002\000\042\003\037\005" +
    "\014\025\uffe6\042\007\045\044\063\045\066\063\072\051" +
    "\074\057\075\167\076\016\077\012\102\017\104\023\105" +
    "\032\106\035\001\002\000\066\003\uffef\005\uffef\025\uffef" +
    "\026\uffef\042\uffef\045\uffef\060\uffef\061\uffef\062\uffef\063" +
    "\uffef\065\uffef\066\uffef\070\uffef\072\uffef\073\uffef\074\uffef" +
    "\075\uffef\076\uffef\077\uffef\101\uffef\102\uffef\103\uffef\104" +
    "\uffef\105\uffef\106\uffef\107\uffef\001\002\000\066\003\ufff8" +
    "\005\ufff8\025\ufff8\026\ufff8\042\ufff8\045\ufff8\060\ufff8\061" +
    "\ufff8\062\ufff8\063\ufff8\065\ufff8\066\ufff8\070\ufff8\072\ufff8" +
    "\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\101\ufff8\102" +
    "\ufff8\103\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\001\002" +
    "\000\066\003\ufff3\005\ufff3\025\ufff3\026\ufff3\042\ufff3\045" +
    "\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\065\ufff3\066\ufff3" +
    "\070\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077" +
    "\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3\105\ufff3\106\ufff3" +
    "\107\ufff3\001\002\000\004\005\065\001\002\000\066\003" +
    "\uffba\005\uffba\025\uffba\026\uffba\042\uffba\045\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\065\uffba\066\uffba\070\uffba\072" +
    "\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba\101\uffba" +
    "\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107\uffba\001" +
    "\002\000\004\025\066\001\002\000\012\004\074\005\072" +
    "\020\070\022\076\001\002\000\110\003\uffdd\004\uffdd\005" +
    "\uffdd\011\uffdd\020\uffdd\022\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\042\uffdd\045\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd" +
    "\072\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\101" +
    "\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd\107\uffdd" +
    "\001\002\000\012\004\074\005\072\020\070\022\076\001" +
    "\002\000\110\003\uffe0\004\uffe0\005\uffe0\011\uffe0\020\uffe0" +
    "\022\uffe0\025\uffe0\026\uffe0\027\uffe0\042\uffe0\045\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074" +
    "\uffe0\075\uffe0\076\uffe0\077\uffe0\101\uffe0\102\uffe0\103\uffe0" +
    "\104\uffe0\105\uffe0\106\uffe0\107\uffe0\001\002\000\152\003" +
    "\uffcf\004\uffcf\005\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\040\uffcf\041\uffcf\042\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf" +
    "\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072" +
    "\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\101\uffcf" +
    "\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\001" +
    "\002\000\014\004\074\005\072\020\070\022\076\067\145" +
    "\001\002\000\152\003\uffdc\004\uffdc\005\uffdc\011\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\025\uffdc\026\uffdc\027\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc" +
    "\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076" +
    "\uffdc\077\uffdc\101\uffdc\102\uffdc\103\uffdc\104\uffdc\105\uffdc" +
    "\106\uffdc\107\uffdc\001\002\000\110\003\uffde\004\uffde\005" +
    "\uffde\011\uffde\020\uffde\022\uffde\025\uffde\026\uffde\027\uffde" +
    "\042\uffde\045\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063" +
    "\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071\uffde" +
    "\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde\101" +
    "\uffde\102\uffde\103\uffde\104\uffde\105\uffde\106\uffde\107\uffde" +
    "\001\002\000\012\004\074\005\072\020\070\022\076\001" +
    "\002\000\146\003\uffdf\004\uffdf\005\uffdf\011\uffdf\013\101" +
    "\014\114\015\113\016\112\020\uffdf\022\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\040\100\041\103\042\uffdf\045\uffdf\046\105" +
    "\047\116\050\102\051\115\052\107\053\106\054\110\055" +
    "\111\056\104\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072" +
    "\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\101\uffdf" +
    "\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107\uffdf\001" +
    "\002\000\012\004\074\005\072\020\070\022\076\001\002" +
    "\000\012\004\074\005\072\020\070\022\076\001\002\000" +
    "\012\004\074\005\072\020\070\022\076\001\002\000\012" +
    "\004\074\005\072\020\070\022\076\001\002\000\012\004" +
    "\074\005\072\020\070\022\076\001\002\000\012\004\074" +
    "\005\072\020\070\022\076\001\002\000\012\004\074\005" +
    "\072\020\070\022\076\001\002\000\012\004\074\005\072" +
    "\020\070\022\076\001\002\000\012\004\074\005\072\020" +
    "\070\022\076\001\002\000\012\004\074\005\072\020\070" +
    "\022\076\001\002\000\012\004\074\005\072\020\070\022" +
    "\076\001\002\000\012\004\074\005\072\020\070\022\076" +
    "\001\002\000\012\004\074\005\072\020\070\022\076\001" +
    "\002\000\012\004\074\005\072\020\070\022\076\001\002" +
    "\000\012\004\074\005\072\020\070\022\076\001\002\000" +
    "\130\003\uffcd\004\uffcd\005\uffcd\011\uffcd\013\101\014\114" +
    "\015\113\016\112\020\uffcd\021\uffcd\022\uffcd\023\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\040\100\041\103\042\uffcd\045\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065" +
    "\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd" +
    "\074\uffcd\075\uffcd\076\uffcd\077\uffcd\101\uffcd\102\uffcd\103" +
    "\uffcd\104\uffcd\105\uffcd\106\uffcd\107\uffcd\001\002\000\130" +
    "\003\uffcb\004\uffcb\005\uffcb\011\uffcb\013\101\014\114\015" +
    "\113\016\112\020\uffcb\021\uffcb\022\uffcb\023\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\040\100\041\103\042\uffcb\045\uffcb\057" +
    "\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb" +
    "\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074" +
    "\uffcb\075\uffcb\076\uffcb\077\uffcb\101\uffcb\102\uffcb\103\uffcb" +
    "\104\uffcb\105\uffcb\106\uffcb\107\uffcb\001\002\000\152\003" +
    "\uffda\004\uffda\005\uffda\011\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\020\uffda\021\uffda\022\uffda\023\uffda\025\uffda\026" +
    "\uffda\027\uffda\040\uffda\041\uffda\042\uffda\045\uffda\046\uffda" +
    "\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055" +
    "\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda" +
    "\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072" +
    "\uffda\073\uffda\074\uffda\075\uffda\076\uffda\077\uffda\101\uffda" +
    "\102\uffda\103\uffda\104\uffda\105\uffda\106\uffda\107\uffda\001" +
    "\002\000\152\003\uffd9\004\uffd9\005\uffd9\011\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070" +
    "\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9" +
    "\077\uffd9\101\uffd9\102\uffd9\103\uffd9\104\uffd9\105\uffd9\106" +
    "\uffd9\107\uffd9\001\002\000\152\003\uffd8\004\uffd8\005\uffd8" +
    "\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\025\uffd8\026\uffd8\027\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8" +
    "\075\uffd8\076\uffd8\077\uffd8\101\uffd8\102\uffd8\103\uffd8\104" +
    "\uffd8\105\uffd8\106\uffd8\107\uffd8\001\002\000\130\003\uffc7" +
    "\004\uffc7\005\uffc7\011\uffc7\013\101\014\114\015\113\016" +
    "\112\020\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\040\100\041\103\042\uffc7\045\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7" +
    "\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075" +
    "\uffc7\076\uffc7\077\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7" +
    "\105\uffc7\106\uffc7\107\uffc7\001\002\000\130\003\uffc8\004" +
    "\uffc8\005\uffc8\011\uffc8\013\101\014\114\015\113\016\112" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\040\100\041\103\042\uffc8\045\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067" +
    "\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8" +
    "\076\uffc8\077\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105" +
    "\uffc8\106\uffc8\107\uffc8\001\002\000\130\003\uffca\004\uffca" +
    "\005\uffca\011\uffca\013\101\014\114\015\113\016\112\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\025\uffca\026\uffca\027\uffca" +
    "\040\100\041\103\042\uffca\045\uffca\057\uffca\060\uffca\061" +
    "\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca" +
    "\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076" +
    "\uffca\077\uffca\101\uffca\102\uffca\103\uffca\104\uffca\105\uffca" +
    "\106\uffca\107\uffca\001\002\000\130\003\uffc9\004\uffc9\005" +
    "\uffc9\011\uffc9\013\101\014\114\015\113\016\112\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\025\uffc9\026\uffc9\027\uffc9\040" +
    "\100\041\103\042\uffc9\045\uffc9\057\uffc9\060\uffc9\061\uffc9" +
    "\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070" +
    "\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9" +
    "\077\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105\uffc9\106" +
    "\uffc9\107\uffc9\001\002\000\130\003\uffce\004\uffce\005\uffce" +
    "\011\uffce\013\101\014\114\015\113\016\112\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\025\uffce\026\uffce\027\uffce\040\100" +
    "\041\103\042\uffce\045\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce" +
    "\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077" +
    "\uffce\101\uffce\102\uffce\103\uffce\104\uffce\105\uffce\106\uffce" +
    "\107\uffce\001\002\000\130\003\uffc6\004\uffc6\005\uffc6\011" +
    "\uffc6\013\101\014\114\015\113\016\112\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\025\uffc6\026\uffc6\027\uffc6\040\100\041" +
    "\103\042\uffc6\045\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071" +
    "\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6" +
    "\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107" +
    "\uffc6\001\002\000\152\003\uffd7\004\uffd7\005\uffd7\011\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\025\uffd7\026\uffd7\027\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067" +
    "\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7" +
    "\076\uffd7\077\uffd7\101\uffd7\102\uffd7\103\uffd7\104\uffd7\105" +
    "\uffd7\106\uffd7\107\uffd7\001\002\000\130\003\uffcc\004\uffcc" +
    "\005\uffcc\011\uffcc\013\101\014\114\015\113\016\112\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\040\100\041\103\042\uffcc\045\uffcc\057\uffcc\060\uffcc\061" +
    "\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc" +
    "\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076" +
    "\uffcc\077\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc\105\uffcc" +
    "\106\uffcc\107\uffcc\001\002\000\152\003\uffdb\004\uffdb\005" +
    "\uffdb\011\uffdb\013\uffdb\014\114\015\113\016\112\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb\040" +
    "\100\041\103\042\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074" +
    "\uffdb\075\uffdb\076\uffdb\077\uffdb\101\uffdb\102\uffdb\103\uffdb" +
    "\104\uffdb\105\uffdb\106\uffdb\107\uffdb\001\002\000\152\003" +
    "\uffd6\004\uffd6\005\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\040\uffd6\041\uffd6\042\uffd6\045\uffd6\046\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072" +
    "\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\101\uffd6" +
    "\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\001" +
    "\002\000\004\023\143\001\002\000\004\023\142\001\002" +
    "\000\042\013\101\014\114\015\113\016\112\023\141\040" +
    "\100\041\103\046\105\047\116\050\102\051\115\052\107" +
    "\053\106\054\110\055\111\056\104\001\002\000\152\003" +
    "\uffd4\004\uffd4\005\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\040\uffd4\041\uffd4\042\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4" +
    "\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072" +
    "\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\101\uffd4" +
    "\102\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4\107\uffd4\001" +
    "\002\000\152\003\uffd2\004\uffd2\005\uffd2\011\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070" +
    "\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2" +
    "\077\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\106" +
    "\uffd2\107\uffd2\001\002\000\152\003\uffd0\004\uffd0\005\uffd0" +
    "\011\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\025\uffd0\026\uffd0\027\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066" +
    "\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0" +
    "\075\uffd0\076\uffd0\077\uffd0\101\uffd0\102\uffd0\103\uffd0\104" +
    "\uffd0\105\uffd0\106\uffd0\107\uffd0\001\002\000\110\003\uffe1" +
    "\004\uffe1\005\uffe1\011\uffe1\020\uffe1\022\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\042\uffe1\045\uffe1\057\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070" +
    "\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1" +
    "\077\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1\106" +
    "\uffe1\107\uffe1\001\002\000\012\004\074\005\072\020\070" +
    "\022\076\001\002\000\016\004\074\005\072\020\070\022" +
    "\076\064\150\071\147\001\002\000\012\004\074\005\072" +
    "\020\070\022\076\001\002\000\042\003\037\005\014\025" +
    "\uffe6\042\007\045\044\063\045\066\063\070\152\072\051" +
    "\074\057\076\016\077\012\102\017\104\023\105\032\106" +
    "\035\001\002\000\004\070\153\001\002\000\066\003\uff96" +
    "\005\uff96\025\uff96\026\uff96\042\uff96\045\uff96\060\uff96\061" +
    "\uff96\062\uff96\063\uff96\065\uff96\066\uff96\070\uff96\072\uff96" +
    "\073\uff96\074\uff96\075\uff96\076\uff96\077\uff96\101\uff96\102" +
    "\uff96\103\uff96\104\uff96\105\uff96\106\uff96\107\uff96\001\002" +
    "\000\066\003\uff98\005\uff98\025\uff98\026\uff98\042\uff98\045" +
    "\uff98\060\uff98\061\uff98\062\uff98\063\uff98\065\uff98\066\uff98" +
    "\070\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98\077" +
    "\uff98\101\uff98\102\uff98\103\uff98\104\uff98\105\uff98\106\uff98" +
    "\107\uff98\001\002\000\014\004\074\005\072\020\070\022" +
    "\076\064\155\001\002\000\040\003\037\005\014\025\uffe6" +
    "\042\007\045\044\063\045\066\063\072\051\074\057\076" +
    "\016\077\012\102\017\104\023\105\032\106\035\001\002" +
    "\000\004\070\157\001\002\000\066\003\uff97\005\uff97\025" +
    "\uff97\026\uff97\042\uff97\045\uff97\060\uff97\061\uff97\062\uff97" +
    "\063\uff97\065\uff97\066\uff97\070\uff97\072\uff97\073\uff97\074" +
    "\uff97\075\uff97\076\uff97\077\uff97\101\uff97\102\uff97\103\uff97" +
    "\104\uff97\105\uff97\106\uff97\107\uff97\001\002\000\004\021" +
    "\165\001\002\000\004\021\164\001\002\000\042\013\101" +
    "\014\114\015\113\016\112\021\163\040\100\041\103\046" +
    "\105\047\116\050\102\051\115\052\107\053\106\054\110" +
    "\055\111\056\104\001\002\000\152\003\uffd5\004\uffd5\005" +
    "\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\025\uffd5\026\uffd5\027\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5" +
    "\066\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074" +
    "\uffd5\075\uffd5\076\uffd5\077\uffd5\101\uffd5\102\uffd5\103\uffd5" +
    "\104\uffd5\105\uffd5\106\uffd5\107\uffd5\001\002\000\152\003" +
    "\uffd3\004\uffd3\005\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\040\uffd3\041\uffd3\042\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072" +
    "\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\101\uffd3" +
    "\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\001" +
    "\002\000\152\003\uffd1\004\uffd1\005\uffd1\011\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1" +
    "\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070" +
    "\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1" +
    "\077\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106" +
    "\uffd1\107\uffd1\001\002\000\004\075\212\001\002\000\006" +
    "\005\170\056\172\001\002\000\106\003\uff91\005\uff91\025" +
    "\uff91\026\uff91\042\uff91\045\uff91\046\202\047\200\050\176" +
    "\051\175\052\174\054\201\055\177\060\uff91\061\uff91\062" +
    "\uff91\063\uff91\064\uff91\065\uff91\066\uff91\070\uff91\072\uff91" +
    "\073\uff91\074\uff91\075\uff91\076\uff91\077\uff91\101\uff91\102" +
    "\uff91\103\uff91\104\uff91\105\uff91\106\uff91\107\uff91\001\002" +
    "\000\066\003\uff89\005\uff89\025\uff89\026\uff89\042\uff89\045" +
    "\uff89\060\uff89\061\uff89\062\uff89\063\uff89\065\uff89\066\uff89" +
    "\070\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077" +
    "\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105\uff89\106\uff89" +
    "\107\uff89\001\002\000\012\004\074\005\072\020\070\022" +
    "\076\001\002\000\076\003\uff8b\004\074\005\uff8b\020\070" +
    "\022\076\025\uff8b\026\uff8b\042\uff8b\045\uff8b\060\uff8b\061" +
    "\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\070\uff8b" +
    "\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\101" +
    "\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b\107\uff8b" +
    "\001\002\000\012\004\074\005\072\020\070\022\076\001" +
    "\002\000\012\004\074\005\072\020\070\022\076\001\002" +
    "\000\012\004\074\005\072\020\070\022\076\001\002\000" +
    "\004\004\206\001\002\000\012\004\074\005\072\020\070" +
    "\022\076\001\002\000\004\004\204\001\002\000\012\004" +
    "\074\005\072\020\070\022\076\001\002\000\076\003\uff8f" +
    "\004\074\005\uff8f\020\070\022\076\025\uff8f\026\uff8f\042" +
    "\uff8f\045\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f" +
    "\065\uff8f\066\uff8f\070\uff8f\072\uff8f\073\uff8f\074\uff8f\075" +
    "\uff8f\076\uff8f\077\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f" +
    "\105\uff8f\106\uff8f\107\uff8f\001\002\000\070\003\uff8d\005" +
    "\uff8d\025\uff8d\026\uff8d\042\uff8d\045\uff8d\060\uff8d\061\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\070\uff8d\072" +
    "\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d\101\uff8d" +
    "\102\uff8d\103\uff8d\104\uff8d\105\uff8d\106\uff8d\107\uff8d\001" +
    "\002\000\076\003\uff8e\004\074\005\uff8e\020\070\022\076" +
    "\025\uff8e\026\uff8e\042\uff8e\045\uff8e\060\uff8e\061\uff8e\062" +
    "\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\070\uff8e\072\uff8e" +
    "\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\101\uff8e\102" +
    "\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e\107\uff8e\001\002" +
    "\000\070\003\uff8c\005\uff8c\025\uff8c\026\uff8c\042\uff8c\045" +
    "\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c" +
    "\066\uff8c\070\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076" +
    "\uff8c\077\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c" +
    "\106\uff8c\107\uff8c\001\002\000\076\003\uff92\004\074\005" +
    "\uff92\020\070\022\076\025\uff92\026\uff92\042\uff92\045\uff92" +
    "\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066" +
    "\uff92\070\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076\uff92" +
    "\077\uff92\101\uff92\102\uff92\103\uff92\104\uff92\105\uff92\106" +
    "\uff92\107\uff92\001\002\000\076\003\uff90\004\074\005\uff90" +
    "\020\070\022\076\025\uff90\026\uff90\042\uff90\045\uff90\060" +
    "\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90" +
    "\070\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077" +
    "\uff90\101\uff90\102\uff90\103\uff90\104\uff90\105\uff90\106\uff90" +
    "\107\uff90\001\002\000\076\003\uff93\004\074\005\uff93\020" +
    "\070\022\076\025\uff93\026\uff93\042\uff93\045\uff93\060\uff93" +
    "\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93\070" +
    "\uff93\072\uff93\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93" +
    "\101\uff93\102\uff93\103\uff93\104\uff93\105\uff93\106\uff93\107" +
    "\uff93\001\002\000\006\005\170\056\172\001\002\000\066" +
    "\003\uff8a\005\uff8a\025\uff8a\026\uff8a\042\uff8a\045\uff8a\060" +
    "\uff8a\061\uff8a\062\uff8a\063\uff8a\065\uff8a\066\uff8a\070\uff8a" +
    "\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a\101" +
    "\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106\uff8a\107\uff8a" +
    "\001\002\000\004\064\215\001\002\000\042\003\037\005" +
    "\014\025\uffe6\042\007\045\044\063\045\066\063\072\051" +
    "\073\216\074\057\076\016\077\012\102\017\104\023\105" +
    "\032\106\035\001\002\000\066\003\uff94\005\uff94\025\uff94" +
    "\026\uff94\042\uff94\045\uff94\060\uff94\061\uff94\062\uff94\063" +
    "\uff94\065\uff94\066\uff94\070\uff94\072\uff94\073\uff94\074\uff94" +
    "\075\uff94\076\uff94\077\uff94\101\uff94\102\uff94\103\uff94\104" +
    "\uff94\105\uff94\106\uff94\107\uff94\001\002\000\004\073\220" +
    "\001\002\000\066\003\uff95\005\uff95\025\uff95\026\uff95\042" +
    "\uff95\045\uff95\060\uff95\061\uff95\062\uff95\063\uff95\065\uff95" +
    "\066\uff95\070\uff95\072\uff95\073\uff95\074\uff95\075\uff95\076" +
    "\uff95\077\uff95\101\uff95\102\uff95\103\uff95\104\uff95\105\uff95" +
    "\106\uff95\107\uff95\001\002\000\014\004\074\005\072\020" +
    "\070\022\076\064\222\001\002\000\004\026\223\001\002" +
    "\000\012\004\074\005\072\020\070\022\076\001\002\000" +
    "\006\062\226\065\225\001\002\000\066\003\uff9b\005\uff9b" +
    "\025\uff9b\026\uff9b\042\uff9b\045\uff9b\060\uff9b\061\uff9b\062" +
    "\uff9b\063\uff9b\065\uff9b\066\uff9b\070\uff9b\072\uff9b\073\uff9b" +
    "\074\uff9b\075\uff9b\076\uff9b\077\uff9b\101\uff9b\102\uff9b\103" +
    "\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\001\002\000\004" +
    "\057\227\001\002\000\040\003\037\005\014\025\uffe6\042" +
    "\007\045\044\063\045\066\063\072\051\074\057\076\016" +
    "\077\012\102\017\104\023\105\032\106\035\001\002\000" +
    "\004\065\231\001\002\000\066\003\uff9c\005\uff9c\025\uff9c" +
    "\026\uff9c\042\uff9c\045\uff9c\060\uff9c\061\uff9c\062\uff9c\063" +
    "\uff9c\065\uff9c\066\uff9c\070\uff9c\072\uff9c\073\uff9c\074\uff9c" +
    "\075\uff9c\076\uff9c\077\uff9c\101\uff9c\102\uff9c\103\uff9c\104" +
    "\uff9c\105\uff9c\106\uff9c\107\uff9c\001\002\000\014\004\074" +
    "\005\072\020\070\022\076\027\233\001\002\000\004\057" +
    "\234\001\002\000\040\003\037\005\014\025\uffe6\042\007" +
    "\045\044\063\045\066\063\072\051\074\057\076\016\077" +
    "\012\102\017\104\023\105\032\106\035\001\002\000\010" +
    "\026\223\062\uff99\065\uff99\001\002\000\006\062\uff9a\065" +
    "\uff9a\001\002\000\022\046\267\047\266\050\264\051\265" +
    "\052\262\054\270\055\263\057\uffa4\001\002\000\012\004" +
    "\074\005\072\020\070\022\076\001\002\000\004\057\242" +
    "\001\002\000\040\003\037\005\014\025\uffe6\042\007\045" +
    "\044\063\045\066\063\072\051\074\057\076\016\077\012" +
    "\102\017\104\023\105\032\106\035\001\002\000\010\060" +
    "\245\061\246\062\247\001\002\000\004\062\256\001\002" +
    "\000\066\003\uffaa\005\uffaa\025\uffaa\026\uffaa\042\uffaa\045" +
    "\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\065\uffaa\066\uffaa" +
    "\070\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077" +
    "\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa" +
    "\107\uffaa\001\002\000\006\005\237\056\240\001\002\000" +
    "\040\003\037\005\014\025\uffe6\042\007\045\044\063\045" +
    "\066\063\072\051\074\057\076\016\077\012\102\017\104" +
    "\023\105\032\106\035\001\002\000\004\060\251\001\002" +
    "\000\066\003\uffa9\005\uffa9\025\uffa9\026\uffa9\042\uffa9\045" +
    "\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\065\uffa9\066\uffa9" +
    "\070\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077" +
    "\uffa9\101\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9" +
    "\107\uffa9\001\002\000\004\057\253\001\002\000\040\003" +
    "\037\005\014\025\uffe6\042\007\045\044\063\045\066\063" +
    "\072\051\074\057\076\016\077\012\102\017\104\023\105" +
    "\032\106\035\001\002\000\006\061\246\062\uffa6\001\002" +
    "\000\004\062\uffa7\001\002\000\040\003\037\005\014\025" +
    "\uffe6\042\007\045\044\063\045\066\063\072\051\074\057" +
    "\076\016\077\012\102\017\104\023\105\032\106\035\001" +
    "\002\000\004\060\260\001\002\000\066\003\uffa8\005\uffa8" +
    "\025\uffa8\026\uffa8\042\uffa8\045\uffa8\060\uffa8\061\uffa8\062" +
    "\uffa8\063\uffa8\065\uffa8\066\uffa8\070\uffa8\072\uffa8\073\uffa8" +
    "\074\uffa8\075\uffa8\076\uffa8\077\uffa8\101\uffa8\102\uffa8\103" +
    "\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\001\002\000\014" +
    "\004\074\005\072\020\070\022\076\057\uff9d\001\002\000" +
    "\012\004\074\005\072\020\070\022\076\001\002\000\012" +
    "\004\074\005\072\020\070\022\076\001\002\000\012\004" +
    "\074\005\072\020\070\022\076\001\002\000\012\004\074" +
    "\005\072\020\070\022\076\001\002\000\012\004\074\005" +
    "\072\020\070\022\076\001\002\000\012\004\074\005\072" +
    "\020\070\022\076\001\002\000\012\004\074\005\072\020" +
    "\070\022\076\001\002\000\014\004\074\005\072\020\070" +
    "\022\076\057\uff9f\001\002\000\014\004\074\005\072\020" +
    "\070\022\076\057\uffa1\001\002\000\014\004\074\005\072" +
    "\020\070\022\076\057\uffa0\001\002\000\014\004\074\005" +
    "\072\020\070\022\076\057\uffa2\001\002\000\014\004\074" +
    "\005\072\020\070\022\076\057\uffa3\001\002\000\014\004" +
    "\074\005\072\020\070\022\076\057\uff9e\001\002\000\014" +
    "\004\074\005\072\020\070\022\076\057\uffa5\001\002\000" +
    "\004\011\312\001\002\000\004\011\311\001\002\000\006" +
    "\005\303\012\304\001\002\000\004\021\307\001\002\000" +
    "\004\021\305\001\002\000\004\011\306\001\002\000\066" +
    "\003\uff6e\005\uff6e\025\uff6e\026\uff6e\042\uff6e\045\uff6e\060" +
    "\uff6e\061\uff6e\062\uff6e\063\uff6e\065\uff6e\066\uff6e\070\uff6e" +
    "\072\uff6e\073\uff6e\074\uff6e\075\uff6e\076\uff6e\077\uff6e\101" +
    "\uff6e\102\uff6e\103\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e" +
    "\001\002\000\004\011\310\001\002\000\066\003\uff6f\005" +
    "\uff6f\025\uff6f\026\uff6f\042\uff6f\045\uff6f\060\uff6f\061\uff6f" +
    "\062\uff6f\063\uff6f\065\uff6f\066\uff6f\070\uff6f\072\uff6f\073" +
    "\uff6f\074\uff6f\075\uff6f\076\uff6f\077\uff6f\101\uff6f\102\uff6f" +
    "\103\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f\001\002\000" +
    "\066\003\uff70\005\uff70\025\uff70\026\uff70\042\uff70\045\uff70" +
    "\060\uff70\061\uff70\062\uff70\063\uff70\065\uff70\066\uff70\070" +
    "\uff70\072\uff70\073\uff70\074\uff70\075\uff70\076\uff70\077\uff70" +
    "\101\uff70\102\uff70\103\uff70\104\uff70\105\uff70\106\uff70\107" +
    "\uff70\001\002\000\066\003\uff71\005\uff71\025\uff71\026\uff71" +
    "\042\uff71\045\uff71\060\uff71\061\uff71\062\uff71\063\uff71\065" +
    "\uff71\066\uff71\070\uff71\072\uff71\073\uff71\074\uff71\075\uff71" +
    "\076\uff71\077\uff71\101\uff71\102\uff71\103\uff71\104\uff71\105" +
    "\uff71\106\uff71\107\uff71\001\002\000\004\011\325\001\002" +
    "\000\004\011\324\001\002\000\006\005\317\012\316\001" +
    "\002\000\004\021\322\001\002\000\004\021\320\001\002" +
    "\000\004\011\321\001\002\000\066\003\uff73\005\uff73\025" +
    "\uff73\026\uff73\042\uff73\045\uff73\060\uff73\061\uff73\062\uff73" +
    "\063\uff73\065\uff73\066\uff73\070\uff73\072\uff73\073\uff73\074" +
    "\uff73\075\uff73\076\uff73\077\uff73\101\uff73\102\uff73\103\uff73" +
    "\104\uff73\105\uff73\106\uff73\107\uff73\001\002\000\004\011" +
    "\323\001\002\000\066\003\uff72\005\uff72\025\uff72\026\uff72" +
    "\042\uff72\045\uff72\060\uff72\061\uff72\062\uff72\063\uff72\065" +
    "\uff72\066\uff72\070\uff72\072\uff72\073\uff72\074\uff72\075\uff72" +
    "\076\uff72\077\uff72\101\uff72\102\uff72\103\uff72\104\uff72\105" +
    "\uff72\106\uff72\107\uff72\001\002\000\066\003\uff74\005\uff74" +
    "\025\uff74\026\uff74\042\uff74\045\uff74\060\uff74\061\uff74\062" +
    "\uff74\063\uff74\065\uff74\066\uff74\070\uff74\072\uff74\073\uff74" +
    "\074\uff74\075\uff74\076\uff74\077\uff74\101\uff74\102\uff74\103" +
    "\uff74\104\uff74\105\uff74\106\uff74\107\uff74\001\002\000\066" +
    "\003\uff75\005\uff75\025\uff75\026\uff75\042\uff75\045\uff75\060" +
    "\uff75\061\uff75\062\uff75\063\uff75\065\uff75\066\uff75\070\uff75" +
    "\072\uff75\073\uff75\074\uff75\075\uff75\076\uff75\077\uff75\101" +
    "\uff75\102\uff75\103\uff75\104\uff75\105\uff75\106\uff75\107\uff75" +
    "\001\002\000\004\002\000\001\002\000\004\020\330\001" +
    "\002\000\006\005\332\021\331\001\002\000\004\011\350" +
    "\001\002\000\012\032\344\035\345\036\347\037\346\001" +
    "\002\000\006\010\335\021\334\001\002\000\004\011\343" +
    "\001\002\000\004\005\336\001\002\000\012\032\337\035" +
    "\340\036\342\037\341\001\002\000\006\010\uff7e\021\uff7e" +
    "\001\002\000\006\010\uff7f\021\uff7f\001\002\000\006\010" +
    "\uff80\021\uff80\001\002\000\006\010\uff81\021\uff81\001\002" +
    "\000\066\003\uff76\005\uff76\025\uff76\026\uff76\042\uff76\045" +
    "\uff76\060\uff76\061\uff76\062\uff76\063\uff76\065\uff76\066\uff76" +
    "\070\uff76\072\uff76\073\uff76\074\uff76\075\uff76\076\uff76\077" +
    "\uff76\101\uff76\102\uff76\103\uff76\104\uff76\105\uff76\106\uff76" +
    "\107\uff76\001\002\000\006\010\uff82\021\uff82\001\002\000" +
    "\006\010\uff83\021\uff83\001\002\000\006\010\uff84\021\uff84" +
    "\001\002\000\006\010\uff85\021\uff85\001\002\000\066\003" +
    "\uff77\005\uff77\025\uff77\026\uff77\042\uff77\045\uff77\060\uff77" +
    "\061\uff77\062\uff77\063\uff77\065\uff77\066\uff77\070\uff77\072" +
    "\uff77\073\uff77\074\uff77\075\uff77\076\uff77\077\uff77\101\uff77" +
    "\102\uff77\103\uff77\104\uff77\105\uff77\106\uff77\107\uff77\001" +
    "\002\000\022\004\074\005\072\006\355\012\352\020\070" +
    "\022\076\033\356\034\354\001\002\000\004\011\363\001" +
    "\002\000\014\004\074\005\072\011\362\020\070\022\076" +
    "\001\002\000\004\011\361\001\002\000\004\011\360\001" +
    "\002\000\004\011\357\001\002\000\066\003\uffae\005\uffae" +
    "\025\uffae\026\uffae\042\uffae\045\uffae\060\uffae\061\uffae\062" +
    "\uffae\063\uffae\065\uffae\066\uffae\070\uffae\072\uffae\073\uffae" +
    "\074\uffae\075\uffae\076\uffae\077\uffae\101\uffae\102\uffae\103" +
    "\uffae\104\uffae\105\uffae\106\uffae\107\uffae\001\002\000\066" +
    "\003\uffab\005\uffab\025\uffab\026\uffab\042\uffab\045\uffab\060" +
    "\uffab\061\uffab\062\uffab\063\uffab\065\uffab\066\uffab\070\uffab" +
    "\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab\101" +
    "\uffab\102\uffab\103\uffab\104\uffab\105\uffab\106\uffab\107\uffab" +
    "\001\002\000\066\003\uffad\005\uffad\025\uffad\026\uffad\042" +
    "\uffad\045\uffad\060\uffad\061\uffad\062\uffad\063\uffad\065\uffad" +
    "\066\uffad\070\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076" +
    "\uffad\077\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105\uffad" +
    "\106\uffad\107\uffad\001\002\000\066\003\uffb3\005\uffb3\025" +
    "\uffb3\026\uffb3\042\uffb3\045\uffb3\060\uffb3\061\uffb3\062\uffb3" +
    "\063\uffb3\065\uffb3\066\uffb3\070\uffb3\072\uffb3\073\uffb3\074" +
    "\uffb3\075\uffb3\076\uffb3\077\uffb3\101\uffb3\102\uffb3\103\uffb3" +
    "\104\uffb3\105\uffb3\106\uffb3\107\uffb3\001\002\000\066\003" +
    "\uffb1\005\uffb1\025\uffb1\026\uffb1\042\uffb1\045\uffb1\060\uffb1" +
    "\061\uffb1\062\uffb1\063\uffb1\065\uffb1\066\uffb1\070\uffb1\072" +
    "\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\101\uffb1" +
    "\102\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\001" +
    "\002\000\030\026\uffff\060\uffff\061\uffff\062\uffff\065\uffff" +
    "\070\uffff\073\uffff\075\uffff\101\uffff\103\uffff\107\uffff\001" +
    "\002\000\012\032\366\035\367\036\371\037\370\001\002" +
    "\000\042\003\uff78\005\uff78\025\uff78\042\uff78\045\uff78\063" +
    "\uff78\066\uff78\072\uff78\074\uff78\076\uff78\077\uff78\100\uff78" +
    "\102\uff78\104\uff78\105\uff78\106\uff78\001\002\000\042\003" +
    "\uff79\005\uff79\025\uff79\042\uff79\045\uff79\063\uff79\066\uff79" +
    "\072\uff79\074\uff79\076\uff79\077\uff79\100\uff79\102\uff79\104" +
    "\uff79\105\uff79\106\uff79\001\002\000\042\003\uff7a\005\uff7a" +
    "\025\uff7a\042\uff7a\045\uff7a\063\uff7a\066\uff7a\072\uff7a\074" +
    "\uff7a\076\uff7a\077\uff7a\100\uff7a\102\uff7a\104\uff7a\105\uff7a" +
    "\106\uff7a\001\002\000\042\003\uff7b\005\uff7b\025\uff7b\042" +
    "\uff7b\045\uff7b\063\uff7b\066\uff7b\072\uff7b\074\uff7b\076\uff7b" +
    "\077\uff7b\100\uff7b\102\uff7b\104\uff7b\105\uff7b\106\uff7b\001" +
    "\002\000\042\003\037\005\014\025\uffe6\042\007\045\044" +
    "\063\045\066\063\072\051\074\057\076\016\077\012\100" +
    "\373\102\017\104\023\105\032\106\035\001\002\000\004" +
    "\020\376\001\002\000\004\103\375\001\002\000\066\003" +
    "\uff7d\005\uff7d\025\uff7d\026\uff7d\042\uff7d\045\uff7d\060\uff7d" +
    "\061\uff7d\062\uff7d\063\uff7d\065\uff7d\066\uff7d\070\uff7d\072" +
    "\uff7d\073\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d\101\uff7d" +
    "\102\uff7d\103\uff7d\104\uff7d\105\uff7d\106\uff7d\107\uff7d\001" +
    "\002\000\004\005\332\001\002\000\006\010\335\021\u0100" +
    "\001\002\000\040\003\037\005\014\025\uffe6\042\007\045" +
    "\044\063\045\066\063\072\051\074\057\076\016\077\012" +
    "\102\017\104\023\105\032\106\035\001\002\000\004\103" +
    "\u0102\001\002\000\066\003\uff7c\005\uff7c\025\uff7c\026\uff7c" +
    "\042\uff7c\045\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\065" +
    "\uff7c\066\uff7c\070\uff7c\072\uff7c\073\uff7c\074\uff7c\075\uff7c" +
    "\076\uff7c\077\uff7c\101\uff7c\102\uff7c\103\uff7c\104\uff7c\105" +
    "\uff7c\106\uff7c\107\uff7c\001\002\000\014\004\074\005\072" +
    "\011\u0104\020\070\022\076\001\002\000\066\003\uff88\005" +
    "\uff88\025\uff88\026\uff88\042\uff88\045\uff88\060\uff88\061\uff88" +
    "\062\uff88\063\uff88\065\uff88\066\uff88\070\uff88\072\uff88\073" +
    "\uff88\074\uff88\075\uff88\076\uff88\077\uff88\101\uff88\102\uff88" +
    "\103\uff88\104\uff88\105\uff88\106\uff88\107\uff88\001\002\000" +
    "\006\025\uffe7\043\uffe7\001\002\000\022\004\074\005\072" +
    "\006\u010c\012\u010a\020\070\022\076\033\u010e\034\u010d\001" +
    "\002\000\004\005\u0108\001\002\000\010\010\u0107\025\uffe4" +
    "\043\uffe4\001\002\000\006\025\uffe5\043\uffe5\001\002\000" +
    "\004\011\u0113\001\002\000\014\004\074\005\072\011\u0112" +
    "\020\070\022\076\001\002\000\004\011\u0111\001\002\000" +
    "\004\011\u0110\001\002\000\004\011\u010f\001\002\000\066" +
    "\003\uffb0\005\uffb0\025\uffb0\026\uffb0\042\uffb0\045\uffb0\060" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\065\uffb0\066\uffb0\070\uffb0" +
    "\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\101" +
    "\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0" +
    "\001\002\000\066\003\uffaf\005\uffaf\025\uffaf\026\uffaf\042" +
    "\uffaf\045\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\065\uffaf" +
    "\066\uffaf\070\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076" +
    "\uffaf\077\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\uffaf" +
    "\106\uffaf\107\uffaf\001\002\000\066\003\uffac\005\uffac\025" +
    "\uffac\026\uffac\042\uffac\045\uffac\060\uffac\061\uffac\062\uffac" +
    "\063\uffac\065\uffac\066\uffac\070\uffac\072\uffac\073\uffac\074" +
    "\uffac\075\uffac\076\uffac\077\uffac\101\uffac\102\uffac\103\uffac" +
    "\104\uffac\105\uffac\106\uffac\107\uffac\001\002\000\066\003" +
    "\uffb4\005\uffb4\025\uffb4\026\uffb4\042\uffb4\045\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\065\uffb4\066\uffb4\070\uffb4\072" +
    "\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\101\uffb4" +
    "\102\uffb4\103\uffb4\104\uffb4\105\uffb4\106\uffb4\107\uffb4\001" +
    "\002\000\066\003\uffb2\005\uffb2\025\uffb2\026\uffb2\042\uffb2" +
    "\045\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\065\uffb2\066" +
    "\uffb2\070\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2" +
    "\077\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106" +
    "\uffb2\107\uffb2\001\002\000\042\003\037\005\014\025\uffe6" +
    "\042\007\045\044\063\045\066\063\072\051\074\057\076" +
    "\016\077\012\100\u0115\102\017\104\023\105\032\106\035" +
    "\001\002\000\004\020\u0118\001\002\000\004\101\u0117\001" +
    "\002\000\066\003\uff87\005\uff87\025\uff87\026\uff87\042\uff87" +
    "\045\uff87\060\uff87\061\uff87\062\uff87\063\uff87\065\uff87\066" +
    "\uff87\070\uff87\072\uff87\073\uff87\074\uff87\075\uff87\076\uff87" +
    "\077\uff87\101\uff87\102\uff87\103\uff87\104\uff87\105\uff87\106" +
    "\uff87\107\uff87\001\002\000\004\005\332\001\002\000\006" +
    "\010\335\021\u011a\001\002\000\040\003\037\005\014\025" +
    "\uffe6\042\007\045\044\063\045\066\063\072\051\074\057" +
    "\076\016\077\012\102\017\104\023\105\032\106\035\001" +
    "\002\000\004\101\u011c\001\002\000\066\003\uff86\005\uff86" +
    "\025\uff86\026\uff86\042\uff86\045\uff86\060\uff86\061\uff86\062" +
    "\uff86\063\uff86\065\uff86\066\uff86\070\uff86\072\uff86\073\uff86" +
    "\074\uff86\075\uff86\076\uff86\077\uff86\101\uff86\102\uff86\103" +
    "\uff86\104\uff86\105\uff86\106\uff86\107\uff86\001\002\000\006" +
    "\010\u0107\043\u0132\001\002\000\004\043\u011f\001\002\000" +
    "\012\032\u0120\035\u0121\036\u0123\037\u0122\001\002\000\004" +
    "\044\u012d\001\002\000\004\044\u012a\001\002\000\004\044" +
    "\u0127\001\002\000\004\044\u0124\001\002\000\004\004\u0125" +
    "\001\002\000\004\011\u0126\001\002\000\066\003\uffc5\005" +
    "\uffc5\025\uffc5\026\uffc5\042\uffc5\045\uffc5\060\uffc5\061\uffc5" +
    "\062\uffc5\063\uffc5\065\uffc5\066\uffc5\070\uffc5\072\uffc5\073" +
    "\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\101\uffc5\102\uffc5" +
    "\103\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\001\002\000" +
    "\004\012\u0128\001\002\000\004\011\u0129\001\002\000\066" +
    "\003\uffc3\005\uffc3\025\uffc3\026\uffc3\042\uffc3\045\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\065\uffc3\066\uffc3\070\uffc3" +
    "\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3\101" +
    "\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3" +
    "\001\002\000\004\006\u012b\001\002\000\004\011\u012c\001" +
    "\002\000\066\003\uffbd\005\uffbd\025\uffbd\026\uffbd\042\uffbd" +
    "\045\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\065\uffbd\066" +
    "\uffbd\070\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd" +
    "\077\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106" +
    "\uffbd\107\uffbd\001\002\000\006\033\u012e\034\u012f\001\002" +
    "\000\004\011\u0131\001\002\000\004\011\u0130\001\002\000" +
    "\066\003\uffbf\005\uffbf\025\uffbf\026\uffbf\042\uffbf\045\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\063\uffbf\065\uffbf\066\uffbf\070" +
    "\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf" +
    "\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107" +
    "\uffbf\001\002\000\066\003\uffc0\005\uffc0\025\uffc0\026\uffc0" +
    "\042\uffc0\045\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\065" +
    "\uffc0\066\uffc0\070\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0" +
    "\076\uffc0\077\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\105" +
    "\uffc0\106\uffc0\107\uffc0\001\002\000\012\032\u0133\035\u0134" +
    "\036\u0136\037\u0135\001\002\000\004\044\u0140\001\002\000" +
    "\004\044\u013d\001\002\000\004\044\u013a\001\002\000\004" +
    "\044\u0137\001\002\000\012\004\074\005\072\020\070\022" +
    "\076\001\002\000\014\004\074\005\072\011\u0139\020\070" +
    "\022\076\001\002\000\066\003\uffe3\005\uffe3\025\uffe3\026" +
    "\uffe3\042\uffe3\045\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\065\uffe3\066\uffe3\070\uffe3\072\uffe3\073\uffe3\074\uffe3\075" +
    "\uffe3\076\uffe3\077\uffe3\101\uffe3\102\uffe3\103\uffe3\104\uffe3" +
    "\105\uffe3\106\uffe3\107\uffe3\001\002\000\004\012\u013b\001" +
    "\002\000\004\011\u013c\001\002\000\066\003\uffc4\005\uffc4" +
    "\025\uffc4\026\uffc4\042\uffc4\045\uffc4\060\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\065\uffc4\066\uffc4\070\uffc4\072\uffc4\073\uffc4" +
    "\074\uffc4\075\uffc4\076\uffc4\077\uffc4\101\uffc4\102\uffc4\103" +
    "\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\001\002\000\004" +
    "\006\u013e\001\002\000\004\011\u013f\001\002\000\066\003" +
    "\uffbe\005\uffbe\025\uffbe\026\uffbe\042\uffbe\045\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\063\uffbe\065\uffbe\066\uffbe\070\uffbe\072" +
    "\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\101\uffbe" +
    "\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\001" +
    "\002\000\016\004\074\005\072\020\070\022\076\033\u0143" +
    "\034\u0142\001\002\000\014\004\074\005\072\011\u0146\020" +
    "\070\022\076\001\002\000\004\011\u0145\001\002\000\004" +
    "\011\u0144\001\002\000\066\003\uffc2\005\uffc2\025\uffc2\026" +
    "\uffc2\042\uffc2\045\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\065\uffc2\066\uffc2\070\uffc2\072\uffc2\073\uffc2\074\uffc2\075" +
    "\uffc2\076\uffc2\077\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2" +
    "\105\uffc2\106\uffc2\107\uffc2\001\002\000\066\003\uffc1\005" +
    "\uffc1\025\uffc1\026\uffc1\042\uffc1\045\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\065\uffc1\066\uffc1\070\uffc1\072\uffc1\073" +
    "\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\101\uffc1\102\uffc1" +
    "\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\001\002\000" +
    "\066\003\uffe2\005\uffe2\025\uffe2\026\uffe2\042\uffe2\045\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\063\uffe2\065\uffe2\066\uffe2\070" +
    "\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2" +
    "\101\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2\106\uffe2\107" +
    "\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0144\000\004\002\004\001\001\000\102\003\023\004" +
    "\017\005\052\006\041\007\033\011\054\012\024\013\060" +
    "\014\012\015\035\016\014\017\027\020\061\021\010\022" +
    "\021\023\047\024\037\025\051\026\053\027\030\030\025" +
    "\031\032\032\020\034\057\036\026\037\055\040\063\041" +
    "\045\042\007\043\042\044\040\045\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u011d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\u0104\001\001\000\002\001\001\000" +
    "\014\046\u0102\047\070\050\076\055\074\056\066\001\001" +
    "\000\002\001\001\000\102\003\363\004\017\005\052\006" +
    "\041\007\033\011\054\012\024\013\060\014\012\015\035" +
    "\016\014\017\027\020\061\021\010\022\021\023\047\024" +
    "\037\025\051\026\053\027\030\030\025\031\032\032\020" +
    "\034\057\036\026\037\055\040\063\041\045\042\007\043" +
    "\042\044\040\045\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\240\001\001\000\014" +
    "\046\220\047\070\050\076\055\074\056\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\102" +
    "\003\165\004\017\005\052\006\041\007\033\011\054\012" +
    "\024\013\060\014\012\015\035\016\014\017\027\020\061" +
    "\021\010\022\021\023\047\024\037\025\051\026\053\027" +
    "\030\030\025\031\032\032\020\034\057\036\026\037\055" +
    "\040\063\041\045\042\007\043\042\044\040\045\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\046\072\047\070\050\076\055\074\056\066\001\001" +
    "\000\002\001\001\000\010\050\161\055\160\056\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\047\143" +
    "\050\076\055\074\056\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\050\137\055\136\056\135\001\001" +
    "\000\002\001\001\000\004\050\134\001\001\000\004\050" +
    "\133\001\001\000\004\050\132\001\001\000\004\050\131" +
    "\001\001\000\004\050\130\001\001\000\004\050\127\001" +
    "\001\000\004\050\126\001\001\000\004\050\125\001\001" +
    "\000\004\050\124\001\001\000\004\050\123\001\001\000" +
    "\004\050\122\001\001\000\004\050\121\001\001\000\004" +
    "\050\120\001\001\000\004\050\117\001\001\000\004\050" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\046\145\047\070\050\076\055\074\056\066\001" +
    "\001\000\012\047\143\050\076\055\074\056\066\001\001" +
    "\000\014\046\153\047\070\050\076\055\074\056\066\001" +
    "\001\000\102\003\150\004\017\005\052\006\041\007\033" +
    "\011\054\012\024\013\060\014\012\015\035\016\014\017" +
    "\027\020\061\021\010\022\021\023\047\024\037\025\051" +
    "\026\053\027\030\030\025\031\032\032\020\034\057\036" +
    "\026\037\055\040\063\041\045\042\007\043\042\044\040" +
    "\045\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\047\143\050\076\055\074\056\066" +
    "\001\001\000\102\003\155\004\017\005\052\006\041\007" +
    "\033\011\054\012\024\013\060\014\012\015\035\016\014" +
    "\017\027\020\061\021\010\022\021\023\047\024\037\025" +
    "\051\026\053\027\030\030\025\031\032\032\020\034\057" +
    "\036\026\037\055\040\063\041\045\042\007\043\042\044" +
    "\040\045\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\046\172\047\070\050\076\055\074" +
    "\056\066\001\001\000\012\047\143\050\076\055\074\056" +
    "\066\001\001\000\014\046\210\047\070\050\076\055\074" +
    "\056\066\001\001\000\014\046\207\047\070\050\076\055" +
    "\074\056\066\001\001\000\014\046\206\047\070\050\076" +
    "\055\074\056\066\001\001\000\002\001\001\000\014\046" +
    "\204\047\070\050\076\055\074\056\066\001\001\000\002" +
    "\001\001\000\014\046\202\047\070\050\076\055\074\056" +
    "\066\001\001\000\012\047\143\050\076\055\074\056\066" +
    "\001\001\000\002\001\001\000\012\047\143\050\076\055" +
    "\074\056\066\001\001\000\002\001\001\000\012\047\143" +
    "\050\076\055\074\056\066\001\001\000\012\047\143\050" +
    "\076\055\074\056\066\001\001\000\012\047\143\050\076" +
    "\055\074\056\066\001\001\000\004\052\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\102\003\216\004\017" +
    "\005\052\006\041\007\033\011\054\012\024\013\060\014" +
    "\012\015\035\016\014\017\027\020\061\021\010\022\021" +
    "\023\047\024\037\025\051\026\053\027\030\030\025\031" +
    "\032\032\020\034\057\036\026\037\055\040\063\041\045" +
    "\042\007\043\042\044\040\045\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\047\143" +
    "\050\076\055\074\056\066\001\001\000\004\051\223\001" +
    "\001\000\014\046\231\047\070\050\076\055\074\056\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\102\003\227\004\017\005\052\006\041\007\033" +
    "\011\054\012\024\013\060\014\012\015\035\016\014\017" +
    "\027\020\061\021\010\022\021\023\047\024\037\025\051" +
    "\026\053\027\030\030\025\031\032\032\020\034\057\036" +
    "\026\037\055\040\063\041\045\042\007\043\042\044\040" +
    "\045\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\047\143\050\076\055\074\056\066\001\001\000\002" +
    "\001\001\000\102\003\234\004\017\005\052\006\041\007" +
    "\033\011\054\012\024\013\060\014\012\015\035\016\014" +
    "\017\027\020\061\021\010\022\021\023\047\024\037\025" +
    "\051\026\053\027\030\030\025\031\032\032\020\034\057" +
    "\036\026\037\055\040\063\041\045\042\007\043\042\044" +
    "\040\045\046\001\001\000\004\051\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\046\260\047\070\050" +
    "\076\055\074\056\066\001\001\000\002\001\001\000\102" +
    "\003\242\004\017\005\052\006\041\007\033\011\054\012" +
    "\024\013\060\014\012\015\035\016\014\017\027\020\061" +
    "\021\010\022\021\023\047\024\037\025\051\026\053\027" +
    "\030\030\025\031\032\032\020\034\057\036\026\037\055" +
    "\040\063\041\045\042\007\043\042\044\040\045\046\001" +
    "\001\000\004\010\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\251\001\001\000\102\003\247\004" +
    "\017\005\052\006\041\007\033\011\054\012\024\013\060" +
    "\014\012\015\035\016\014\017\027\020\061\021\010\022" +
    "\021\023\047\024\037\025\051\026\053\027\030\030\025" +
    "\031\032\032\020\034\057\036\026\037\055\040\063\041" +
    "\045\042\007\043\042\044\040\045\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\102\003" +
    "\253\004\017\005\052\006\041\007\033\011\054\012\024" +
    "\013\060\014\012\015\035\016\014\017\027\020\061\021" +
    "\010\022\021\023\047\024\037\025\051\026\053\027\030" +
    "\030\025\031\032\032\020\034\057\036\026\037\055\040" +
    "\063\041\045\042\007\043\042\044\040\045\046\001\001" +
    "\000\004\010\254\001\001\000\002\001\001\000\102\003" +
    "\256\004\017\005\052\006\041\007\033\011\054\012\024" +
    "\013\060\014\012\015\035\016\014\017\027\020\061\021" +
    "\010\022\021\023\047\024\037\025\051\026\053\027\030" +
    "\030\025\031\032\032\020\034\057\036\026\037\055\040" +
    "\063\041\045\042\007\043\042\044\040\045\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\047\143\050" +
    "\076\055\074\056\066\001\001\000\014\046\276\047\070" +
    "\050\076\055\074\056\066\001\001\000\014\046\275\047" +
    "\070\050\076\055\074\056\066\001\001\000\014\046\274" +
    "\047\070\050\076\055\074\056\066\001\001\000\014\046" +
    "\273\047\070\050\076\055\074\056\066\001\001\000\014" +
    "\046\272\047\070\050\076\055\074\056\066\001\001\000" +
    "\014\046\271\047\070\050\076\055\074\056\066\001\001" +
    "\000\014\046\270\047\070\050\076\055\074\056\066\001" +
    "\001\000\012\047\143\050\076\055\074\056\066\001\001" +
    "\000\012\047\143\050\076\055\074\056\066\001\001\000" +
    "\012\047\143\050\076\055\074\056\066\001\001\000\012" +
    "\047\143\050\076\055\074\056\066\001\001\000\012\047" +
    "\143\050\076\055\074\056\066\001\001\000\012\047\143" +
    "\050\076\055\074\056\066\001\001\000\012\047\143\050" +
    "\076\055\074\056\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\332\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\046\352\047\070\050\076\055" +
    "\074\056\066\001\001\000\002\001\001\000\012\047\143" +
    "\050\076\055\074\056\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\102\003\373\004\017\005\052\006\041\007\033" +
    "\011\054\012\024\013\060\014\012\015\035\016\014\017" +
    "\027\020\061\021\010\022\021\023\047\024\037\025\051" +
    "\026\053\027\030\030\025\031\032\032\020\034\057\036" +
    "\026\037\055\040\063\041\045\042\007\043\042\044\040" +
    "\045\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\376\001\001\000\002\001\001" +
    "\000\102\003\u0100\004\017\005\052\006\041\007\033\011" +
    "\054\012\024\013\060\014\012\015\035\016\014\017\027" +
    "\020\061\021\010\022\021\023\047\024\037\025\051\026" +
    "\053\027\030\030\025\031\032\032\020\034\057\036\026" +
    "\037\055\040\063\041\045\042\007\043\042\044\040\045" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\047\143\050\076\055\074\056\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\046\u010a\047\070\050\076" +
    "\055\074\056\066\001\001\000\002\001\001\000\004\033" +
    "\u0108\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\047\143\050\076\055\074\056\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\102\003\u0115\004\017\005\052\006\041" +
    "\007\033\011\054\012\024\013\060\014\012\015\035\016" +
    "\014\017\027\020\061\021\010\022\021\023\047\024\037" +
    "\025\051\026\053\027\030\030\025\031\032\032\020\034" +
    "\057\036\026\037\055\040\063\041\045\042\007\043\042" +
    "\044\040\045\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\u0118\001\001\000\002" +
    "\001\001\000\102\003\u011a\004\017\005\052\006\041\007" +
    "\033\011\054\012\024\013\060\014\012\015\035\016\014" +
    "\017\027\020\061\021\010\022\021\023\047\024\037\025" +
    "\051\026\053\027\030\030\025\031\032\032\020\034\057" +
    "\036\026\037\055\040\063\041\045\042\007\043\042\044" +
    "\040\045\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\046\u0137\047\070\050\076\055\074\056" +
    "\066\001\001\000\012\047\143\050\076\055\074\056\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\046\u0140\047\070\050\076\055" +
    "\074\056\066\001\001\000\012\047\143\050\076\055\074" +
    "\056\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Nodo1 padre;
    public int cont = 0;
    public static LinkedList<TError> errores = new LinkedList<TError>();
    public static ArrayList<String> vars = new ArrayList<String>();


    public static String tipo="Lista";
    public String codigoTraducidoPython="";
    public String pruebas = "";
    public String codigoTraducidoGolang="";
    public String errorm="";

    public static boolean isNumeric(String cadena) {

        boolean resultado;

        try {
            Integer.parseInt(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }

        return resultado;
    }
    
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("Error Sintáctico en la Línea " + (s.right + 1) +
        " Columna "+s.left + ". No se esperaba este caracter: " +s.value+".");
        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        errores.add(tmp);
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left + 1)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 

        TError tmp = new TError("Sintactico",lexema, "TOKEN NO ERA EL ESPERADO",fila,columna);
        errores.add(tmp);
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= prInicio INSTRUCCIONES prFin 
            {
              Object RESULT =null;
		int pinicleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int pinicright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String pinic = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int pfinleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int pfinright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String pfin = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
 String fileName = "SalidaTraducidaPY.py";
    try{
    PrintWriter writer = new PrintWriter(fileName);
    writer.println("def main():");
    writer.println(codigoTraducidoPython);
    writer.println("");
    writer.println("");
    writer.println("if __name__ == '__main__':");
    writer.println("\tmain()");
    writer.println("");
    writer.close();
    }
    catch (IOException e){
      System.out.println("An error occurred.");
      e.printStackTrace();
      }

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("GLOBAL");
nd.setIdNod(parser.cont);
nd1.setEtiqueta("prInicio");
nd1.setValor(pinic.toString());
nd2.setEtiqueta("prFin");
nd3.setEtiqueta(pinic.toString());
nd4.setEtiqueta(pfin.toString());
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos ((Nodo1) nd1);
nd.AddHijos((Nodo1) n);
nd.AddHijos((Nodo1) nd2);
nd1.AddHijos((Nodo1) nd3);
nd2.AddHijos((Nodo1) nd4);
parser.padre = (Nodo1) nd;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n;
RESULT=n1;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Instrucciones");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
nd.AddHijos((Nodo1) n1);
RESULT= nd;


  
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Instrucciones");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACIONES 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Declaracion");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACIONES 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Asignacion");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IF 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n;
codigoTraducidoPython += RESULT;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("IF");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SEGUN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Segun");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CICLO_FOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Para");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;
 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CICLO_WHILE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Mientras");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CICLO_DOWHILE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Mientras_Hacer");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= RETORNO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Retorno");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= METODO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Metodo");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= FUNCIONES 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Funciones");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= EJECUTAR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Ejecutar");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= IMPRIMIR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Imprimir");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n);
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= IMPRIMIRNL 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n1;
Nodo1 nd = new Nodo1();
nd.setEtiqueta("Imprimir_nl");
nd.setIdNod(parser.cont);
parser.cont++;
nd.AddHijos((Nodo1) n1);
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT = err;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES ::= DECLARARCONOPERACION 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONES ::= DECLARARNUML 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT= n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACIONES ::= DECLARARCADENA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT= n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACIONES ::= DECLARARCADENAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACIONES ::= DECLARARBOOLEANO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= n;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACIONES ::= DECLARARBOOLEANOL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACIONES ::= DECLARARCARACTER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACIONES ::= DECLARARCARACTERL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTAVARIABLES ::= tvariable LISTAVARIABLES2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 vars.add(a); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTAVARIABLES ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTAVARIABLES2 ::= tcoma tvariable LISTAVARIABLES2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 vars.add(a); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES2",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTAVARIABLES2 ::= tcoma tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 vars.add(a); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES2",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARARCONOPERACION ::= prIngresar tvariable prComo prNumero prConValor EXPRESIONARITMETICA tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
RESULT = a + " = " + b + "\n";
codigoTraducidoPython += "\t" + a + " = " + b + "\n";
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(nm.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCONOPERACION",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARARCONOPERACION ::= prIngresar tvariable prComo prBoolean prConValor EXPRESIONARITMETICA tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
codigoTraducidoPython += "\t" + a + " = " + b + "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(bl.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCONOPERACION",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESIONARITMETICA ::= EXPRESIONARITMETICA EXPRESIONES 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=b;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONARITMETICA",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESIONARITMETICA ::= EXPRESIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONARITMETICA",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESIONES ::= EXPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 System.out.println("=" + e + ";"); RESULT=e; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESIONES ::= RELACIONAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= e; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESIONES ::= LOGICO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT = e;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION tsuma EXPRESION 
            {
              Object RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= I + " + " + r ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION tresta EXPRESION 
            {
              Object RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= I + " - " + r ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION tmultiplicacion EXPRESION 
            {
              Object RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= I + " * " + r ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION tdivision EXPRESION 
            {
              Object RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= I + " / " + r ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION prMod EXPRESION 
            {
              Object RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT= I + "%" + r;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION prPotencia EXPRESION 
            {
              Object RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= I + "**" + r;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= tparA EXPRESION tparC 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 RESULT= "(" + e + ")"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= tcorA EXPRESION tcorC 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 RESULT= "[" + e + "]"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= tparA RELACIONAL tparC 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 RESULT= "(" + e + ")"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= tcorA RELACIONAL tcorC 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 RESULT= "[" + e + "]"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= tparA LOGICO tparC 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 RESULT= "(" + e + ")"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= tcorA LOGICO tcorC 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 RESULT= "[" + e + "]"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= tvariable 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= b;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RELACIONAL ::= EXPRESION prMayor EXPRESION 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+">"+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",43, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RELACIONAL ::= EXPRESION prMenor EXPRESION 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+"<"+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",43, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RELACIONAL ::= EXPRESION prMayorIgual EXPRESION 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+">="+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",43, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RELACIONAL ::= EXPRESION prMenorIgual EXPRESION 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+"<="+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",43, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RELACIONAL ::= EXPRESION prEsIGUAL EXPRESION 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+"=="+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",43, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RELACIONAL ::= EXPRESION prEsDiferente EXPRESION 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+"!="+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",43, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LOGICO ::= EXPRESION prOR EXPRESION 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+"or"+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LOGICO",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOGICO ::= EXPRESION prAND EXPRESION 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+"and"+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LOGICO",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LOGICO ::= EXPRESION prNOT EXPRESION 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=op1+"not"+op2; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LOGICO",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARARNUML ::= prIngresar LISTAVARIABLES prComo prNumero prConValor numero tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String nm = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" + varia + " = " + nm + "\n" ;
}
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variables");
nd2.setValor(vars.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(nm.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARNUML",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARARCADENA ::= prIngresar tvariable prComo prCadena prConValor tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
codigoTraducidoPython += "\t" + a + " = " + b + "\n" ; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
b = b.replace("\"","");
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(cad.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCADENA",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARARCADENAL ::= prIngresar LISTAVARIABLES prComo prCadena prConValor tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String cade = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" + varia + " = " + cad + "\n" ;
}
cad = cad.replace("\"", "");
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variables");
nd2.setValor(vars.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(cad.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(cad.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCADENAL",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARARBOOLEANO ::= prIngresar tvariable prComo prBoolean prConValor prVerdadero tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
codigoTraducidoPython += "\t" +  a + " = " + "True" + "\n" ; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(bl.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARBOOLEANO",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARARBOOLEANO ::= prIngresar tvariable prComo prBoolean prConValor prFalso tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
codigoTraducidoPython += "\t" + a + " = " + "False" + "\n" ; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(bl.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARBOOLEANO",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARARBOOLEANOL ::= prIngresar LISTAVARIABLES prComo prBoolean prConValor prVerdadero tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" + varia + " = " + v + "\n" ;
}

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variables");
nd2.setValor(vars.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(bl.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(v.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 
 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARBOOLEANOL",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARARBOOLEANOL ::= prIngresar LISTAVARIABLES prComo prBoolean prConValor prFalso tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" + varia + " = " + f + "\n" ;
}

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variables");
nd2.setValor(vars.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(bl.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(f.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARBOOLEANOL",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARARCARACTER ::= prIngresar tvariable prComo prCaracter prConValor tcaracter tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            codigoTraducidoPython += "\t" + a + " = " + "'" +  s  + "'" + "\n";
            //System.out.println("Es un número");
        } else {
            codigoTraducidoPython += "\t" + a + " = " + "'" + b  + "'" + "\n";
            //System.out.println("Es una letra");
        }

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(car.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;



              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCARACTER",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARARCARACTERL ::= prIngresar LISTAVARIABLES prComo prCaracter prConValor tcaracter tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
            codigoTraducidoPython += "\t" + varia + " = " + "'" +  s  + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es un número");
        } else {
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
             codigoTraducidoPython += "\t" + varia + " = " + "'" + b  + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es una letra");
        }

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variables");
nd2.setValor(vars.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(co.toString());
nd4.setEtiqueta("tipo_dato");
nd4.setValor(car.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(c1.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(b.toString());
nd7.setEtiqueta("Puntocoma");
nd7.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 

 

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCARACTERL",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIGNACIONES ::= ASIGNARNUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNACIONES ::= ASIGNARNUML 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNACIONES ::= ASIGNARCADENA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNACIONES ::= ASIGNARCADENAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACIONES ::= ASIGNARBOOLEANO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIGNACIONES ::= ASIGNARBOOLEANOL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACIONES ::= ASIGNARCARACTER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIGNACIONES ::= ASIGNARCARACTERL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT=n; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNARNUM ::= tvariable tflecha EXPRESIONARITMETICA tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int flechleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int flechright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String flech = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
codigoTraducidoPython += "\t" + a + " = " + b + "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variable");
nd1.setValor(a.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(b.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARNUM",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ASIGNARNUML ::= LISTAVARIABLES tflecha EXPRESIONARITMETICA tpuntoycoma 
            {
              Object RESULT =null;
		int flechleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int flechright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String flech = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" + varia + " = " + num + "\n" ;
}
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variables");
nd1.setValor(vars.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(num.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARNUML",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ASIGNARCADENA ::= tvariable tflecha tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int flechleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int flechright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String flech = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
codigoTraducidoPython += "\t" + a + " = " + b + "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
b = b.replace("\"","");
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variable");
nd1.setValor(a.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(b.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARCADENA",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ASIGNARCADENAL ::= LISTAVARIABLES tflecha tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int flechleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int flechright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String flech = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" + varia + " = " + cad + "\n";
}
cad = cad.replace("\"","");
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variables");
nd1.setValor(vars.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(cad.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARCADENAL",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ASIGNARBOOLEANO ::= tvariable tflecha prVerdadero tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int flechleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int flechright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String flech = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
codigoTraducidoPython += "\t" + a + " = " + "True" + "\n";
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variable");
nd1.setValor(a.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(b.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARBOOLEANO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIGNARBOOLEANO ::= tvariable tflecha prFalso tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int flechleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int flechright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String flech = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
codigoTraducidoPython += "\t" + a + " = " + "False" + "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variable");
nd1.setValor(a.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(b.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;


              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARBOOLEANO",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIGNARBOOLEANOL ::= LISTAVARIABLES tflecha prVerdadero tpuntoycoma 
            {
              Object RESULT =null;
		int flechleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int flechright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String flech = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" +  varia + " = " + v + "\n";
}
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variables");
nd1.setValor(vars.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(v.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 
 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARBOOLEANOL",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ASIGNARBOOLEANOL ::= LISTAVARIABLES tflecha prFalso tpuntoycoma 
            {
              Object RESULT =null;
		int flechleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int flechright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String flech = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += "\t" + varia + " = " + f + "\n";
}
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variables");
nd1.setValor(vars.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(f.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARBOOLEANOL",33, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ASIGNARCARACTER ::= tvariable tflecha tcaracter tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int flechleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int flechright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String flech = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            codigoTraducidoPython += "\t" + a + " = " + "'" +  s  + "'" + "\n";
            //System.out.println("Es un número");
        } else {
            codigoTraducidoPython += "\t" + a + " = " + "'" + b  + "'" + "\n";
            //System.out.println("Es una letra");
        }

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variable");
nd1.setValor(a.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(b.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARCARACTER",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASIGNARCARACTERL ::= LISTAVARIABLES tflecha tcaracter tpuntoycoma 
            {
              Object RESULT =null;
		int flechleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int flechright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String flech = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
            codigoTraducidoPython += "\t" + varia + " = " + "'" +  s  + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es un número");
        } else {
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
             codigoTraducidoPython += "\t"  + varia + " = " + "'" + b  + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es una letra");
        } 

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Variables");
nd1.setValor(vars.toString());
nd2.setEtiqueta("flecha");
nd2.setValor(flech.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(b.toString());
nd4.setEtiqueta("Puntocoma");
nd4.setValor(comaa.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
vars.clear(); 


              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARCARACTERL",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IF ::= prSi CONDICIONIF prEntonces INSTRUCCIONES prFinSi 
            {
              Object RESULT =null;
		int iifleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int iifright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String iif = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fnsileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fnsiright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String fnsi = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT += "if" +  a  + "\n" + in;
codigoTraducidoPython += RESULT; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(iif.toString());
nd2.setEtiqueta("Condicion");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(en.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(fnsi.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;


              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IF ::= prSi CONDICIONIF prEntonces INSTRUCCIONES prDeloContrario INSTRUCCIONES prFinSi 
            {
              Object RESULT =null;
		int iifleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int iifright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String iif = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int contrleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int contrright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String contr = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int in2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int in2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fnsileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fnsiright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String fnsi = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 codigoTraducidoPython += "if " + a + "\n" + in + " else: " + "\n" + in2 +  "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(iif.toString());
nd2.setEtiqueta("Condicion");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(en.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(contr.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(fnsi.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) in2);
nd.AddHijos((Nodo1) nd5);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;


              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IF ::= prSi CONDICIONIF prEntonces INSTRUCCIONES LISTAOSI prDeloContrario INSTRUCCIONES prFinSi 
            {
              Object RESULT =null;
		int iifleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int iifright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		String iif = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int contrleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int contrright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String contr = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int in2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int in2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fnsileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fnsiright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String fnsi = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 codigoTraducidoPython += "if " +  a  + "\n" + in + ls + in2 + " else: " + "\n" + in2 +  "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(iif.toString());
nd2.setEtiqueta("Condicion");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(en.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(contr.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(fnsi.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) ls);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) in2);
nd.AddHijos((Nodo1) nd5);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;


              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LISTAOSI ::= prOSi CONDICIONIF prEntonces INSTRUCCIONES LISTAOSI 
            {
              Object RESULT =null;
		int osiileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int osiiright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String osii = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object lis = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= "else " +  a + in + lis  + "\n" ;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Lista O_Si");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(osii.toString());
nd2.setEtiqueta("Condicion");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(en.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) lis);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;


              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAOSI",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LISTAOSI ::= prOSi CONDICIONIF prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int osiileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int osiiright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String osii = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= "else " + a +  in + "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("O_Si");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(osii.toString());
nd2.setEtiqueta("Condicion");
nd2.setValor(a.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(en.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) in);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAOSI",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICIONIF ::= tvariable prEsIGUAL EXPRESIONARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "("+ a + "==" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDICIONIF ::= tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); 
  RESULT = "("+ a + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONDICIONIF ::= tvariable prMayorIgual EXPRESIONARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); 
  RESULT = "("+ a + ">=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONDICIONIF ::= tvariable prMenorIgual EXPRESIONARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "("+ a + "<=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONDICIONIF ::= tvariable prMayor EXPRESIONARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "("+ a + ">" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONDICIONIF ::= tvariable prMenor EXPRESIONARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "("+ a + "<" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONDICIONIF ::= tvariable prOR EXPRESIONARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "("+ a + "or" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONDICIONIF ::= tvariable prAND EXPRESIONARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "("+ a + "and" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONDICIONIF ::= prNOT EXPRESIONARITMETICA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
  RESULT = "(" + "not" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONIF",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SEGUN ::= prSegun EXPRESIONARITMETICA prHacer INSTRUCCIONSEGUN prDeloContrario prEntonces INSTRUCCIONES prFinSegun 
            {
              Object RESULT =null;
		int segleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int segright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		String seg = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int hacleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int hacright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String hac = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int insegleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int insegright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object inseg = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int contrleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int contrright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String contr = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fnsegunleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fnsegunright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String fnsegun = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
nd.setEtiqueta("Entrada Segun");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(seg.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(exp.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(hac.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(contr.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(en.toString());
nd6.setEtiqueta("Palabra_Reservada");
nd6.setValor(fnsegun.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) inseg);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd6);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SEGUN ::= prSegun EXPRESIONARITMETICA prHacer INSTRUCCIONSEGUN prFinSegun 
            {
              Object RESULT =null;
		int segleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int segright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String seg = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int hacleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int hacright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String hac = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int insegleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int insegright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object inseg = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fnsegunleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fnsegunright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String fnsegun = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada Segun");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(seg.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(exp.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(hac.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(fnsegun.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) inseg);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSTRUCCIONSEGUN ::= tinterrogaciona EXPRESIONARITMETICA tinterrogacionc prEntonces INSTRUCCIONES INSTRUCCIONSEGUN 
            {
              Object RESULT =null;
		int interAleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int interAright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String interA = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int interCleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int interCright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String interC = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object lis = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=exp;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Instruccion Segun");
nd1.setEtiqueta("Signo_Interrogacion");
nd1.setValor(interA.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(exp.toString());
nd3.setEtiqueta("Signo_Interrogacion");
nd3.setValor(interC.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(en.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) lis);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;


              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONSEGUN",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INSTRUCCIONSEGUN ::= tinterrogaciona EXPRESIONARITMETICA tinterrogacionc prEntonces INSTRUCCIONES 
            {
              Object RESULT =null;
		int interAleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int interAright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String interA = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int interCleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int interCright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String interC = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String en = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT=exp;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Instruccion Segun");
nd1.setEtiqueta("Signo_Interrogacion");
nd1.setValor(interA.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(exp.toString());
nd3.setEtiqueta("Signo_Interrogacion");
nd3.setValor(interC.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(en.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) in);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONSEGUN",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CICLO_FOR ::= prPara tvariable tflecha EXPRESIONARITMETICA prHasta EXPRESIONARITMETICA prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).right;
		String par = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int flechleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int flechright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String flech = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int hastleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int hastright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String hast = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int hacleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int hacright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String hac = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fnparaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fnpararight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String fnpara = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_",""); RESULT=d;
codigoTraducidoPython += "for " + a + " in " + b + ":" + "\n" + RESULT + "\n" ; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
Nodo1 nd8 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(par.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("flecha");
nd3.setValor(flech.toString());
nd4.setEtiqueta("Expresion");
nd4.setValor(b.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(hast.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(c.toString());
nd7.setEtiqueta("Palabra_Reservada");
nd7.setValor(hac.toString());
nd8.setEtiqueta("Palabra_Reservada");
nd8.setValor(fnpara.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.AddHijos((Nodo1) d);
nd.AddHijos((Nodo1) nd8);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
nd8.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CICLO_FOR ::= prPara tvariable tflecha EXPRESIONARITMETICA prHasta EXPRESIONARITMETICA prIncremental EXPRESIONARITMETICA prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-10)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-10)).right;
		String par = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-9)).value;
		int flechleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).left;
		int flechright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).right;
		String flech = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int hastleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int hastright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String hast = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int incrleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int incrright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String incr = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int hacleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int hacright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String hac = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fnparaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fnpararight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String fnpara = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
Nodo1 nd8 = new Nodo1();
Nodo1 nd9 = new Nodo1();
Nodo1 nd10 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(par.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("flecha");
nd3.setValor(flech.toString());
nd4.setEtiqueta("Expresion");
nd4.setValor(b.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(hast.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(c.toString());
nd7.setEtiqueta("Palabra_Reservada");
nd7.setValor(incr.toString());
nd8.setEtiqueta("Expresion");
nd8.setValor(d.toString());
nd9.setEtiqueta("Palabra_Reservada");
nd9.setValor(hac.toString());
nd10.setEtiqueta("Palabra_Reservada");
nd10.setValor(fnpara.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.AddHijos((Nodo1) nd8);
nd.AddHijos((Nodo1) nd9);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd10);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
nd8.setIdNod(parser.cont);
nd9.setIdNod(parser.cont);
nd10.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CICLO_FOR ::= prPara tvariable tflecha EXPRESIONARITMETICA prHasta EXPRESIONARITMETICA prHacer prFinPara 
            {
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		String par = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int flechleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int flechright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String flech = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int hastleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int hastright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String hast = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int hacleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int hacright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String hac = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fnparaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fnpararight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String fnpara = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
Nodo1 nd8 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(par.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("flecha");
nd3.setValor(flech.toString());
nd4.setEtiqueta("Expresion");
nd4.setValor(b.toString());
nd5.setEtiqueta("Palabra_Reservada");
nd5.setValor(hast.toString());
nd6.setEtiqueta("Expresion");
nd6.setValor(c.toString());
nd7.setEtiqueta("Palabra_Reservada");
nd7.setValor(hac.toString());
nd8.setEtiqueta("Palabra_Reservada");
nd8.setValor(fnpara.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.AddHijos((Nodo1) nd8);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
nd8.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CICLO_WHILE ::= prMientras CONDICIONMIENTRAS prHacer INSTRUCCIONES prFinMientras 
            {
              Object RESULT =null;
		int mienleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int mienright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String mien = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int hacleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int hacright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String hac = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fnmientrasleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fnmientrasright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String fnmientras = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT += "while" + con + "\n"; 

Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(mien.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(con.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(hac.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(fnmientras.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CICLO_WHILE ::= prMientras CONDICIONMIENTRAS prHacer prFinMientras 
            {
              Object RESULT =null;
		int mienleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int mienright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String mien = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int hacleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int hacright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String hac = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fnmientrasleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fnmientrasright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String fnmientras = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 codigoTraducidoPython += "while" + con + "\n"; 
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(mien.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(con.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(hac.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(fnmientras.toString());
nd.setValor("");
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;


              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONDICIONMIENTRAS ::= tvariable prEsIGUAL EXPRESIONARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "("+ a + "==" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONDICIONMIENTRAS ::= tvariable prMayorIgual EXPRESIONARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "("+ a + ">=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CONDICIONMIENTRAS ::= tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "while" + "("+ a + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONDICIONMIENTRAS ::= tvariable prMenorIgual EXPRESIONARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "while" + "("+ a + "<=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONDICIONMIENTRAS ::= tvariable prMayor EXPRESIONARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "while" + "("+ a + ">" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONDICIONMIENTRAS ::= tvariable prMenor EXPRESIONARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "while" + "("+ a + "<" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONDICIONMIENTRAS ::= tvariable prOR numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "while" + "("+ a + "or" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONDICIONMIENTRAS ::= tvariable prAND numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  RESULT = "while" + "("+ a + "and" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONDICIONMIENTRAS ::= prNOT EXPRESIONARITMETICA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
  RESULT = "while" + "(" + "not" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CICLO_DOWHILE ::= prRepetir INSTRUCCIONES prHastaQue CONDICIONMIENTRAS 
            {
              Object RESULT =null;
		int repleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int repright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String rep = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int hastqleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int hastqright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String hastq = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(rep.toString());
nd2.setEtiqueta("Palabra_Reservada");
nd2.setValor(hastq.toString());
nd3.setEtiqueta("Condicion");
nd3.setValor(con.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_DOWHILE",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CICLO_DOWHILE ::= prRepetir prHastaQue CONDICIONMIENTRAS 
            {
              Object RESULT =null;
		int repleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int repright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String rep = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int hastqleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int hastqright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String hastq = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(rep.toString());
nd2.setEtiqueta("Palabra_Reservada");
nd2.setValor(hastq.toString());
nd3.setEtiqueta("Condicion");
nd3.setValor(con.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;


              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_DOWHILE",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // RETORNO ::= prRetornar EXPRESIONARITMETICA tpuntoycoma 
            {
              Object RESULT =null;
		int retrnleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int retrnright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String retrn = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT += "\treturn " + b.toString() + "\n";
codigoTraducidoPython += RESULT;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(retrn.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(b.toString());
nd3.setEtiqueta("Puntocoma");
nd3.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // METODO ::= prMetodo tvariable INSTRUCCIONES prFinMetodo 
            {
              Object RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String met = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fnmetodoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fnmetodoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String fnmetodo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 b = b.replace("_",""); RESULT= "\tdef " + b + "():" + "\n" + in + "\n";
pruebas= "\tdef " + b + "():" + "\n" + in + "\n";
codigoTraducidoPython += pruebas;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(met.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(b.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(fnmetodo.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;


              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // METODO ::= prMetodo tvariable prConParametros tparA LISTAPARAMETROS tparC INSTRUCCIONES prFinMetodo 
            {
              Object RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		String met = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int cnparaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int cnpararight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String cnpara = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String parA = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String parC = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fnmetodoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fnmetodoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String fnmetodo = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
b = b.replace("_","");
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(met.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(b.toString());
nd3.setEtiqueta("Palabra_Reservada");
nd3.setValor(cnpara.toString());
nd4.setEtiqueta("Parentesis");
nd4.setValor(parA.toString());
nd5.setEtiqueta("Parametros");
nd5.setValor(ls.toString());
nd6.setEtiqueta("Parentesis");
nd6.setValor(parC.toString());
nd7.setEtiqueta("Palabra_Reservada");
nd7.setValor(fnmetodo.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd7);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LISTAPARAMETROS ::= tvariable prNumero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); RESULT=  a + b; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LISTAPARAMETROS ::= tvariable prCadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); RESULT=  a + b; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LISTAPARAMETROS ::= tvariable prCaracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); RESULT=  a + b; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LISTAPARAMETROS ::= tvariable prBoolean 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); RESULT= a + b; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LISTAPARAMETROS ::= LISTAPARAMETROS tcoma tvariable prNumero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		c = c.replace("_",""); RESULT= a + b +c +d; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LISTAPARAMETROS ::= LISTAPARAMETROS tcoma tvariable prCadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		c.replace("_",""); RESULT= a + b +c +d; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LISTAPARAMETROS ::= LISTAPARAMETROS tcoma tvariable prCaracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 c.replace("_",""); RESULT= a + b +c +d; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LISTAPARAMETROS ::= LISTAPARAMETROS tcoma tvariable prBoolean 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 c.replace("_",""); RESULT= a + b +c +d; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FUNCIONES ::= prFuncion tvariable TIPODATO INSTRUCCIONES prFinFuncion 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fnfuncionleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fnfuncionright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String fnfuncion = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_",""); 
RESULT= "def " + a + "():" + "\n" + in + "\n" + "return " + "\n" ;  
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
nd.setEtiqueta("Entrada Funcion");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(func.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Tipo Dato");
nd3.setValor(tdato.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(fnfuncion.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd4);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // FUNCIONES ::= prFuncion tvariable TIPODATO prConParametros tparA LISTAPARAMETROS tparC INSTRUCCIONES prFinFuncion 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)).value;
		int tdatoleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int tdatoright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Object tdato = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int cnparaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int cnpararight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String cnpara = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String parA = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String parC = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int fnfuncionleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int fnfuncionright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String fnfuncion = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_",""); 
RESULT= "def " + a + "(" + b + "):" + "\n" + in + "\n" + "return " + "\n" ;  
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
Nodo1 nd7 = new Nodo1();
Nodo1 nd8 = new Nodo1();
nd.setEtiqueta("Entrada Funcion");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(func.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Tipo Dato");
nd3.setValor(tdato.toString());
nd4.setEtiqueta("Palabra_Reservada");
nd4.setValor(cnpara.toString());
nd5.setEtiqueta("Parentesis");
nd5.setValor(parA.toString());
nd6.setEtiqueta("Parametros");
nd6.setValor(b.toString());
nd7.setEtiqueta("Parentesis");
nd7.setValor(parC.toString());
nd8.setEtiqueta("Palabra_Reservada");
nd8.setValor(fnfuncion.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.AddHijos((Nodo1) nd7);
nd.AddHijos((Nodo1) in);
nd.AddHijos((Nodo1) nd8);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
nd7.setIdNod(parser.cont);
nd8.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPODATO ::= prNumero 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= b; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TIPODATO ::= prCadena 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= b; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TIPODATO ::= prCaracter 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= b; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIPODATO ::= prBoolean 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= b; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",42, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EJECUTAR ::= prEjecutar tvariable tparA tparC tpuntoycoma 
            {
              Object RESULT =null;
		int ejecleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int ejecright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String ejec = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String parA = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String parC = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_","");  RESULT= "\t" + a + parA + parC;
codigoTraducidoPython += RESULT;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada Ejecutar");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(ejec.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Parentesis");
nd3.setValor(parA.toString());
nd4.setEtiqueta("Parentesis");
nd4.setValor(parC.toString());
nd5.setEtiqueta("puntocoma");
nd5.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EJECUTAR ::= prEjecutar tvariable tparA LISTAPARAMETROS tparC tpuntoycoma 
            {
              Object RESULT =null;
		int ejecleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int ejecright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String ejec = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String parA = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String parC = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_",""); RESULT= "\t" + a + parA + c + parC;
codigoTraducidoPython += RESULT;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
Nodo1 nd6 = new Nodo1();
nd.setEtiqueta("Entrada Ejecutar");
nd1.setEtiqueta("Palabra_Rerservada");
nd1.setValor(ejec.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Parentesis");
nd3.setValor(parA.toString());
nd4.setEtiqueta("Parametros");
nd4.setValor(c.toString());
nd5.setEtiqueta("Parentesis");
nd5.setValor(parC.toString());
nd6.setEtiqueta("puntocoma");
nd6.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.AddHijos((Nodo1) nd6);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
nd6.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // IMPRIMIR ::= prImprimir tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  RESULT= "\tprint" + "(" +  n + ")" + "\n";
//codigoTraducidoPython += "print" + "(" +  n + ")" + "\n";
//codigoTraducidoPython += RESULT;
n = n.replace("\"","");
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(n.toString());
nd3.setEtiqueta("Puntocoma");
nd3.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // IMPRIMIR ::= prImprimir tvariable tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  b = b.replace("_", ""); RESULT= "\tprint" + "(" +  b + ")" + "\n";  
//codigoTraducidoPython += "print" + "(" + b + ")" + "\n";
codigoTraducidoPython += RESULT;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("variable");
nd2.setValor(b.toString());
nd3.setEtiqueta("Puntocoma");
nd3.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // IMPRIMIR ::= prImprimir tparA tvariable tparC tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String parA = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String parC = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  c = c.replace("_", ""); RESULT= "\tprint" + "(" +  c + ")" + "\n"; 
//codigoTraducidoPython += "print" + parA.toString() + c + parC.toString() + "\n";
codigoTraducidoPython += RESULT;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("Parentesis");
nd2.setValor(parA.toString());
nd3.setEtiqueta("variable");
nd3.setValor(c.toString());
nd4.setEtiqueta("Parentesis");
nd4.setValor(parC.toString());
nd5.setEtiqueta("Puntocoma");
nd5.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;


              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // IMPRIMIR ::= prImprimir tparA tcadena tparC tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String parA = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String parC = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= "\tprint" + "(" +  d + ")" + "\n";
//codigoTraducidoPython += "print" + parA.toString() + d + parC.toString() + "\n"; 
codigoTraducidoPython += RESULT;
d = d.replace("\"","");
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("Parentesis");
nd2.setValor(parA.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(d.toString());
nd4.setEtiqueta("Parentesis");
nd4.setValor(parC.toString());
nd5.setEtiqueta("Puntocoma");
nd5.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // IMPRIMIRNL ::= prImprimirNl tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= "\tprint" + "(" + n + ")" + "\n";
//codigoTraducidoPython += "print" + "(" + n + ")" + "\n";
//codigoTraducidoPython += RESULT;
n = n.replace("\"","");
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("Expresion");
nd2.setValor(n.toString());
nd3.setEtiqueta("Puntocoma");
nd3.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRNL",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // IMPRIMIRNL ::= prImprimirNl tvariable tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  a = a.replace("_", ""); RESULT= "\tprint" + "(" + a + ")" + "\n";
//codigoTraducidoPython += "print" + "(" + a + ")" + "\n";
codigoTraducidoPython += RESULT;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("Variable");
nd2.setValor(a.toString());
nd3.setEtiqueta("Puntocoma");
nd3.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRNL",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // IMPRIMIRNL ::= prImprimirNl tparA tvariable tparC tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String parA = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String parC = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  a = a.replace("_", ""); RESULT= "\tprint" + "(" + a + ")" + "\n";
//codigoTraducidoPython += "print" + parA.toString() + a + parC.toString() + "\n";
codigoTraducidoPython += RESULT;
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("Parentesis");
nd2.setValor(parA.toString());
nd3.setEtiqueta("variable");
nd3.setValor(a.toString());
nd4.setEtiqueta("Parentesis");
nd4.setValor(parC.toString());
nd5.setEtiqueta("Puntocoma");
nd5.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;


              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRNL",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // IMPRIMIRNL ::= prImprimirNl tparA tcadena tparC tpuntoycoma 
            {
              Object RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int parAleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int parAright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String parA = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int parCleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int parCright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String parC = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 RESULT= "\tprint" + "(" + a + ")" + "\n";
//codigoTraducidoPython += "print" + parA.toString() + a + parC.toString() + "\n";
codigoTraducidoPython += RESULT;
a = a.replace("\"","");
Nodo1 nd = new Nodo1();
Nodo1 nd1 = new Nodo1();
Nodo1 nd2 = new Nodo1();
Nodo1 nd3 = new Nodo1();
Nodo1 nd4 = new Nodo1();
Nodo1 nd5 = new Nodo1();
nd.setEtiqueta("Entrada");
nd1.setEtiqueta("Palabra_Reservada");
nd1.setValor(pri.toString());
nd2.setEtiqueta("Parentesis");
nd2.setValor(parA.toString());
nd3.setEtiqueta("Expresion");
nd3.setValor(a.toString());
nd4.setEtiqueta("Parentesis");
nd4.setValor(parC.toString());
nd5.setEtiqueta("Puntocoma");
nd5.setValor(comaa.toString());
nd.AddHijos((Nodo1) nd1);
nd.AddHijos((Nodo1) nd2);
nd.AddHijos((Nodo1) nd3);
nd.AddHijos((Nodo1) nd4);
nd.AddHijos((Nodo1) nd5);
nd.setIdNod(parser.cont);
nd1.setIdNod(parser.cont);
nd2.setIdNod(parser.cont);
nd3.setIdNod(parser.cont);
nd4.setIdNod(parser.cont);
nd5.setIdNod(parser.cont);
parser.cont++;
RESULT= nd;
 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRNL",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
