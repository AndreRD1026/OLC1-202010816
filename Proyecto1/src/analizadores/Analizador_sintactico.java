
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.io.IOException;
import java.io.PrintWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\037\004\000\002\037" +
    "\002\000\002\040\005\000\002\040\004\000\002\027\011" +
    "\000\002\027\011\000\002\030\011\000\002\030\011\000" +
    "\002\031\011\000\002\032\011\000\002\033\011\000\002" +
    "\033\011\000\002\034\011\000\002\034\011\000\002\035" +
    "\011\000\002\036\011\000\002\041\011\000\002\041\011" +
    "\000\002\060\005\000\002\060\005\000\002\060\005\000" +
    "\002\060\005\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\003\000\002\061" +
    "\005\000\002\061\005\000\002\061\005\000\002\061\005" +
    "\000\002\061\005\000\002\061\005\000\002\062\003\000" +
    "\002\062\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\044\006" +
    "\000\002\044\006\000\002\045\006\000\002\045\006\000" +
    "\002\046\006\000\002\047\006\000\002\050\006\000\002" +
    "\050\006\000\002\051\006\000\002\051\006\000\002\052" +
    "\006\000\002\053\006\000\002\011\007\000\002\011\011" +
    "\000\002\011\015\000\002\011\012\000\002\042\005\000" +
    "\002\042\005\000\002\042\005\000\002\042\003\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\012\007\000\002\014\006" +
    "\000\002\015\013\000\002\015\013\000\002\015\013\000" +
    "\002\015\013\000\002\015\013\000\002\015\013\000\002" +
    "\015\013\000\002\015\013\000\002\015\013\000\002\015" +
    "\007\000\002\016\007\000\002\016\006\000\002\056\005" +
    "\000\002\056\005\000\002\056\005\000\002\056\003\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\005\000\002\056\005\000\002\017\006\000\002\017" +
    "\005\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\021\006\000\002\021\011\000" +
    "\002\024\007\000\002\025\005\000\002\025\005\000\002" +
    "\025\007\000\002\025\007\000\002\026\005\000\002\026" +
    "\005\000\002\026\007\000\002\026\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\004\032\004\001\002\000\036\003\037\004" +
    "\014\026\uffe5\043\007\046\044\061\045\064\063\070\051" +
    "\072\060\074\016\075\012\102\022\103\032\104\035\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\004\346\044\uffe5\001\002\000\056\003\uffbf\004" +
    "\uffbf\026\uffbf\043\uffbf\046\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\061\uffbf\064\uffbf\066\uffbf\070\uffbf\071\uffbf\072\uffbf\073" +
    "\uffbf\074\uffbf\075\uffbf\077\uffbf\102\uffbf\103\uffbf\104\uffbf" +
    "\105\uffbf\001\002\000\056\003\ufff2\004\ufff2\026\ufff2\043" +
    "\ufff2\046\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\064\ufff2" +
    "\066\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075" +
    "\ufff2\077\ufff2\102\ufff2\103\ufff2\104\ufff2\105\ufff2\001\002" +
    "\000\004\004\336\001\002\000\056\003\ufff7\004\ufff7\026" +
    "\ufff7\043\ufff7\046\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7" +
    "\064\ufff7\066\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074" +
    "\ufff7\075\ufff7\077\ufff7\102\ufff7\103\ufff7\104\ufff7\105\ufff7" +
    "\001\002\000\006\007\317\026\316\001\002\000\056\003" +
    "\ufff5\004\ufff5\026\ufff5\043\ufff5\046\ufff5\056\ufff5\057\ufff5" +
    "\060\ufff5\061\ufff5\064\ufff5\066\ufff5\070\ufff5\071\ufff5\072" +
    "\ufff5\073\ufff5\074\ufff5\075\ufff5\077\ufff5\102\ufff5\103\ufff5" +
    "\104\ufff5\105\ufff5\001\002\000\010\004\145\011\314\012" +
    "\312\001\002\000\054\003\037\004\014\026\uffe5\043\007" +
    "\046\044\056\ufffe\057\ufffe\060\ufffe\061\045\064\063\066" +
    "\ufffe\070\051\071\ufffe\072\060\074\016\075\012\077\ufffe" +
    "\102\022\103\032\104\035\105\ufffe\001\002\000\004\026" +
    "\273\001\002\000\056\003\ufff1\004\ufff1\026\ufff1\043\ufff1" +
    "\046\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\064\ufff1\066" +
    "\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1" +
    "\077\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1\001\002\000" +
    "\004\004\267\001\002\000\004\105\266\001\002\000\056" +
    "\003\ufff9\004\ufff9\026\ufff9\043\ufff9\046\ufff9\056\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\064\ufff9\066\ufff9\070\ufff9\071\ufff9" +
    "\072\ufff9\073\ufff9\074\ufff9\075\ufff9\077\ufff9\102\ufff9\103" +
    "\ufff9\104\ufff9\105\ufff9\001\002\000\056\003\uffe9\004\uffe9" +
    "\026\uffe9\043\uffe9\046\uffe9\056\uffe9\057\uffe9\060\uffe9\061" +
    "\uffe9\064\uffe9\066\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9" +
    "\074\uffe9\075\uffe9\077\uffe9\102\uffe9\103\uffe9\104\uffe9\105" +
    "\uffe9\001\002\000\056\003\uffc3\004\uffc3\026\uffc3\043\uffc3" +
    "\046\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\064\uffc3\066" +
    "\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3" +
    "\077\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3\001\002\000" +
    "\056\003\ufff4\004\ufff4\026\ufff4\043\ufff4\046\ufff4\056\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\064\ufff4\066\ufff4\070\ufff4\071" +
    "\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\077\ufff4\102\ufff4" +
    "\103\ufff4\104\ufff4\105\ufff4\001\002\000\056\003\uffef\004" +
    "\uffef\026\uffef\043\uffef\046\uffef\056\uffef\057\uffef\060\uffef" +
    "\061\uffef\064\uffef\066\uffef\070\uffef\071\uffef\072\uffef\073" +
    "\uffef\074\uffef\075\uffef\077\uffef\102\uffef\103\uffef\104\uffef" +
    "\105\uffef\001\002\000\056\003\uffea\004\uffea\026\uffea\043" +
    "\uffea\046\uffea\056\uffea\057\uffea\060\uffea\061\uffea\064\uffea" +
    "\066\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075" +
    "\uffea\077\uffea\102\uffea\103\uffea\104\uffea\105\uffea\001\002" +
    "\000\010\004\254\013\253\021\255\001\002\000\056\003" +
    "\uffe8\004\uffe8\026\uffe8\043\uffe8\046\uffe8\056\uffe8\057\uffe8" +
    "\060\uffe8\061\uffe8\064\uffe8\066\uffe8\070\uffe8\071\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\075\uffe8\077\uffe8\102\uffe8\103\uffe8" +
    "\104\uffe8\105\uffe8\001\002\000\056\003\ufffb\004\ufffb\026" +
    "\ufffb\043\ufffb\046\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb" +
    "\064\ufffb\066\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074" +
    "\ufffb\075\ufffb\077\ufffb\102\ufffb\103\ufffb\104\ufffb\105\ufffb" +
    "\001\002\000\010\004\240\013\241\021\242\001\002\000" +
    "\056\003\ufff6\004\ufff6\026\ufff6\043\ufff6\046\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\064\ufff6\066\ufff6\070\ufff6\071" +
    "\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\077\ufff6\102\ufff6" +
    "\103\ufff6\104\ufff6\105\ufff6\001\002\000\004\010\237\001" +
    "\002\000\056\003\uffbd\004\uffbd\026\uffbd\043\uffbd\046\uffbd" +
    "\056\uffbd\057\uffbd\060\uffbd\061\uffbd\064\uffbd\066\uffbd\070" +
    "\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\077\uffbd" +
    "\102\uffbd\103\uffbd\104\uffbd\105\uffbd\001\002\000\056\003" +
    "\uffed\004\uffed\026\uffed\043\uffed\046\uffed\056\uffed\057\uffed" +
    "\060\uffed\061\uffed\064\uffed\066\uffed\070\uffed\071\uffed\072" +
    "\uffed\073\uffed\074\uffed\075\uffed\077\uffed\102\uffed\103\uffed" +
    "\104\uffed\105\uffed\001\002\000\056\003\ufffc\004\ufffc\026" +
    "\ufffc\043\ufffc\046\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc" +
    "\064\ufffc\066\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074" +
    "\ufffc\075\ufffc\077\ufffc\102\ufffc\103\ufffc\104\ufffc\105\ufffc" +
    "\001\002\000\056\003\uffbe\004\uffbe\026\uffbe\043\uffbe\046" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\064\uffbe\066\uffbe" +
    "\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\077" +
    "\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\001\002\000\004" +
    "\004\145\001\002\000\004\004\205\001\002\000\056\003" +
    "\uffc0\004\uffc0\026\uffc0\043\uffc0\046\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\064\uffc0\066\uffc0\070\uffc0\071\uffc0\072" +
    "\uffc0\073\uffc0\074\uffc0\075\uffc0\077\uffc0\102\uffc0\103\uffc0" +
    "\104\uffc0\105\uffc0\001\002\000\056\003\uffbc\004\uffbc\026" +
    "\uffbc\043\uffbc\046\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\064\uffbc\066\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074" +
    "\uffbc\075\uffbc\077\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc" +
    "\001\002\000\056\003\uffee\004\uffee\026\uffee\043\uffee\046" +
    "\uffee\056\uffee\057\uffee\060\uffee\061\uffee\064\uffee\066\uffee" +
    "\070\uffee\071\uffee\072\uffee\073\uffee\074\uffee\075\uffee\077" +
    "\uffee\102\uffee\103\uffee\104\uffee\105\uffee\001\002\000\004" +
    "\004\164\001\002\000\056\003\uffec\004\uffec\026\uffec\043" +
    "\uffec\046\uffec\056\uffec\057\uffec\060\uffec\061\uffec\064\uffec" +
    "\066\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075" +
    "\uffec\077\uffec\102\uffec\103\uffec\104\uffec\105\uffec\001\002" +
    "\000\056\003\ufffd\004\ufffd\026\ufffd\043\ufffd\046\ufffd\056" +
    "\ufffd\057\ufffd\060\ufffd\061\ufffd\064\ufffd\066\ufffd\070\ufffd" +
    "\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\077\ufffd\102" +
    "\ufffd\103\ufffd\104\ufffd\105\ufffd\001\002\000\056\003\uffeb" +
    "\004\uffeb\026\uffeb\043\uffeb\046\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\061\uffeb\064\uffeb\066\uffeb\070\uffeb\071\uffeb\072\uffeb" +
    "\073\uffeb\074\uffeb\075\uffeb\077\uffeb\102\uffeb\103\uffeb\104" +
    "\uffeb\105\uffeb\001\002\000\056\003\ufffa\004\ufffa\026\ufffa" +
    "\043\ufffa\046\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\064" +
    "\ufffa\066\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa" +
    "\075\ufffa\077\ufffa\102\ufffa\103\ufffa\104\ufffa\105\ufffa\001" +
    "\002\000\056\003\uffc2\004\uffc2\026\uffc2\043\uffc2\046\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\061\uffc2\064\uffc2\066\uffc2\070" +
    "\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\077\uffc2" +
    "\102\uffc2\103\uffc2\104\uffc2\105\uffc2\001\002\000\056\003" +
    "\uffe7\004\uffe7\026\uffe7\043\uffe7\046\uffe7\056\uffe7\057\uffe7" +
    "\060\uffe7\061\uffe7\064\uffe7\066\uffe7\070\uffe7\071\uffe7\072" +
    "\uffe7\073\uffe7\074\uffe7\075\uffe7\077\uffe7\102\uffe7\103\uffe7" +
    "\104\uffe7\105\uffe7\001\002\000\040\003\037\004\014\026" +
    "\uffe5\043\007\046\044\061\045\064\063\070\051\072\060" +
    "\073\144\074\016\075\012\102\022\103\032\104\035\001" +
    "\002\000\056\003\ufff8\004\ufff8\026\ufff8\043\ufff8\046\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\061\ufff8\064\ufff8\066\ufff8\070" +
    "\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\077\ufff8" +
    "\102\ufff8\103\ufff8\104\ufff8\105\ufff8\001\002\000\056\003" +
    "\ufff3\004\ufff3\026\ufff3\043\ufff3\046\ufff3\056\ufff3\057\ufff3" +
    "\060\ufff3\061\ufff3\064\ufff3\066\ufff3\070\ufff3\071\ufff3\072" +
    "\ufff3\073\ufff3\074\ufff3\075\ufff3\077\ufff3\102\ufff3\103\ufff3" +
    "\104\ufff3\105\ufff3\001\002\000\004\004\065\001\002\000" +
    "\056\003\uffc1\004\uffc1\026\uffc1\043\uffc1\046\uffc1\056\uffc1" +
    "\057\uffc1\060\uffc1\061\uffc1\064\uffc1\066\uffc1\070\uffc1\071" +
    "\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\077\uffc1\102\uffc1" +
    "\103\uffc1\104\uffc1\105\uffc1\001\002\000\004\026\066\001" +
    "\002\000\012\004\067\011\072\012\070\065\071\001\002" +
    "\000\004\065\126\001\002\000\004\065\111\001\002\000" +
    "\004\062\110\001\002\000\004\065\073\001\002\000\010" +
    "\004\074\011\076\012\075\001\002\000\004\062\105\001" +
    "\002\000\004\062\102\001\002\000\004\062\077\001\002" +
    "\000\036\003\037\004\014\026\uffe5\043\007\046\044\061" +
    "\045\064\063\070\051\072\060\074\016\075\012\102\022" +
    "\103\032\104\035\001\002\000\004\066\101\001\002\000" +
    "\056\003\uff9d\004\uff9d\026\uff9d\043\uff9d\046\uff9d\056\uff9d" +
    "\057\uff9d\060\uff9d\061\uff9d\064\uff9d\066\uff9d\070\uff9d\071" +
    "\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\077\uff9d\102\uff9d" +
    "\103\uff9d\104\uff9d\105\uff9d\001\002\000\036\003\037\004" +
    "\014\026\uffe5\043\007\046\044\061\045\064\063\070\051" +
    "\072\060\074\016\075\012\102\022\103\032\104\035\001" +
    "\002\000\004\066\104\001\002\000\056\003\uff9a\004\uff9a" +
    "\026\uff9a\043\uff9a\046\uff9a\056\uff9a\057\uff9a\060\uff9a\061" +
    "\uff9a\064\uff9a\066\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a" +
    "\074\uff9a\075\uff9a\077\uff9a\102\uff9a\103\uff9a\104\uff9a\105" +
    "\uff9a\001\002\000\036\003\037\004\014\026\uffe5\043\007" +
    "\046\044\061\045\064\063\070\051\072\060\074\016\075" +
    "\012\102\022\103\032\104\035\001\002\000\004\066\107" +
    "\001\002\000\056\003\uff9f\004\uff9f\026\uff9f\043\uff9f\046" +
    "\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\064\uff9f\066\uff9f" +
    "\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\077" +
    "\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\001\002\000\056" +
    "\003\uff97\004\uff97\026\uff97\043\uff97\046\uff97\056\uff97\057" +
    "\uff97\060\uff97\061\uff97\064\uff97\066\uff97\070\uff97\071\uff97" +
    "\072\uff97\073\uff97\074\uff97\075\uff97\077\uff97\102\uff97\103" +
    "\uff97\104\uff97\105\uff97\001\002\000\010\004\112\011\114" +
    "\012\113\001\002\000\004\062\123\001\002\000\004\062" +
    "\120\001\002\000\004\062\115\001\002\000\036\003\037" +
    "\004\014\026\uffe5\043\007\046\044\061\045\064\063\070" +
    "\051\072\060\074\016\075\012\102\022\103\032\104\035" +
    "\001\002\000\004\066\117\001\002\000\056\003\uff99\004" +
    "\uff99\026\uff99\043\uff99\046\uff99\056\uff99\057\uff99\060\uff99" +
    "\061\uff99\064\uff99\066\uff99\070\uff99\071\uff99\072\uff99\073" +
    "\uff99\074\uff99\075\uff99\077\uff99\102\uff99\103\uff99\104\uff99" +
    "\105\uff99\001\002\000\036\003\037\004\014\026\uffe5\043" +
    "\007\046\044\061\045\064\063\070\051\072\060\074\016" +
    "\075\012\102\022\103\032\104\035\001\002\000\004\066" +
    "\122\001\002\000\056\003\uff98\004\uff98\026\uff98\043\uff98" +
    "\046\uff98\056\uff98\057\uff98\060\uff98\061\uff98\064\uff98\066" +
    "\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98" +
    "\077\uff98\102\uff98\103\uff98\104\uff98\105\uff98\001\002\000" +
    "\036\003\037\004\014\026\uffe5\043\007\046\044\061\045" +
    "\064\063\070\051\072\060\074\016\075\012\102\022\103" +
    "\032\104\035\001\002\000\004\066\125\001\002\000\056" +
    "\003\uff9c\004\uff9c\026\uff9c\043\uff9c\046\uff9c\056\uff9c\057" +
    "\uff9c\060\uff9c\061\uff9c\064\uff9c\066\uff9c\070\uff9c\071\uff9c" +
    "\072\uff9c\073\uff9c\074\uff9c\075\uff9c\077\uff9c\102\uff9c\103" +
    "\uff9c\104\uff9c\105\uff9c\001\002\000\010\004\127\011\131" +
    "\012\130\001\002\000\004\062\140\001\002\000\004\062" +
    "\135\001\002\000\004\062\132\001\002\000\036\003\037" +
    "\004\014\026\uffe5\043\007\046\044\061\045\064\063\070" +
    "\051\072\060\074\016\075\012\102\022\103\032\104\035" +
    "\001\002\000\004\066\134\001\002\000\056\003\uff9e\004" +
    "\uff9e\026\uff9e\043\uff9e\046\uff9e\056\uff9e\057\uff9e\060\uff9e" +
    "\061\uff9e\064\uff9e\066\uff9e\070\uff9e\071\uff9e\072\uff9e\073" +
    "\uff9e\074\uff9e\075\uff9e\077\uff9e\102\uff9e\103\uff9e\104\uff9e" +
    "\105\uff9e\001\002\000\036\003\037\004\014\026\uffe5\043" +
    "\007\046\044\061\045\064\063\070\051\072\060\074\016" +
    "\075\012\102\022\103\032\104\035\001\002\000\004\066" +
    "\137\001\002\000\056\003\uff9b\004\uff9b\026\uff9b\043\uff9b" +
    "\046\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\064\uff9b\066" +
    "\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b" +
    "\077\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\001\002\000" +
    "\036\003\037\004\014\026\uffe5\043\007\046\044\061\045" +
    "\064\063\070\051\072\060\074\016\075\012\102\022\103" +
    "\032\104\035\001\002\000\004\066\142\001\002\000\056" +
    "\003\uffa0\004\uffa0\026\uffa0\043\uffa0\046\uffa0\056\uffa0\057" +
    "\uffa0\060\uffa0\061\uffa0\064\uffa0\066\uffa0\070\uffa0\071\uffa0" +
    "\072\uffa0\073\uffa0\074\uffa0\075\uffa0\077\uffa0\102\uffa0\103" +
    "\uffa0\104\uffa0\105\uffa0\001\002\000\004\073\162\001\002" +
    "\000\004\004\145\001\002\000\066\003\uffa8\004\uffa8\026" +
    "\uffa8\043\uffa8\046\uffa8\051\150\052\151\053\147\055\uffa8" +
    "\056\uffa8\057\uffa8\060\uffa8\061\uffa8\064\uffa8\066\uffa8\070" +
    "\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\077\uffa8" +
    "\102\uffa8\103\uffa8\104\uffa8\105\uffa8\001\002\000\056\003" +
    "\uff8a\004\uff8a\026\uff8a\043\uff8a\046\uff8a\056\uff8a\057\uff8a" +
    "\060\uff8a\061\uff8a\064\uff8a\066\uff8a\070\uff8a\071\uff8a\072" +
    "\uff8a\073\uff8a\074\uff8a\075\uff8a\077\uff8a\102\uff8a\103\uff8a" +
    "\104\uff8a\105\uff8a\001\002\000\006\004\160\011\161\001" +
    "\002\000\010\004\155\011\157\012\156\001\002\000\010" +
    "\004\152\011\154\012\153\001\002\000\060\003\uffa7\004" +
    "\uffa7\026\uffa7\043\uffa7\046\uffa7\055\uffa7\056\uffa7\057\uffa7" +
    "\060\uffa7\061\uffa7\064\uffa7\066\uffa7\070\uffa7\071\uffa7\072" +
    "\uffa7\073\uffa7\074\uffa7\075\uffa7\077\uffa7\102\uffa7\103\uffa7" +
    "\104\uffa7\105\uffa7\001\002\000\060\003\uffa3\004\uffa3\026" +
    "\uffa3\043\uffa3\046\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\064\uffa3\066\uffa3\070\uffa3\071\uffa3\072\uffa3\073" +
    "\uffa3\074\uffa3\075\uffa3\077\uffa3\102\uffa3\103\uffa3\104\uffa3" +
    "\105\uffa3\001\002\000\060\003\uffa4\004\uffa4\026\uffa4\043" +
    "\uffa4\046\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\064\uffa4\066\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074" +
    "\uffa4\075\uffa4\077\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4" +
    "\001\002\000\060\003\uffa9\004\uffa9\026\uffa9\043\uffa9\046" +
    "\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\064\uffa9" +
    "\066\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075" +
    "\uffa9\077\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\001\002" +
    "\000\060\003\uffa5\004\uffa5\026\uffa5\043\uffa5\046\uffa5\055" +
    "\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\064\uffa5\066\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\077" +
    "\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\001\002\000\060" +
    "\003\uffa6\004\uffa6\026\uffa6\043\uffa6\046\uffa6\055\uffa6\056" +
    "\uffa6\057\uffa6\060\uffa6\061\uffa6\064\uffa6\066\uffa6\070\uffa6" +
    "\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\077\uffa6\102" +
    "\uffa6\103\uffa6\104\uffa6\105\uffa6\001\002\000\060\003\uffab" +
    "\004\uffab\026\uffab\043\uffab\046\uffab\055\uffab\056\uffab\057" +
    "\uffab\060\uffab\061\uffab\064\uffab\066\uffab\070\uffab\071\uffab" +
    "\072\uffab\073\uffab\074\uffab\075\uffab\077\uffab\102\uffab\103" +
    "\uffab\104\uffab\105\uffab\001\002\000\060\003\uffaa\004\uffaa" +
    "\026\uffaa\043\uffaa\046\uffaa\055\uffaa\056\uffaa\057\uffaa\060" +
    "\uffaa\061\uffaa\064\uffaa\066\uffaa\070\uffaa\071\uffaa\072\uffaa" +
    "\073\uffaa\074\uffaa\075\uffaa\077\uffaa\102\uffaa\103\uffaa\104" +
    "\uffaa\105\uffaa\001\002\000\004\004\145\001\002\000\056" +
    "\003\uff8b\004\uff8b\026\uff8b\043\uff8b\046\uff8b\056\uff8b\057" +
    "\uff8b\060\uff8b\061\uff8b\064\uff8b\066\uff8b\070\uff8b\071\uff8b" +
    "\072\uff8b\073\uff8b\074\uff8b\075\uff8b\077\uff8b\102\uff8b\103" +
    "\uff8b\104\uff8b\105\uff8b\001\002\000\012\051\173\052\174" +
    "\053\172\062\uff91\001\002\000\004\062\166\001\002\000" +
    "\040\003\037\004\014\026\uffe5\043\007\046\044\061\045" +
    "\064\063\070\051\071\167\072\060\074\016\075\012\102" +
    "\022\103\032\104\035\001\002\000\056\003\uff95\004\uff95" +
    "\026\uff95\043\uff95\046\uff95\056\uff95\057\uff95\060\uff95\061" +
    "\uff95\064\uff95\066\uff95\070\uff95\071\uff95\072\uff95\073\uff95" +
    "\074\uff95\075\uff95\077\uff95\102\uff95\103\uff95\104\uff95\105" +
    "\uff95\001\002\000\004\071\171\001\002\000\056\003\uff96" +
    "\004\uff96\026\uff96\043\uff96\046\uff96\056\uff96\057\uff96\060" +
    "\uff96\061\uff96\064\uff96\066\uff96\070\uff96\071\uff96\072\uff96" +
    "\073\uff96\074\uff96\075\uff96\077\uff96\102\uff96\103\uff96\104" +
    "\uff96\105\uff96\001\002\000\006\004\203\011\204\001\002" +
    "\000\010\004\200\011\202\012\201\001\002\000\010\004" +
    "\175\011\177\012\176\001\002\000\004\062\uff90\001\002" +
    "\000\004\062\uff8c\001\002\000\004\062\uff8d\001\002\000" +
    "\004\062\uff92\001\002\000\004\062\uff8e\001\002\000\004" +
    "\062\uff8f\001\002\000\004\062\uff94\001\002\000\004\062" +
    "\uff93\001\002\000\004\062\206\001\002\000\004\063\207" +
    "\001\002\000\056\003\uffa1\004\uffa1\026\uffa1\043\uffa1\046" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\064\uffa1\066\uffa1" +
    "\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\077" +
    "\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\001\002\000\004" +
    "\055\211\001\002\000\036\003\037\004\014\026\uffe5\043" +
    "\007\046\044\061\045\064\063\070\051\072\060\074\016" +
    "\075\012\102\022\103\032\104\035\001\002\000\010\056" +
    "\214\057\215\060\216\001\002\000\004\060\234\001\002" +
    "\000\056\003\uffaf\004\uffaf\026\uffaf\043\uffaf\046\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\064\uffaf\066\uffaf\070\uffaf" +
    "\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\077\uffaf\102" +
    "\uffaf\103\uffaf\104\uffaf\105\uffaf\001\002\000\004\004\145" +
    "\001\002\000\036\003\037\004\014\026\uffe5\043\007\046" +
    "\044\061\045\064\063\070\051\072\060\074\016\075\012" +
    "\102\022\103\032\104\035\001\002\000\004\056\220\001" +
    "\002\000\056\003\uffae\004\uffae\026\uffae\043\uffae\046\uffae" +
    "\056\uffae\057\uffae\060\uffae\061\uffae\064\uffae\066\uffae\070" +
    "\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\077\uffae" +
    "\102\uffae\103\uffae\104\uffae\105\uffae\001\002\000\004\055" +
    "\222\001\002\000\036\003\037\004\014\026\uffe5\043\007" +
    "\046\044\061\045\064\063\070\051\072\060\074\016\075" +
    "\012\102\022\103\032\104\035\001\002\000\006\057\225" +
    "\060\226\001\002\000\004\060\uffa2\001\002\000\004\004" +
    "\145\001\002\000\036\003\037\004\014\026\uffe5\043\007" +
    "\046\044\061\045\064\063\070\051\072\060\074\016\075" +
    "\012\102\022\103\032\104\035\001\002\000\004\056\230" +
    "\001\002\000\056\003\uffad\004\uffad\026\uffad\043\uffad\046" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\064\uffad\066\uffad" +
    "\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad\077" +
    "\uffad\102\uffad\103\uffad\104\uffad\105\uffad\001\002\000\004" +
    "\055\232\001\002\000\036\003\037\004\014\026\uffe5\043" +
    "\007\046\044\061\045\064\063\070\051\072\060\074\016" +
    "\075\012\102\022\103\032\104\035\001\002\000\004\057" +
    "\225\001\002\000\036\003\037\004\014\026\uffe5\043\007" +
    "\046\044\061\045\064\063\070\051\072\060\074\016\075" +
    "\012\102\022\103\032\104\035\001\002\000\004\056\236" +
    "\001\002\000\056\003\uffac\004\uffac\026\uffac\043\uffac\046" +
    "\uffac\056\uffac\057\uffac\060\uffac\061\uffac\064\uffac\066\uffac" +
    "\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac\077" +
    "\uffac\102\uffac\103\uffac\104\uffac\105\uffac\001\002\000\056" +
    "\003\ufff0\004\ufff0\026\ufff0\043\ufff0\046\ufff0\056\ufff0\057" +
    "\ufff0\060\ufff0\061\ufff0\064\ufff0\066\ufff0\070\ufff0\071\ufff0" +
    "\072\ufff0\073\ufff0\074\ufff0\075\ufff0\077\ufff0\102\ufff0\103" +
    "\ufff0\104\ufff0\105\ufff0\001\002\000\004\010\252\001\002" +
    "\000\004\010\251\001\002\000\006\004\243\013\244\001" +
    "\002\000\004\022\247\001\002\000\004\022\245\001\002" +
    "\000\004\010\246\001\002\000\056\003\uff7b\004\uff7b\026" +
    "\uff7b\043\uff7b\046\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b" +
    "\064\uff7b\066\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b\074" +
    "\uff7b\075\uff7b\077\uff7b\102\uff7b\103\uff7b\104\uff7b\105\uff7b" +
    "\001\002\000\004\010\250\001\002\000\056\003\uff7c\004" +
    "\uff7c\026\uff7c\043\uff7c\046\uff7c\056\uff7c\057\uff7c\060\uff7c" +
    "\061\uff7c\064\uff7c\066\uff7c\070\uff7c\071\uff7c\072\uff7c\073" +
    "\uff7c\074\uff7c\075\uff7c\077\uff7c\102\uff7c\103\uff7c\104\uff7c" +
    "\105\uff7c\001\002\000\056\003\uff7e\004\uff7e\026\uff7e\043" +
    "\uff7e\046\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e\064\uff7e" +
    "\066\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075" +
    "\uff7e\077\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e\001\002" +
    "\000\056\003\uff7d\004\uff7d\026\uff7d\043\uff7d\046\uff7d\056" +
    "\uff7d\057\uff7d\060\uff7d\061\uff7d\064\uff7d\066\uff7d\070\uff7d" +
    "\071\uff7d\072\uff7d\073\uff7d\074\uff7d\075\uff7d\077\uff7d\102" +
    "\uff7d\103\uff7d\104\uff7d\105\uff7d\001\002\000\004\010\265" +
    "\001\002\000\004\010\264\001\002\000\006\004\256\013" +
    "\257\001\002\000\004\022\262\001\002\000\004\022\260" +
    "\001\002\000\004\010\261\001\002\000\056\003\uff7f\004" +
    "\uff7f\026\uff7f\043\uff7f\046\uff7f\056\uff7f\057\uff7f\060\uff7f" +
    "\061\uff7f\064\uff7f\066\uff7f\070\uff7f\071\uff7f\072\uff7f\073" +
    "\uff7f\074\uff7f\075\uff7f\077\uff7f\102\uff7f\103\uff7f\104\uff7f" +
    "\105\uff7f\001\002\000\004\010\263\001\002\000\056\003" +
    "\uff80\004\uff80\026\uff80\043\uff80\046\uff80\056\uff80\057\uff80" +
    "\060\uff80\061\uff80\064\uff80\066\uff80\070\uff80\071\uff80\072" +
    "\uff80\073\uff80\074\uff80\075\uff80\077\uff80\102\uff80\103\uff80" +
    "\104\uff80\105\uff80\001\002\000\056\003\uff81\004\uff81\026" +
    "\uff81\043\uff81\046\uff81\056\uff81\057\uff81\060\uff81\061\uff81" +
    "\064\uff81\066\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074" +
    "\uff81\075\uff81\077\uff81\102\uff81\103\uff81\104\uff81\105\uff81" +
    "\001\002\000\056\003\uff82\004\uff82\026\uff82\043\uff82\046" +
    "\uff82\056\uff82\057\uff82\060\uff82\061\uff82\064\uff82\066\uff82" +
    "\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82\077" +
    "\uff82\102\uff82\103\uff82\104\uff82\105\uff82\001\002\000\004" +
    "\002\000\001\002\000\004\021\270\001\002\000\004\022" +
    "\271\001\002\000\004\010\272\001\002\000\056\003\uff83" +
    "\004\uff83\026\uff83\043\uff83\046\uff83\056\uff83\057\uff83\060" +
    "\uff83\061\uff83\064\uff83\066\uff83\070\uff83\071\uff83\072\uff83" +
    "\073\uff83\074\uff83\075\uff83\077\uff83\102\uff83\103\uff83\104" +
    "\uff83\105\uff83\001\002\000\016\005\300\011\301\012\276" +
    "\013\274\034\275\035\277\001\002\000\004\010\307\001" +
    "\002\000\004\010\306\001\002\000\004\010\305\001\002" +
    "\000\004\010\304\001\002\000\004\010\303\001\002\000" +
    "\004\010\302\001\002\000\056\003\uffb9\004\uffb9\026\uffb9" +
    "\043\uffb9\046\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\064" +
    "\uffb9\066\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\077\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\001" +
    "\002\000\056\003\uffb0\004\uffb0\026\uffb0\043\uffb0\046\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\061\uffb0\064\uffb0\066\uffb0\070" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\077\uffb0" +
    "\102\uffb0\103\uffb0\104\uffb0\105\uffb0\001\002\000\056\003" +
    "\uffb2\004\uffb2\026\uffb2\043\uffb2\046\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\061\uffb2\064\uffb2\066\uffb2\070\uffb2\071\uffb2\072" +
    "\uffb2\073\uffb2\074\uffb2\075\uffb2\077\uffb2\102\uffb2\103\uffb2" +
    "\104\uffb2\105\uffb2\001\002\000\056\003\uffb8\004\uffb8\026" +
    "\uffb8\043\uffb8\046\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8" +
    "\064\uffb8\066\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074" +
    "\uffb8\075\uffb8\077\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8" +
    "\001\002\000\056\003\uffb3\004\uffb3\026\uffb3\043\uffb3\046" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\064\uffb3\066\uffb3" +
    "\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\077" +
    "\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\001\002\000\056" +
    "\003\uffb6\004\uffb6\026\uffb6\043\uffb6\046\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\064\uffb6\066\uffb6\070\uffb6\071\uffb6" +
    "\072\uffb6\073\uffb6\074\uffb6\075\uffb6\077\uffb6\102\uffb6\103" +
    "\uffb6\104\uffb6\105\uffb6\001\002\000\020\056\uffff\057\uffff" +
    "\060\uffff\066\uffff\071\uffff\077\uffff\105\uffff\001\002\000" +
    "\056\003\uff89\004\uff89\026\uff89\043\uff89\046\uff89\056\uff89" +
    "\057\uff89\060\uff89\061\uff89\064\uff89\066\uff89\070\uff89\071" +
    "\uff89\072\uff89\073\uff89\074\uff89\075\uff89\077\uff89\102\uff89" +
    "\103\uff89\104\uff89\105\uff89\001\002\000\056\003\uff87\004" +
    "\uff87\026\uff87\043\uff87\046\uff87\056\uff87\057\uff87\060\uff87" +
    "\061\uff87\064\uff87\066\uff87\070\uff87\071\uff87\072\uff87\073" +
    "\uff87\074\uff87\075\uff87\077\uff87\102\uff87\103\uff87\104\uff87" +
    "\105\uff87\001\002\000\056\003\uff86\004\uff86\026\uff86\043" +
    "\uff86\046\uff86\056\uff86\057\uff86\060\uff86\061\uff86\064\uff86" +
    "\066\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075" +
    "\uff86\077\uff86\102\uff86\103\uff86\104\uff86\105\uff86\001\002" +
    "\000\056\003\uff88\004\uff88\026\uff88\043\uff88\046\uff88\056" +
    "\uff88\057\uff88\060\uff88\061\uff88\064\uff88\066\uff88\070\uff88" +
    "\071\uff88\072\uff88\073\uff88\074\uff88\075\uff88\077\uff88\102" +
    "\uff88\103\uff88\104\uff88\105\uff88\001\002\000\006\026\uffe6" +
    "\044\uffe6\001\002\000\016\005\326\011\327\012\323\013" +
    "\322\034\324\035\325\001\002\000\004\004\320\001\002" +
    "\000\010\007\317\026\uffe3\044\uffe3\001\002\000\006\026" +
    "\uffe4\044\uffe4\001\002\000\004\010\335\001\002\000\004" +
    "\010\334\001\002\000\004\010\333\001\002\000\004\010" +
    "\332\001\002\000\004\010\331\001\002\000\004\010\330" +
    "\001\002\000\056\003\uffbb\004\uffbb\026\uffbb\043\uffbb\046" +
    "\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\064\uffbb\066\uffbb" +
    "\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\077" +
    "\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\001\002\000\056" +
    "\003\uffb1\004\uffb1\026\uffb1\043\uffb1\046\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\064\uffb1\066\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\075\uffb1\077\uffb1\102\uffb1\103" +
    "\uffb1\104\uffb1\105\uffb1\001\002\000\056\003\uffb4\004\uffb4" +
    "\026\uffb4\043\uffb4\046\uffb4\056\uffb4\057\uffb4\060\uffb4\061" +
    "\uffb4\064\uffb4\066\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4" +
    "\074\uffb4\075\uffb4\077\uffb4\102\uffb4\103\uffb4\104\uffb4\105" +
    "\uffb4\001\002\000\056\003\uffb5\004\uffb5\026\uffb5\043\uffb5" +
    "\046\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\064\uffb5\066" +
    "\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5" +
    "\077\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\001\002\000" +
    "\056\003\uffba\004\uffba\026\uffba\043\uffba\046\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\064\uffba\066\uffba\070\uffba\071" +
    "\uffba\072\uffba\073\uffba\074\uffba\075\uffba\077\uffba\102\uffba" +
    "\103\uffba\104\uffba\105\uffba\001\002\000\056\003\uffb7\004" +
    "\uffb7\026\uffb7\043\uffb7\046\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\064\uffb7\066\uffb7\070\uffb7\071\uffb7\072\uffb7\073" +
    "\uffb7\074\uffb7\075\uffb7\077\uffb7\102\uffb7\103\uffb7\104\uffb7" +
    "\105\uffb7\001\002\000\040\003\037\004\014\026\uffe5\043" +
    "\007\046\044\061\045\064\063\070\051\072\060\074\016" +
    "\075\012\076\337\102\022\103\032\104\035\001\002\000" +
    "\004\021\342\001\002\000\004\077\341\001\002\000\056" +
    "\003\uff85\004\uff85\026\uff85\043\uff85\046\uff85\056\uff85\057" +
    "\uff85\060\uff85\061\uff85\064\uff85\066\uff85\070\uff85\071\uff85" +
    "\072\uff85\073\uff85\074\uff85\075\uff85\077\uff85\102\uff85\103" +
    "\uff85\104\uff85\105\uff85\001\002\000\004\022\343\001\002" +
    "\000\036\003\037\004\014\026\uffe5\043\007\046\044\061" +
    "\045\064\063\070\051\072\060\074\016\075\012\102\022" +
    "\103\032\104\035\001\002\000\004\077\345\001\002\000" +
    "\056\003\uff84\004\uff84\026\uff84\043\uff84\046\uff84\056\uff84" +
    "\057\uff84\060\uff84\061\uff84\064\uff84\066\uff84\070\uff84\071" +
    "\uff84\072\uff84\073\uff84\074\uff84\075\uff84\077\uff84\102\uff84" +
    "\103\uff84\104\uff84\105\uff84\001\002\000\006\007\317\044" +
    "\375\001\002\000\004\044\350\001\002\000\012\033\351" +
    "\036\352\037\354\040\353\001\002\000\004\045\370\001" +
    "\002\000\004\045\365\001\002\000\004\045\362\001\002" +
    "\000\004\045\355\001\002\000\006\011\357\012\356\001" +
    "\002\000\004\010\361\001\002\000\004\010\360\001\002" +
    "\000\056\003\uffe0\004\uffe0\026\uffe0\043\uffe0\046\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\061\uffe0\064\uffe0\066\uffe0\070\uffe0" +
    "\071\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\077\uffe0\102" +
    "\uffe0\103\uffe0\104\uffe0\105\uffe0\001\002\000\056\003\uffdf" +
    "\004\uffdf\026\uffdf\043\uffdf\046\uffdf\056\uffdf\057\uffdf\060" +
    "\uffdf\061\uffdf\064\uffdf\066\uffdf\070\uffdf\071\uffdf\072\uffdf" +
    "\073\uffdf\074\uffdf\075\uffdf\077\uffdf\102\uffdf\103\uffdf\104" +
    "\uffdf\105\uffdf\001\002\000\004\013\363\001\002\000\004" +
    "\010\364\001\002\000\056\003\uffdd\004\uffdd\026\uffdd\043" +
    "\uffdd\046\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\064\uffdd" +
    "\066\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd\075" +
    "\uffdd\077\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\001\002" +
    "\000\004\005\366\001\002\000\004\010\367\001\002\000" +
    "\056\003\uffd7\004\uffd7\026\uffd7\043\uffd7\046\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\061\uffd7\064\uffd7\066\uffd7\070\uffd7\071" +
    "\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\077\uffd7\102\uffd7" +
    "\103\uffd7\104\uffd7\105\uffd7\001\002\000\006\034\371\035" +
    "\372\001\002\000\004\010\374\001\002\000\004\010\373" +
    "\001\002\000\056\003\uffd9\004\uffd9\026\uffd9\043\uffd9\046" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\064\uffd9\066\uffd9" +
    "\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\077" +
    "\uffd9\102\uffd9\103\uffd9\104\uffd9\105\uffd9\001\002\000\056" +
    "\003\uffda\004\uffda\026\uffda\043\uffda\046\uffda\056\uffda\057" +
    "\uffda\060\uffda\061\uffda\064\uffda\066\uffda\070\uffda\071\uffda" +
    "\072\uffda\073\uffda\074\uffda\075\uffda\077\uffda\102\uffda\103" +
    "\uffda\104\uffda\105\uffda\001\002\000\012\033\376\036\377" +
    "\037\u0101\040\u0100\001\002\000\004\045\u0122\001\002\000" +
    "\004\045\u011f\001\002\000\004\045\u011c\001\002\000\004" +
    "\045\u0102\001\002\000\014\004\u0103\011\u0108\012\u0105\021" +
    "\u0104\023\u0107\001\002\000\040\010\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\022\uffcc\024\uffcc\041\uffcc\042\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\001\002" +
    "\000\010\004\u0103\021\u0104\023\u0107\001\002\000\004\010" +
    "\u0119\001\002\000\020\010\u0118\014\u010d\015\u0110\016\u010f" +
    "\017\u0111\041\u010c\042\u010b\001\002\000\010\004\u0103\021" +
    "\u0104\023\u0107\001\002\000\004\010\u0109\001\002\000\056" +
    "\003\uffe2\004\uffe2\026\uffe2\043\uffe2\046\uffe2\056\uffe2\057" +
    "\uffe2\060\uffe2\061\uffe2\064\uffe2\066\uffe2\070\uffe2\071\uffe2" +
    "\072\uffe2\073\uffe2\074\uffe2\075\uffe2\077\uffe2\102\uffe2\103" +
    "\uffe2\104\uffe2\105\uffe2\001\002\000\020\014\u010d\015\u0110" +
    "\016\u010f\017\u0111\024\u010e\041\u010c\042\u010b\001\002\000" +
    "\010\004\u0103\021\u0104\023\u0107\001\002\000\010\004\u0103" +
    "\021\u0104\023\u0107\001\002\000\010\004\u0103\021\u0104\023" +
    "\u0107\001\002\000\040\010\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\022\uffcd\024\uffcd\041\uffcd\042\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\001\002\000\010" +
    "\004\u0103\021\u0104\023\u0107\001\002\000\010\004\u0103\021" +
    "\u0104\023\u0107\001\002\000\010\004\u0103\021\u0104\023\u0107" +
    "\001\002\000\040\010\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\022\uffd1\024\uffd1\041\uffd1\042\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\001\002\000\040\010" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\022\uffd4\024\uffd4" +
    "\041\uffd4\042\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\001\002\000\040\010\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\022\uffd2\024\uffd2\041\uffd2\042\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\001\002" +
    "\000\040\010\uffd3\014\uffd3\015\u0110\016\u010f\017\u0111\022" +
    "\uffd3\024\uffd3\041\u010c\042\u010b\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\001\002\000\040\010\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\022\uffd0\024\uffd0\041\uffd0" +
    "\042\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\001\002\000\040\010\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\022\uffcf\024\uffcf\041\uffcf\042\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\001\002\000\056" +
    "\003\uffd6\004\uffd6\026\uffd6\043\uffd6\046\uffd6\056\uffd6\057" +
    "\uffd6\060\uffd6\061\uffd6\064\uffd6\066\uffd6\070\uffd6\071\uffd6" +
    "\072\uffd6\073\uffd6\074\uffd6\075\uffd6\077\uffd6\102\uffd6\103" +
    "\uffd6\104\uffd6\105\uffd6\001\002\000\056\003\uffe1\004\uffe1" +
    "\026\uffe1\043\uffe1\046\uffe1\056\uffe1\057\uffe1\060\uffe1\061" +
    "\uffe1\064\uffe1\066\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1" +
    "\074\uffe1\075\uffe1\077\uffe1\102\uffe1\103\uffe1\104\uffe1\105" +
    "\uffe1\001\002\000\020\014\u010d\015\u0110\016\u010f\017\u0111" +
    "\022\u011b\041\u010c\042\u010b\001\002\000\040\010\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\022\uffce\024\uffce\041\uffce" +
    "\042\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054" +
    "\uffce\001\002\000\004\013\u011d\001\002\000\004\010\u011e" +
    "\001\002\000\056\003\uffde\004\uffde\026\uffde\043\uffde\046" +
    "\uffde\056\uffde\057\uffde\060\uffde\061\uffde\064\uffde\066\uffde" +
    "\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde\077" +
    "\uffde\102\uffde\103\uffde\104\uffde\105\uffde\001\002\000\004" +
    "\005\u0120\001\002\000\004\010\u0121\001\002\000\056\003" +
    "\uffd8\004\uffd8\026\uffd8\043\uffd8\046\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\061\uffd8\064\uffd8\066\uffd8\070\uffd8\071\uffd8\072" +
    "\uffd8\073\uffd8\074\uffd8\075\uffd8\077\uffd8\102\uffd8\103\uffd8" +
    "\104\uffd8\105\uffd8\001\002\000\014\004\u0103\021\u0104\023" +
    "\u0107\034\u0123\035\u0126\001\002\000\004\010\u0135\001\002" +
    "\000\004\010\u0134\001\002\000\032\014\u010d\015\u0110\016" +
    "\u010f\017\u0111\041\u010c\042\u010b\047\u0129\050\u012d\051\u0128" +
    "\052\u012c\053\u012b\054\u012a\001\002\000\004\010\u0127\001" +
    "\002\000\056\003\uffdb\004\uffdb\026\uffdb\043\uffdb\046\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\064\uffdb\066\uffdb\070" +
    "\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\077\uffdb" +
    "\102\uffdb\103\uffdb\104\uffdb\105\uffdb\001\002\000\010\004" +
    "\u0103\021\u0104\023\u0107\001\002\000\010\004\u0103\021\u0104" +
    "\023\u0107\001\002\000\010\004\u0103\021\u0104\023\u0107\001" +
    "\002\000\010\004\u0103\021\u0104\023\u0107\001\002\000\010" +
    "\004\u0103\021\u0104\023\u0107\001\002\000\010\004\u0103\021" +
    "\u0104\023\u0107\001\002\000\020\010\uffca\014\u010d\015\u0110" +
    "\016\u010f\017\u0111\041\u010c\042\u010b\001\002\000\020\010" +
    "\uffc8\014\u010d\015\u0110\016\u010f\017\u0111\041\u010c\042\u010b" +
    "\001\002\000\020\010\uffc7\014\u010d\015\u0110\016\u010f\017" +
    "\u0111\041\u010c\042\u010b\001\002\000\020\010\uffc6\014\u010d" +
    "\015\u0110\016\u010f\017\u0111\041\u010c\042\u010b\001\002\000" +
    "\020\010\uffcb\014\u010d\015\u0110\016\u010f\017\u0111\041\u010c" +
    "\042\u010b\001\002\000\020\010\uffc9\014\u010d\015\u0110\016" +
    "\u010f\017\u0111\041\u010c\042\u010b\001\002\000\056\003\uffd5" +
    "\004\uffd5\026\uffd5\043\uffd5\046\uffd5\056\uffd5\057\uffd5\060" +
    "\uffd5\061\uffd5\064\uffd5\066\uffd5\070\uffd5\071\uffd5\072\uffd5" +
    "\073\uffd5\074\uffd5\075\uffd5\077\uffd5\102\uffd5\103\uffd5\104" +
    "\uffd5\105\uffd5\001\002\000\056\003\uffdc\004\uffdc\026\uffdc" +
    "\043\uffdc\046\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\064" +
    "\uffdc\066\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc" +
    "\075\uffdc\077\uffdc\102\uffdc\103\uffdc\104\uffdc\105\uffdc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\004\002\004\001\001\000\104\003\022\004" +
    "\016\007\052\010\041\011\033\014\054\015\023\016\060" +
    "\017\012\020\035\021\014\022\026\024\061\025\010\026" +
    "\020\027\027\030\047\031\040\032\051\033\053\034\030" +
    "\035\024\036\032\037\017\041\056\044\025\045\055\046" +
    "\063\047\045\050\007\051\042\052\037\053\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\314\001\001\000\002\001" +
    "\001\000\006\042\310\054\312\001\001\000\104\003\307" +
    "\004\016\007\052\010\041\011\033\014\054\015\023\016" +
    "\060\017\012\020\035\021\014\022\026\024\061\025\010" +
    "\026\020\027\027\030\047\031\040\032\051\033\053\034" +
    "\030\035\024\036\032\037\017\041\056\044\025\045\055" +
    "\046\063\047\045\050\007\051\042\052\037\053\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\102\004\142\007\052\010\041\011\033" +
    "\014\054\015\023\016\060\017\012\020\035\021\014\022" +
    "\026\024\061\025\010\026\020\027\027\030\047\031\040" +
    "\032\051\033\053\034\030\035\024\036\032\037\017\041" +
    "\056\044\025\045\055\046\063\047\045\050\007\051\042" +
    "\052\037\053\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\003" +
    "\077\004\016\007\052\010\041\011\033\014\054\015\023" +
    "\016\060\017\012\020\035\021\014\022\026\024\061\025" +
    "\010\026\020\027\027\030\047\031\040\032\051\033\053" +
    "\034\030\035\024\036\032\037\017\041\056\044\025\045" +
    "\055\046\063\047\045\050\007\051\042\052\037\053\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\003" +
    "\102\004\016\007\052\010\041\011\033\014\054\015\023" +
    "\016\060\017\012\020\035\021\014\022\026\024\061\025" +
    "\010\026\020\027\027\030\047\031\040\032\051\033\053" +
    "\034\030\035\024\036\032\037\017\041\056\044\025\045" +
    "\055\046\063\047\045\050\007\051\042\052\037\053\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\003" +
    "\105\004\016\007\052\010\041\011\033\014\054\015\023" +
    "\016\060\017\012\020\035\021\014\022\026\024\061\025" +
    "\010\026\020\027\027\030\047\031\040\032\051\033\053" +
    "\034\030\035\024\036\032\037\017\041\056\044\025\045" +
    "\055\046\063\047\045\050\007\051\042\052\037\053\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\003\115\004\016\007\052\010" +
    "\041\011\033\014\054\015\023\016\060\017\012\020\035" +
    "\021\014\022\026\024\061\025\010\026\020\027\027\030" +
    "\047\031\040\032\051\033\053\034\030\035\024\036\032" +
    "\037\017\041\056\044\025\045\055\046\063\047\045\050" +
    "\007\051\042\052\037\053\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\003\120\004\016\007\052\010" +
    "\041\011\033\014\054\015\023\016\060\017\012\020\035" +
    "\021\014\022\026\024\061\025\010\026\020\027\027\030" +
    "\047\031\040\032\051\033\053\034\030\035\024\036\032" +
    "\037\017\041\056\044\025\045\055\046\063\047\045\050" +
    "\007\051\042\052\037\053\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\003\123\004\016\007\052\010" +
    "\041\011\033\014\054\015\023\016\060\017\012\020\035" +
    "\021\014\022\026\024\061\025\010\026\020\027\027\030" +
    "\047\031\040\032\051\033\053\034\030\035\024\036\032" +
    "\037\017\041\056\044\025\045\055\046\063\047\045\050" +
    "\007\051\042\052\037\053\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\003\132\004\016" +
    "\007\052\010\041\011\033\014\054\015\023\016\060\017" +
    "\012\020\035\021\014\022\026\024\061\025\010\026\020" +
    "\027\027\030\047\031\040\032\051\033\053\034\030\035" +
    "\024\036\032\037\017\041\056\044\025\045\055\046\063" +
    "\047\045\050\007\051\042\052\037\053\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\003\135\004\016" +
    "\007\052\010\041\011\033\014\054\015\023\016\060\017" +
    "\012\020\035\021\014\022\026\024\061\025\010\026\020" +
    "\027\027\030\047\031\040\032\051\033\053\034\030\035" +
    "\024\036\032\037\017\041\056\044\025\045\055\046\063" +
    "\047\045\050\007\051\042\052\037\053\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\003\140\004\016" +
    "\007\052\010\041\011\033\014\054\015\023\016\060\017" +
    "\012\020\035\021\014\022\026\024\061\025\010\026\020" +
    "\027\027\030\047\031\040\032\051\033\053\034\030\035" +
    "\024\036\032\037\017\041\056\044\025\045\055\046\063" +
    "\047\045\050\007\051\042\052\037\053\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\104\003\167" +
    "\004\016\007\052\010\041\011\033\014\054\015\023\016" +
    "\060\017\012\020\035\021\014\022\026\024\061\025\010" +
    "\026\020\027\027\030\047\031\040\032\051\033\053\034" +
    "\030\035\024\036\032\037\017\041\056\044\025\045\055" +
    "\046\063\047\045\050\007\051\042\052\037\053\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\104\003\211\004" +
    "\016\007\052\010\041\011\033\014\054\015\023\016\060" +
    "\017\012\020\035\021\014\022\026\024\061\025\010\026" +
    "\020\027\027\030\047\031\040\032\051\033\053\034\030" +
    "\035\024\036\032\037\017\041\056\044\025\045\055\046" +
    "\063\047\045\050\007\051\042\052\037\053\046\001\001" +
    "\000\004\012\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\220\001\001\000\104\003\216\004\016" +
    "\007\052\010\041\011\033\014\054\015\023\016\060\017" +
    "\012\020\035\021\014\022\026\024\061\025\010\026\020" +
    "\027\027\030\047\031\040\032\051\033\053\034\030\035" +
    "\024\036\032\037\017\041\056\044\025\045\055\046\063" +
    "\047\045\050\007\051\042\052\037\053\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\104" +
    "\003\222\004\016\007\052\010\041\011\033\014\054\015" +
    "\023\016\060\017\012\020\035\021\014\022\026\024\061" +
    "\025\010\026\020\027\027\030\047\031\040\032\051\033" +
    "\053\034\030\035\024\036\032\037\017\041\056\044\025" +
    "\045\055\046\063\047\045\050\007\051\042\052\037\053" +
    "\046\001\001\000\004\012\223\001\001\000\002\001\001" +
    "\000\004\042\230\001\001\000\104\003\226\004\016\007" +
    "\052\010\041\011\033\014\054\015\023\016\060\017\012" +
    "\020\035\021\014\022\026\024\061\025\010\026\020\027" +
    "\027\030\047\031\040\032\051\033\053\034\030\035\024" +
    "\036\032\037\017\041\056\044\025\045\055\046\063\047" +
    "\045\050\007\051\042\052\037\053\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\003" +
    "\232\004\016\007\052\010\041\011\033\014\054\015\023" +
    "\016\060\017\012\020\035\021\014\022\026\024\061\025" +
    "\010\026\020\027\027\030\047\031\040\032\051\033\053" +
    "\034\030\035\024\036\032\037\017\041\056\044\025\045" +
    "\055\046\063\047\045\050\007\051\042\052\037\053\046" +
    "\001\001\000\004\012\223\001\001\000\104\003\234\004" +
    "\016\007\052\010\041\011\033\014\054\015\023\016\060" +
    "\017\012\020\035\021\014\022\026\024\061\025\010\026" +
    "\020\027\027\030\047\031\040\032\051\033\053\034\030" +
    "\035\024\036\032\037\017\041\056\044\025\045\055\046" +
    "\063\047\045\050\007\051\042\052\037\053\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\320" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\104\003\337\004\016\007\052\010\041\011" +
    "\033\014\054\015\023\016\060\017\012\020\035\021\014" +
    "\022\026\024\061\025\010\026\020\027\027\030\047\031" +
    "\040\032\051\033\053\034\030\035\024\036\032\037\017" +
    "\041\056\044\025\045\055\046\063\047\045\050\007\051" +
    "\042\052\037\053\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\003" +
    "\343\004\016\007\052\010\041\011\033\014\054\015\023" +
    "\016\060\017\012\020\035\021\014\022\026\024\061\025" +
    "\010\026\020\027\027\030\047\031\040\032\051\033\053" +
    "\034\030\035\024\036\032\037\017\041\056\044\025\045" +
    "\055\046\063\047\045\050\007\051\042\052\037\053\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\u0105\001\001" +
    "\000\002\001\001\000\004\060\u0119\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\u0116\001\001\000\004\060\u0115\001\001\000\004\060\u0114" +
    "\001\001\000\002\001\001\000\004\060\u0113\001\001\000" +
    "\004\060\u0112\001\001\000\004\060\u0111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\060" +
    "\u0124\061\u0123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\u0132\001\001\000\004\060\u0131\001\001\000\004" +
    "\060\u0130\001\001\000\004\060\u012f\001\001\000\004\060" +
    "\u012e\001\001\000\004\060\u012d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





    public static LinkedList<TError> errores = new LinkedList<TError>(); 

    public static String tipo="Lista";
    public String codigoTraducidoPython="";
    public String codigoTraducidoGolang="";
    public String errorm="";

    public static boolean isNumeric(String cadena) {

        boolean resultado;

        try {
            Integer.parseInt(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }

        return resultado;
    }
    
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\t" + errorm);
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        errores.add(tmp);
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left + 1)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 

        TError tmp = new TError("Sintactico",lexema, "TOKEN NO ERA EL ESPERADO",fila,columna);
        errores.add(tmp);
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= prInicio INSTRUCCIONES prFin 
            {
              Object RESULT =null;
		 System.out.println("FIN DE ANALISIS");

    String fileName = "SalidaTraducida.py";
    try{
    PrintWriter writer = new PrintWriter(fileName);
    writer.println("def main():");
    writer.println(codigoTraducidoPython);
    writer.println("");
    writer.println("");
    writer.println("if __name__ == '__main__':");
    writer.println("\tmain()");
    writer.println("");
    writer.close();
    }
    catch (IOException e){
      System.out.println("An error occurred.");
      e.printStackTrace();
      }

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACIONES 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IF 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SEGUN 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CICLO_FOR 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CICLO_WHILE 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CICLO_DOWHILE 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= RETORNO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= METODO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= EJECUTAR 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= IMPRIMIR 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= IMPRIMIRNL 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= error tpuntoycoma 
            {
              Object RESULT =null;
		 System.out.println("Falta un ;"); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACIONES ::= DECLARARNUM 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACIONES ::= DECLARARNUML 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACIONES ::= DECLARARCADENA 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACIONES ::= DECLARARCADENAL 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACIONES ::= DECLARARBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACIONES ::= DECLARARBOOLEANOL 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACIONES ::= DECLARARCARACTER 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACIONES ::= DECLARARCARACTERL 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACIONES ::= DECLARARCONOPERACION 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTAVARIABLES ::= tvariable LISTAVARIABLES2 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTAVARIABLES ::= 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES",29, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTAVARIABLES2 ::= tcoma tvariable LISTAVARIABLES2 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES2",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTAVARIABLES2 ::= tcoma tvariable 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAVARIABLES2",30, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARARNUM ::= prIngresar tvariable prComo prNumero prConValor tnumero_int tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARNUM",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARARNUM ::= prIngresar tvariable prComo prNumero prConValor tnumero_float tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + c + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARNUM",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARARNUML ::= prIngresar LISTAVARIABLES prComo prNumero prConValor tnumero_int tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARNUML",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARARNUML ::= prIngresar LISTAVARIABLES prComo prNumero prConValor tnumero_float tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARNUML",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARARCADENA ::= prIngresar tvariable prComo prCadena prConValor tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCADENA",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARARCADENAL ::= prIngresar LISTAVARIABLES prComo prCadena prConValor tcadena tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCADENAL",24, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARARBOOLEANO ::= prIngresar tvariable prComo prBoolean prConValor prVerdadero tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython +=  a + " = " + "True" + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARBOOLEANO",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARARBOOLEANO ::= prIngresar tvariable prComo prBoolean prConValor prFalso tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + "False" + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARBOOLEANO",25, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARARBOOLEANOL ::= prIngresar LISTAVARIABLES prComo prBoolean prConValor prVerdadero tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARBOOLEANOL",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARARBOOLEANOL ::= prIngresar LISTAVARIABLES prComo prBoolean prConValor prFalso tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARBOOLEANOL",26, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARARCARACTER ::= prIngresar tvariable prComo prCaracter prConValor tcaracter tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            codigoTraducidoPython += a + " = " + "'" +  s  + "'" + "\n";
            //System.out.println("Es un número");
        } else {
            codigoTraducidoPython += a + " = " + "'" + b  + "'" + "\n";
            //System.out.println("Es una letra");
        }

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCARACTER",27, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARARCARACTERL ::= prIngresar LISTAVARIABLES prComo prCaracter prConValor tcaracter tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCARACTERL",28, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARARCONOPERACION ::= prIngresar tvariable prComo prNumero prConValor operaciones tpuntoycoma 
            {
              Object RESULT =null;
		 System.out.println("Reconoce operacion: ");
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCONOPERACION",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARARCONOPERACION ::= prIngresar tvariable prComo prBoolean prConValor relacional tpuntoycoma 
            {
              Object RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)).value;
		 System.out.println("salida: " + z);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("DECLARARCONOPERACION",31, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operaciones ::= operaciones tresta operaciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 codigoTraducidoPython += "pruebaaaaaa" + a + " " + b ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operaciones ::= operaciones tsuma operaciones 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operaciones ::= operaciones tmultiplicacion operaciones 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operaciones ::= operaciones tdivision operaciones 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operaciones ::= operaciones prPotencia operaciones 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operaciones ::= operaciones prMod operaciones 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operaciones ::= tparA operaciones tparC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 codigoTraducidoPython += a + b;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operaciones ::= tcorA operaciones tcorC 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operaciones ::= tvariable 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",46, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relacional ::= operaciones prMayor operaciones 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",47, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relacional ::= operaciones prMenor operaciones 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",47, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relacional ::= operaciones prMayorIgual operaciones 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int mileft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int miright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String mi = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		System.out.println(" booleano " + b + " " + mi );
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",47, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relacional ::= operaciones prMenorIgual operaciones 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",47, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relacional ::= operaciones prEsIGUAL operaciones 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",47, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relacional ::= operaciones prEsDiferente operaciones 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",47, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PRUEBA ::= tnumero_int 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PRUEBA",48, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PRUEBA ::= tnumero_float 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("PRUEBA",48, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGNACIONES ::= ASIGNARNUM 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIGNACIONES ::= ASIGNARNUML 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGNACIONES ::= ASIGNARCADENA 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGNACIONES ::= ASIGNARCADENAL 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNACIONES ::= ASIGNARBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNACIONES ::= ASIGNARBOOLEANOL 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNACIONES ::= ASIGNARCARACTER 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIGNACIONES ::= ASIGNARCARACTERL 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASIGNARNUM ::= tvariable tflecha tnumero_int tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython +=  a + " = " + b + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARNUM",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNARNUM ::= tvariable tflecha tnumero_float tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARNUM",34, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNARNUML ::= LISTAVARIABLES tflecha tnumero_int tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARNUML",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNARNUML ::= LISTAVARIABLES tflecha tnumero_float tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARNUML",35, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIGNARCADENA ::= tvariable tflecha tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARCADENA",36, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNARCADENAL ::= LISTAVARIABLES tflecha tcadena tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARCADENAL",37, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIGNARBOOLEANO ::= tvariable tflecha prVerdadero tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + "True" + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARBOOLEANO",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNARBOOLEANO ::= tvariable tflecha prFalso tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
codigoTraducidoPython += a + " = " + "False" + "\n" ; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARBOOLEANO",38, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ASIGNARBOOLEANOL ::= LISTAVARIABLES tflecha prVerdadero tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARBOOLEANOL",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ASIGNARBOOLEANOL ::= LISTAVARIABLES tflecha prFalso tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARBOOLEANOL",39, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ASIGNARCARACTER ::= tvariable tflecha tcaracter tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 a = a.replace("_", "");
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            codigoTraducidoPython += a + " = " + "'" +  s  + "'" + "\n";
            //System.out.println("Es un número");
        } else {
            codigoTraducidoPython += a + " = " + "'" + b  + "'" + "\n";
            //System.out.println("Es una letra");
        }

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARCARACTER",40, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ASIGNARCARACTERL ::= LISTAVARIABLES tflecha tcaracter tpuntoycoma 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNARCARACTERL",41, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IF ::= prSi CONDICION prEntonces INSTRUCCIONES prFinSi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF ::= prSi CONDICION prEntonces INSTRUCCIONES prDeloContrario INSTRUCCIONES prFinSi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IF ::= prSi CONDICION prEntonces INSTRUCCIONES prOSi CONDICION prEntonces INSTRUCCIONES prDeloContrario INSTRUCCIONES prFinSi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IF ::= prSi CONDICION prEntonces INSTRUCCIONES LISTAOSI prDeloContrario INSTRUCCIONES prFinSi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICION ::= tvariable prEsIGUAL tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); b = b.replace("_", "");
  codigoTraducidoPython += "("+ a + "==" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICION ::= tvariable prEsIGUAL tnumero_int 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICION ::= tvariable prMayorIgual tvariable 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONDICION ::= tvariable 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONDICION ::= tvariable prMenorIgual tvariable 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONDICION ::= tvariable prMayorIgual tnumero_int 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICION ::= tvariable prMayorIgual tnumero_float 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDICION ::= tvariable prMenorIgual tnumero_int 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONDICION ::= tvariable prMenorIgual tnumero_float 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",32, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LISTAOSI ::= prOSi CONDICION prEntonces INSTRUCCIONES LISTAOSI 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("LISTAOSI",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SEGUN ::= prSegun tvariable prHacer prFinSegun 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("SEGUN",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CICLO_FOR ::= prPara tvariable tflecha tvariable prHasta tvariable prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CICLO_FOR ::= prPara tvariable tflecha tnumero_int prHasta tvariable prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CICLO_FOR ::= prPara tvariable tflecha tvariable prHasta tnumero_int prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CICLO_FOR ::= prPara tvariable tflecha tnumero_int prHasta tnumero_int prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CICLO_FOR ::= prPara tvariable tflecha tnumero_float prHasta tvariable prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CICLO_FOR ::= prPara tvariable tflecha tvariable prHasta tnumero_float prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CICLO_FOR ::= prPara tvariable tflecha tnumero_int prHasta tnumero_float prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CICLO_FOR ::= prPara tvariable tflecha tnumero_float prHasta tnumero_int prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CICLO_FOR ::= prPara tvariable tflecha tnumero_float prHasta tnumero_float prHacer INSTRUCCIONES prFinPara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CICLO_FOR ::= prPara tvariable tflecha prHasta prHacer 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_FOR",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CICLO_WHILE ::= prMientras CONDICIONMIENTRAS prHacer INSTRUCCIONES prFinMientras 
            {
              Object RESULT =null;
		
//codigoTraducidoPython += "whileeee";

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_WHILE",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CICLO_WHILE ::= prMientras CONDICIONMIENTRAS prHacer prFinMientras 
            {
              Object RESULT =null;
		 //codigoTraducidoPython += "while" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_WHILE",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONDICIONMIENTRAS ::= tvariable prEsIGUAL tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); b = b.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "==" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONDICIONMIENTRAS ::= tvariable prEsIGUAL tnumero_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "==" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONDICIONMIENTRAS ::= tvariable prMayorIgual tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); b = b.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + ">=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CONDICIONMIENTRAS ::= tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONDICIONMIENTRAS ::= tvariable prMenorIgual tvariable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", ""); b = b.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "<=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONDICIONMIENTRAS ::= tvariable prMayorIgual tnumero_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + ">=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONDICIONMIENTRAS ::= tvariable prMayorIgual tnumero_float 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + ">=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONDICIONMIENTRAS ::= tvariable prMenorIgual tnumero_int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "<=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONDICIONMIENTRAS ::= tvariable prMenorIgual tnumero_float 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "<=" + b + "):" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONMIENTRAS",44, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CICLO_DOWHILE ::= prRepetir INSTRUCCION prHastaQue CONDICION 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_DOWHILE",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CICLO_DOWHILE ::= prRepetir prHastaQue CONDICION 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("CICLO_DOWHILE",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // RETORNO ::= prRetornar CONDICION 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // RETORNO ::= prRetornar tnumero_int 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // RETORNO ::= prRetornar tnumero_float 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // RETORNO ::= prRetornar EXPRESIONARITMETICA 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // METODO ::= prMetodo tvariable INSTRUCCIONES prFinMetodo 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // METODO ::= prMetodo tvariable prConParametros tparA tparC INSTRUCCIONES prFinMetodo 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EJECUTAR ::= prEjecutar tvariable tparA tparC tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		 
System.out.println("ejecutar" + a + "\n");

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("EJECUTAR",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IMPRIMIR ::= prImprimir tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 codigoTraducidoPython += "print" + "(" + a + ")" + "\n" ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IMPRIMIR ::= prImprimir tvariable tpuntoycoma 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		  b = b.replace("_", ""); codigoTraducidoPython+= "print" + "(" +  b + ")" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // IMPRIMIR ::= prImprimir tparA tvariable tparC tpuntoycoma 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		  c = c.replace("_", ""); codigoTraducidoPython+= "print" + "(" +  c + ")" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // IMPRIMIR ::= prImprimir tparA tcadena tparC tpuntoycoma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		 codigoTraducidoPython+= "print" + "(" +  d + ")" + "\n"; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // IMPRIMIRNL ::= prImprimirNl tcadena tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		 codigoTraducidoPython += "print" + "(" + a + ")" + "\n" ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRNL",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // IMPRIMIRNL ::= prImprimirNl tvariable tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		  a = a.replace("_", ""); codigoTraducidoPython += "print" + "(" + a + ")" + "\n" ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRNL",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // IMPRIMIRNL ::= prImprimirNl tparA tvariable tparC tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		  a = a.replace("_", ""); codigoTraducidoPython += "print" + "(" + a + ")" + "\n" ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRNL",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // IMPRIMIRNL ::= prImprimirNl tparA tcadena tparC tpuntoycoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		 codigoTraducidoPython += "print" + "(" + a + ")" + "\n" ;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIRNL",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}
