/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;
import java.util.LinkedList;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>A_lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 43,  2, 44, 43, 43,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    40,  0,  3,  0,  0, 13,  0,  4, 14, 15,  8, 11,  9, 12,  6,  7, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  0, 10,  0, 19, 16, 18, 
     0, 27, 24, 22, 30, 26, 31, 37, 39, 20, 42,  0, 25, 35, 21, 23, 
    36, 41, 29, 32, 33, 34, 28,  0,  0, 38,  0,  0,  0,  0,  0,  1, 
     0, 27, 24, 22, 30, 26, 31, 37, 39, 20, 42,  0, 25, 35, 21, 23, 
    36, 41, 29, 32, 33, 34, 28,  0,  0, 38,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 44,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 17, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\16\1\1\0\1\22\1\0\1\23"+
    "\1\0\1\24\3\0\1\25\20\0\1\26\10\0\1\27"+
    "\1\30\22\0\1\31\4\0\1\32\7\0\1\33\6\0"+
    "\1\34\2\0\1\35\21\0\1\36\27\0\1\37\1\0"+
    "\1\40\5\0\1\41\1\42\1\43\2\0\1\44\4\0"+
    "\1\45\11\0\1\46\7\0\1\47\11\0\1\50\5\0"+
    "\1\51\6\0\1\52\5\0\1\53\1\54\3\0\1\55"+
    "\1\56\1\57\1\60\1\0\1\61\5\0\1\62\1\63"+
    "\2\0\1\64\2\0\1\65\2\0\1\66\2\0\1\67"+
    "\4\0\1\70\6\0\1\71\2\0\1\72\3\0\1\73"+
    "\6\0\1\74\5\0\1\75\1\76\1\77\2\0\1\100"+
    "\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\55\0\207\0\264\0\341\0\55"+
    "\0\u010e\0\55\0\55\0\55\0\55\0\u013b\0\55\0\55"+
    "\0\55\0\55\0\55\0\55\0\u0168\0\u0195\0\u01c2\0\u01ef"+
    "\0\u021c\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357"+
    "\0\u0384\0\u03b1\0\132\0\55\0\207\0\55\0\264\0\55"+
    "\0\u03de\0\u040b\0\u0438\0\55\0\u0465\0\u0492\0\u04bf\0\u04ec"+
    "\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654"+
    "\0\u0681\0\u06ae\0\u06db\0\u0708\0\55\0\u0735\0\u0762\0\u078f"+
    "\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u03de\0\u040b\0\u089d"+
    "\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05"+
    "\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d"+
    "\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\55\0\u0ca8"+
    "\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\55\0\u0de3"+
    "\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\55\0\u0ef1\0\u0f1e"+
    "\0\55\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059"+
    "\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1"+
    "\0\u11ee\0\u121b\0\55\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc"+
    "\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464"+
    "\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc"+
    "\0\u15f9\0\u1626\0\55\0\u1653\0\55\0\u1680\0\u16ad\0\u16da"+
    "\0\u1707\0\u1734\0\55\0\u1761\0\55\0\u178e\0\u17bb\0\55"+
    "\0\u17e8\0\u1815\0\u1842\0\u186f\0\55\0\u189c\0\u18c9\0\u18f6"+
    "\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\55\0\u1a31"+
    "\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\55\0\u1b6c"+
    "\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4"+
    "\0\55\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\55\0\u1de2"+
    "\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\55\0\u1ef0\0\u1f1d"+
    "\0\u1f4a\0\u1f77\0\u1fa4\0\55\0\u1fd1\0\u1ffe\0\u202b\0\u2058"+
    "\0\55\0\55\0\55\0\55\0\u2085\0\55\0\u20b2\0\u20df"+
    "\0\u210c\0\u2139\0\u2166\0\55\0\55\0\u2193\0\u21c0\0\55"+
    "\0\u21ed\0\u221a\0\55\0\u2247\0\u2274\0\55\0\u22a1\0\u22ce"+
    "\0\55\0\u22fb\0\u2328\0\u2355\0\u2382\0\55\0\u23af\0\u23dc"+
    "\0\u2409\0\u2436\0\u2463\0\u2490\0\55\0\u24bd\0\u24ea\0\55"+
    "\0\u2517\0\u2544\0\u2571\0\55\0\u259e\0\u25cb\0\u25f8\0\u2625"+
    "\0\u2652\0\u267f\0\55\0\u26ac\0\u26d9\0\u2706\0\u2733\0\u2760"+
    "\0\55\0\55\0\55\0\u278d\0\u27ba\0\55\0\55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\2\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\2\1\32\1\2\1\33\1\34\1\35\1\36"+
    "\1\37\2\2\1\40\1\41\2\2\1\42\1\4\2\2"+
    "\1\4\56\0\1\43\1\44\1\0\52\43\2\45\1\0"+
    "\1\46\51\45\2\47\1\0\1\47\1\50\50\47\5\0"+
    "\1\7\1\51\55\0\1\52\1\53\64\0\1\54\61\0"+
    "\1\55\15\0\1\56\53\0\1\57\41\0\1\60\3\0"+
    "\1\61\22\0\1\62\102\0\1\63\52\0\1\64\12\0"+
    "\1\65\11\0\1\66\34\0\1\67\54\0\1\70\54\0"+
    "\1\71\46\0\1\72\6\0\1\73\6\0\1\74\36\0"+
    "\1\75\5\0\1\76\46\0\1\77\2\0\1\100\2\0"+
    "\1\101\1\102\50\0\1\103\3\0\1\104\54\0\1\105"+
    "\26\0\1\106\47\0\2\107\1\0\52\107\7\53\1\0"+
    "\1\110\44\53\24\0\1\111\20\0\1\112\53\0\1\113"+
    "\53\0\1\114\36\0\1\115\15\0\1\116\46\0\1\117"+
    "\1\120\56\0\1\121\43\0\1\122\66\0\1\123\14\0"+
    "\1\124\105\0\1\125\57\0\1\126\60\0\1\127\2\0"+
    "\1\130\11\0\1\131\100\0\1\132\60\0\1\133\50\0"+
    "\1\134\74\0\1\135\41\0\1\136\60\0\1\137\43\0"+
    "\1\140\13\0\1\141\61\0\1\142\47\0\1\143\50\0"+
    "\1\144\45\0\1\145\11\0\1\146\23\0\1\147\73\0"+
    "\1\150\63\0\1\151\54\0\1\152\51\0\1\153\23\0"+
    "\1\154\46\0\1\155\33\0\1\156\60\0\1\157\53\0"+
    "\1\160\46\0\1\161\61\0\1\162\52\0\1\163\51\0"+
    "\1\164\56\0\1\165\64\0\1\166\45\0\1\167\57\0"+
    "\1\170\53\0\1\171\24\0\1\172\113\0\1\173\42\0"+
    "\1\174\70\0\1\175\37\0\1\176\56\0\1\177\54\0"+
    "\1\200\54\0\1\201\57\0\1\202\55\0\1\203\53\0"+
    "\1\204\63\0\1\205\37\0\1\206\62\0\1\207\46\0"+
    "\1\210\65\0\1\211\53\0\1\212\7\0\1\213\34\0"+
    "\1\214\56\0\1\215\53\0\1\216\61\0\1\217\47\0"+
    "\1\220\74\0\1\221\51\0\1\222\45\0\1\223\56\0"+
    "\1\224\60\0\1\225\42\0\1\226\64\0\1\227\1\230"+
    "\2\0\1\231\1\232\37\0\1\233\51\0\1\234\55\0"+
    "\1\235\70\0\1\236\50\0\1\237\55\0\1\240\53\0"+
    "\1\241\44\0\1\242\64\0\1\243\52\0\1\244\50\0"+
    "\1\245\65\0\1\246\57\0\1\247\40\0\1\250\60\0"+
    "\1\251\54\0\1\252\46\0\1\253\70\0\1\254\46\0"+
    "\1\255\54\0\1\256\47\0\1\257\70\0\1\260\53\0"+
    "\1\261\51\0\1\262\43\0\1\263\53\0\1\264\31\0"+
    "\1\265\115\0\1\266\36\0\1\267\5\0\1\270\46\0"+
    "\1\271\5\0\1\272\55\0\1\273\50\0\1\274\62\0"+
    "\1\275\20\0\1\276\102\0\1\277\26\0\1\300\101\0"+
    "\1\301\27\0\1\302\106\0\1\303\45\0\1\304\61\0"+
    "\1\305\60\0\1\306\45\0\1\307\60\0\1\310\47\0"+
    "\1\311\61\0\1\312\55\0\1\313\54\0\1\314\53\0"+
    "\1\315\55\0\1\316\56\0\1\317\45\0\1\320\53\0"+
    "\1\321\74\0\1\322\41\0\1\323\63\0\1\324\50\0"+
    "\1\325\44\0\1\326\62\0\1\327\50\0\1\330\54\0"+
    "\1\331\51\0\1\332\101\0\1\333\40\0\1\334\54\0"+
    "\1\335\46\0\1\336\60\0\1\337\56\0\1\340\54\0"+
    "\1\341\57\0\1\342\45\0\1\343\60\0\1\344\54\0"+
    "\1\345\54\0\1\346\46\0\1\347\53\0\1\350\70\0"+
    "\1\351\37\0\1\352\56\0\1\353\60\0\1\354\61\0"+
    "\1\355\15\0\1\356\54\0\1\357\106\0\1\360\63\0"+
    "\1\361\13\0\1\362\110\0\1\363\62\0\1\364\43\0"+
    "\1\365\51\0\1\366\52\0\1\367\53\0\1\370\55\0"+
    "\1\371\70\0\1\372\51\0\1\373\42\0\1\374\54\0"+
    "\1\375\62\0\1\376\47\0\1\377\61\0\1\u0100\65\0"+
    "\1\u0101\52\0\1\u0102\42\0\1\u0103\62\0\1\u0104\46\0"+
    "\1\u0105\72\0\1\u0106\54\0\1\u0107\40\0\1\u0108\64\0"+
    "\1\u0109\45\0\1\u010a\57\0\1\u010b\44\0\1\u010c\62\0"+
    "\1\u010d\63\0\1\u010e\54\0\1\u010f\47\0\1\u0110\44\0"+
    "\1\u0111\62\0\1\u0112\61\0\1\u0113\47\0\1\u0114\54\0"+
    "\1\u0115\50\0\1\u0116\66\0\1\u0117\50\0\1\u0118\50\0"+
    "\1\u0119\54\0\1\u011a\63\0\1\u011b\47\0\1\u011c\45\0"+
    "\1\u011d\61\0\1\u011e\52\0\1\u011f\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10215];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\1\11\1\1\4\11"+
    "\1\1\6\11\16\1\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\3\0\1\11\20\0\1\11\10\0\2\1\22\0"+
    "\1\1\4\0\1\11\7\0\1\11\6\0\1\11\2\0"+
    "\1\11\21\0\1\11\27\0\1\11\1\0\1\11\5\0"+
    "\1\11\1\1\1\11\2\0\1\11\4\0\1\11\11\0"+
    "\1\11\7\0\1\11\11\0\1\11\5\0\1\11\6\0"+
    "\1\11\5\0\1\11\1\1\3\0\4\11\1\0\1\11"+
    "\5\0\2\11\2\0\1\11\2\0\1\11\2\0\1\11"+
    "\2\0\1\11\4\0\1\11\6\0\1\11\2\0\1\11"+
    "\3\0\1\11\6\0\1\11\5\0\3\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public static LinkedList<TError> errores = new LinkedList<TError>(); 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico : "+yytext()+ " Linea "+(yyline+1)+" Columna "+(yycolumn+1));    
            TError tmp= new TError("Lexico", yytext(),"NO PERTENECE AL LENGUAJE", yyline, yycolumn );
            errores.add(tmp);
            } 
            // fall through
          case 66: break;
          case 2: 
            { //codigo en java
                    System.out.println("Reconocio token: <guion_bajo> lexema: "+yytext());
                    return new Symbol(Simbolos.tguionBajo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 67: break;
          case 3: 
            { /* Espacios en blanco se ignoran */
            } 
            // fall through
          case 68: break;
          case 4: 
            { System.out.println("Reconocio token: <numero_int> lexema: "+ yytext());
                    return new Symbol(Simbolos.tnumero_int, yycolumn, yyline, yytext());
            } 
            // fall through
          case 69: break;
          case 5: 
            { //codigo en java
                    System.out.println("Reconocio token: <punto> lexema: "+yytext());
                    return new Symbol(Simbolos.tpunto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 6: 
            { //codigo en java
                    System.out.println("Reconocio token: <diagonal> lexema: "+yytext());
                    return new Symbol(Simbolos.tdivision, yycolumn, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 7: 
            { //codigo en java
                    System.out.println("Reconocio token: <asterisco> lexema: "+yytext());
                    return new Symbol(Simbolos.tmultiplicacion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 8: 
            { //codigo en java
                    System.out.println("Reconocio token: <coma> lexema: "+yytext());
                    return new Symbol(Simbolos.tcoma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 9: 
            { //codigo en java
                    System.out.println("Reconocio token: <puntoycoma> lexema: "+yytext());
                    return new Symbol(Simbolos.tpuntoycoma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 10: 
            { //codigo en java
                    System.out.println("Reconocio token: <cruz> lexema: "+yytext());
                    return new Symbol(Simbolos.tsuma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 11: 
            { //codigo en java
                    System.out.println("Reconocio token: <guion> lexema: "+yytext());
                    return new Symbol(Simbolos.tresta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 12: 
            { //codigo en java
                    System.out.println("Reconocio token: <modulo> lexema: "+yytext());
                    return new Symbol(Simbolos.tmodulo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 13: 
            { //codigo en java
                    System.out.println("Reconocio token: <parentesisAbre> lexema: "+yytext());
                    return new Symbol(Simbolos.tparA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 14: 
            { //codigo en java
                    System.out.println("Reconocio token: <parentesisCierra> lexema: "+yytext());
                    return new Symbol(Simbolos.tparC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 15: 
            { //codigo en java
                    System.out.println("Reconocio token: <interrogaciona> lexema: "+yytext());
                    return new Symbol(Simbolos.tinterrogaciona, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 16: 
            { //codigo en java
                    System.out.println("Reconocio token: <interrogacionc> lexema: "+yytext());
                    return new Symbol(Simbolos.tinterrogacionc, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 17: 
            { //codigo en java
                    System.out.println("Reconocio token: <igual> lexema: "+yytext());
                    return new Symbol(Simbolos.tigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 18: 
            { System.out.println("Reconocio token: <variable> lexema: "+yytext());
                    return new Symbol(Simbolos.tvariable, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 19: 
            { System.out.println("Reconocio token: <cadena> lexema: "+ yytext());
                    return new Symbol(Simbolos.tcadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 20: 
            { System.out.println("Reconocio token: <caracter> lexema: "+ yytext());
                    return new Symbol(Simbolos.tcaracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 21: 
            { //codigo en java
                    System.out.println("Reconocio token: <flecha> lexema: "+yytext());
                    return new Symbol(Simbolos.tflecha, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 22: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 23: 
            { System.out.println("Reconocio token: <numero_float> lexema: "+ yytext());
                    return new Symbol(Simbolos.tnumero_float, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 24: 
            { System.out.println("Reconocio token: <comentario> lexema: "+yytext());
                    return new Symbol(Simbolos.tcomentario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 25: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 26: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prMod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 27: 
            { System.out.println("Reconocio token: <comentarioMulti> lexema: "+ yytext());
                    return new Symbol(Simbolos.tcomentarioMulti, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 28: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prComo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 29: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prOSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 30: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prPara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 31: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFalso, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 32: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 33: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prHacer, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 34: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prHasta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 35: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prInicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 36: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prNumero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 37: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prCadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 38: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFinSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 39: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 40: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prBoolean, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 41: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prRepetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 42: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 43: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prIngresar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 44: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prImprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 45: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prCaracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 46: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prEntonces, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 47: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prEsIGUAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 48: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prEjecutar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 49: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prRetornar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 50: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFinPara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 51: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prMientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 52: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prPotencia, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 53: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prConValor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 54: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prVerdadero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 55: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFinSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 56: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prHastaQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 57: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFinMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 58: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prImprimirNl, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 59: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFinFuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 60: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFinMientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 61: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prMenorIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 62: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prMayorIgual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 63: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prConParametros, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 64: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prIncremental, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 65: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prDeloContrario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
