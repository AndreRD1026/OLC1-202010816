/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,28],$V2=[1,29],$V3=[1,30],$V4=[1,40],$V5=[1,41],$V6=[1,42],$V7=[1,43],$V8=[1,44],$V9=[1,31],$Va=[1,32],$Vb=[1,33],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[2,5,37,64,65,66,67,68,69,70,71,72,73,76,77,78,83,85,86,90],$Vj=[1,49],$Vk=[1,53],$Vl=[2,32],$Vm=[1,67],$Vn=[1,68],$Vo=[1,69],$Vp=[1,70],$Vq=[37,51,52,75],$Vr=[32,50,51,52,54,63],$Vs=[1,100],$Vt=[1,101],$Vu=[1,102],$Vv=[1,103],$Vw=[1,104],$Vx=[1,105],$Vy=[1,106],$Vz=[1,107],$VA=[32,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],$VB=[36,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"LISTAINSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACIONES":7,"ASIGNACIONES":8,"CASTEO":9,"INCREMENTO":10,"DECREMENTO":11,"BREAK":12,"CONTINUE":13,"RETURN":14,"FUNCIONES":15,"EJECUTAR":16,"PRINT":17,"PRINTLN":18,"TOLOWER":19,"TOUPPER":20,"ROUND":21,"TYPEOF":22,"TOSTRING":23,"TOCHARARRAY":24,"PUSH":25,"POP":26,"RUN":27,"TIPOS":28,"EXID":29,"=":30,"OPERACIONA":31,";":32,"cadena":33,"char":34,"bool":35,",":36,"expreID":37,"EXPRESIONES":38,"EXPRESION":39,"RELACIONAL":40,"LOGICO":41,"+":42,"-":43,"*":44,"/":45,"^":46,"%":47,":":48,"?":49,"(":50,")":51,"[":52,"]":53,"numero":54,">":55,"<":56,">=":57,"<=":58,"==":59,"!=":60,"|":61,"&&":62,"!":63,"++":64,"--":65,"pr_int":66,"pr_char":67,"pr_string":68,"pr_bool":69,"pr_double":70,"pr_break":71,"pr_continue":72,"pr_return":73,"LISTAPARAMETROS":74,"{":75,"}":76,"pr_print":77,"pr_println":78,"pr_tolower":79,"PRUEBA":80,"pr_toupper":81,"pr_round":82,"pr_typeof":83,"caracter":84,"pr_tostring":85,"pr_tochararray":86,".":87,"pr_push":88,"pr_pop":89,"pr_run":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",30:"=",32:";",33:"cadena",34:"char",35:"bool",36:",",37:"expreID",42:"+",43:"-",44:"*",45:"/",46:"^",47:"%",48:":",49:"?",50:"(",51:")",52:"[",53:"]",54:"numero",55:">",56:"<",57:">=",58:"<=",59:"==",60:"!=",61:"|",62:"&&",63:"!",64:"++",65:"--",66:"pr_int",67:"pr_char",68:"pr_string",69:"pr_bool",70:"pr_double",71:"pr_break",72:"pr_continue",73:"pr_return",75:"{",76:"}",77:"pr_print",78:"pr_println",79:"pr_tolower",81:"pr_toupper",82:"pr_round",83:"pr_typeof",84:"caracter",85:"pr_tostring",86:"pr_tochararray",87:".",88:"pr_push",89:"pr_pop",90:"pr_run"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,5],[7,5],[7,5],[7,3],[29,3],[29,1],[8,4],[8,4],[8,4],[8,4],[8,4],[31,2],[31,1],[38,1],[38,1],[38,1],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,1],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[41,3],[41,3],[41,2],[9,8],[9,8],[9,8],[9,8],[10,3],[10,3],[11,3],[11,3],[28,1],[28,1],[28,1],[28,1],[28,1],[12,2],[13,2],[14,2],[14,3],[14,3],[15,9],[74,2],[74,4],[16,4],[17,5],[17,5],[17,7],[17,7],[17,7],[17,7],[18,5],[18,5],[18,7],[18,7],[18,7],[18,7],[18,7],[18,7],[18,9],[18,9],[18,9],[19,8],[19,8],[20,8],[20,10],[20,7],[20,9],[21,8],[21,7],[22,5],[22,8],[22,8],[22,8],[22,8],[22,8],[23,5],[23,8],[23,8],[23,8],[23,8],[23,8],[24,5],[24,10],[24,10],[24,10],[24,10],[24,10],[25,7],[25,7],[25,7],[25,6],[26,7],[26,7],[26,7],[26,6],[27,5],[27,6],[27,6],[27,6],[80,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]);  this.$= $$[$0-1];  
break;
case 3:
this.$=[$$[$0]]
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 39: case 40: case 41: case 42: case 53: case 62: case 71: case 72: case 73: case 74: case 75:
this.$=$$[$0];
break;
case 25:
console.log($$[$0]);
break;
case 26: case 27: case 28: case 29:
this.$= new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 30:
this.$= new Declaracion($$[$0-1],$$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 31:
$$[$0-2].push($$[$0]); this.$ =$$[$0-2];
break;
case 32:
this.$ = [$$[$0]]
break;
case 33: case 34: case 35: case 36: case 37:
this.$= new Asignacion($$[$0-3], $$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 38:
this.$=$$[$0-1];
break;
case 43:
this.$=$$[$0-2] + '+' + $$[$0];
break;
case 44:
this.$=$$[$0-2] + '-' + $$[$0];
break;
case 45:
this.$=$$[$0-2] + '*' + $$[$0];
break;
case 46:
this.$=$$[$0-2] + '/' + $$[$0];
break;
case 47:
this.$=$$[$0-2] + '^' + $$[$0];
break;
case 48:
this.$=$$[$0-2] + '%' + $$[$0];
break;
case 49:
this.$=$$[$0-2] + ':' + $$[$0];
break;
case 50:
this.$=$$[$0-2] + '?' + $$[$0];
break;
case 51:
this.$= "(" + $$[$0-1] + ")";
break;
case 52:
this.$= "[" + $$[$0-1] + "]";
break;
case 54:
this.$=$$[$0-2] + '>' + $$[$0];
break;
case 55:
this.$=$$[$0-2] + '<' + $$[$0];
break;
case 56:
this.$=$$[$0-2] + '>=' + $$[$0];
break;
case 57:
this.$=$$[$0-2] + '<=' + $$[$0];
break;
case 58:
this.$=$$[$0-2] + '==' + $$[$0];
break;
case 59:
this.$=$$[$0-2] + '!=' + $$[$0];
break;
case 60:
this.$=$$[$0-2] + '|' + $$[$0];
break;
case 61:
this.$=$$[$0-2] + '&&' + $$[$0];
break;
case 63:
this.$= new Casteo($$[$0-7], $$[$0-6], $$[$0-3], $$[$0-1]);
break;
case 64: case 65: case 66:
this.$= new Casteo($$[$0-6], $$[$0-7], $$[$0-3], $$[$0-1]);
break;
case 67:
this.$= new Incremento($$[$0-2],$$[$0-1]);
break;
case 68:
this.$= new Incremento($$[$0-1],$$[$0-2]);
break;
case 69:
this.$= new Decremento($$[$0-2],$$[$0-1]);
break;
case 70:
this.$= new Decremento($$[$0-1],$$[$0-2]);
break;
case 76:
this.$=new Break($$[$0-1]);
break;
case 77:
this.$=new Continue($$[$0-1]);
break;
case 78:
this.$=new Return($$[$0-1],$$[$0-1]);
break;
case 79: case 80:
this.$=new Return($$[$0-2],$$[$0-1]);
break;
case 81:
this.$=new Funcion($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1]);
break;
case 82:
this.$=$$[$0];this.$=$$[$0-1];
break;
case 83:
this.$=$$[$0-3];
break;
case 84:
this.$= new Ejecutar($$[$0-3]);
break;
case 85: case 86:
this.$= new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 87: case 88: case 89: case 90:
this.$= new Print($$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 91: case 92:
this.$= new PrintLn($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 93: case 94: case 95: case 96: case 97: case 98:
this.$= new PrintLn($$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 99: case 100: case 101:
this.$= new PrintLn($$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 102:
this.$ = new Lower($$[$0-6],$$[$0-2]);
break;
case 103:
this.$= new Lower($$[$0-6],$$[$0-2]);
break;
case 104: case 106:
this.$ = new Upper($$[$0-6],$$[$0-2]);
break;
case 105:
this.$= new Upper($$[$0-8],$$[$0-4]);
break;
case 107:
this.$= new Upper($$[$0-8], $$[$0-4]);
break;
case 108: case 109:
this.$= new Round($$[$0-6],$$[$0-2]);
break;
case 110:
this.$ = new Typeof($$[$0-2],$$[$0-2]);
break;
case 111: case 112: case 113: case 114: case 115:
this.$= new Typeof($$[$0-6],$$[$0-2]); 
break;
case 116:
this.$ = new ToString($$[$0-2],$$[$0-2]);
break;
case 117: case 118: case 119: case 120: case 121:
this.$= new ToString($$[$0-6],$$[$0-2]); 
break;
case 122:
this.$ = new ToCharArray($$[$0-2],$$[$0-2]);
break;
case 123: case 124: case 125: case 126: case 127:
this.$= new ToCharArray($$[$0-6],$$[$0-2]); 
break;
case 128: case 129: case 130:
this.$= new Push($$[$0-6],$$[$0-2]);
break;
case 131:
this.$= new Push($$[$0-5],$$[$0-5]);
break;
case 132: case 133: case 134:
this.$= new Pop($$[$0-6]);
break;
case 135:
this.$= new Pop($$[$0-5]);
break;
case 136:
this.$= new Run($$[$0-3],$$[$0-3]);
break;
case 137: case 138: case 139:
this.$= new Run($$[$0-4],$$[$0-2]);
break;
case 140:
this.$= new Prueba($$[$0-2],$$[$0-1]);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,37:$V1,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,77:$Vc,78:$Vd,83:$Ve,85:$Vf,86:$Vg,90:$Vh},{1:[3]},{2:$V0,5:[1,45],6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,37:$V1,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,77:$Vc,78:$Vd,83:$Ve,85:$Vf,86:$Vg,90:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),o($Vi,[2,24]),o($Vi,[2,25]),{29:47,37:$Vj,52:[1,48]},{30:[1,50],36:$Vk,50:[1,51],87:[1,52]},o([30,36,50,87],$Vl,{64:[1,54],65:[1,55]}),{37:[1,56]},{37:[1,57]},{32:[1,58]},{32:[1,59]},{29:62,31:61,32:[1,60],37:$Vj,38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{50:[1,71]},{50:[1,72]},{50:[1,73]},{50:[1,74]},{50:[1,75]},{29:76,37:$Vj},o($Vq,[2,71]),o($Vq,[2,72]),o($Vq,[2,73]),o($Vq,[2,74]),o($Vq,[2,75]),{1:[2,1]},o($Vi,[2,2]),{30:[1,77],32:[1,78],36:$Vk},{53:[1,79]},o([30,32,36,50,51],$Vl),{29:84,31:80,33:[1,81],34:[1,83],35:[1,82],37:$Vj,38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp,81:[1,85],82:[1,86]},{28:89,51:[1,88],66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,74:87},{88:[1,90],89:[1,91]},{37:[1,92]},{32:[1,93]},{32:[1,94]},{32:[1,95]},{32:[1,96]},o($Vi,[2,76]),o($Vi,[2,77]),o($Vi,[2,78]),{32:[1,97],38:98,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{32:[1,99],36:$Vk},o($Vr,[2,39]),o($Vr,[2,40],{42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,55:[1,108],56:[1,109],57:[1,110],58:[1,111],59:[1,112],60:[1,113],61:[1,114],62:[1,115]}),o($Vr,[2,41]),o($Vr,[2,42]),{39:116,50:$Vm,52:$Vn,54:$Vo},{39:117,50:$Vm,52:$Vn,54:$Vo},o($VA,[2,53]),{39:118,50:$Vm,52:$Vn,54:$Vo},{33:[1,119],37:[1,120]},{33:[1,121],37:[1,122]},{31:123,38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{54:[1,124]},{31:125,38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{36:$Vk,50:[1,126]},{31:127,33:[1,128],34:[1,129],35:[1,130],38:63,39:64,40:65,41:66,50:[1,131],52:$Vn,54:$Vo,63:$Vp,79:[1,132],81:[1,133],82:[1,134],83:[1,135],85:[1,136]},o($Vi,[2,30]),{29:137,37:$Vj},{32:[1,138],38:98,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{32:[1,139]},{32:[1,140]},{32:[1,141]},{32:[1,142],36:$Vk},{50:[1,143]},{50:[1,144]},{36:[1,146],51:[1,145]},{32:[1,147]},{37:[1,148]},{50:[1,149]},{50:[1,150]},o([30,32,36,50,51,87],[2,31]),o($Vi,[2,67]),o($Vi,[2,69]),o($Vi,[2,68]),o($Vi,[2,70]),o($Vi,[2,79]),o($Vr,[2,38]),o($Vi,[2,80]),{39:151,50:$Vm,52:$Vn,54:$Vo},{39:152,50:$Vm,52:$Vn,54:$Vo},{39:153,50:$Vm,52:$Vn,54:$Vo},{39:154,50:$Vm,52:$Vn,54:$Vo},{39:155,50:$Vm,52:$Vn,54:$Vo},{39:156,50:$Vm,52:$Vn,54:$Vo},{39:157,50:$Vm,52:$Vn,54:$Vo},{39:158,50:$Vm,52:$Vn,54:$Vo},{39:159,50:$Vm,52:$Vn,54:$Vo},{39:160,50:$Vm,52:$Vn,54:$Vo},{39:161,50:$Vm,52:$Vn,54:$Vo},{39:162,50:$Vm,52:$Vn,54:$Vo},{39:163,50:$Vm,52:$Vn,54:$Vo},{39:164,50:$Vm,52:$Vn,54:$Vo},{39:165,50:$Vm,52:$Vn,54:$Vo},{39:166,50:$Vm,52:$Vn,54:$Vo},{42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,51:[1,167]},{42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,53:[1,168]},o($Vr,[2,62],{42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz}),{51:[1,169]},{51:[1,170]},{42:[1,172],51:[1,171]},{42:[1,174],51:[1,173]},{38:98,39:64,40:65,41:66,50:$Vm,51:[1,175],52:$Vn,54:$Vo,63:$Vp},{51:[1,176]},{38:98,39:64,40:65,41:66,50:$Vm,51:[1,177],52:$Vn,54:$Vo,63:$Vp},{31:179,33:[1,180],38:63,39:64,40:65,41:66,50:$Vm,51:[1,178],52:$Vn,54:$Vo,63:$Vp,84:[1,181]},{32:[1,182],38:98,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{32:[1,183]},{32:[1,184]},{32:[1,185]},{28:186,39:116,50:$Vm,52:$Vn,54:$Vo,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8},{50:[1,187]},{50:[1,188]},{50:[1,189]},{50:[1,190]},{50:[1,191]},{30:[1,192],36:$Vk},o($Vi,[2,33]),o($Vi,[2,34]),o($Vi,[2,35]),o($Vi,[2,36]),o($Vi,[2,37]),{33:[1,193]},{31:194,38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{48:[1,195]},{28:196,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8},o($Vi,[2,84]),o($VB,[2,82]),{31:197,33:[1,198],38:63,39:64,40:65,41:66,50:$Vm,51:[1,200],52:$Vn,54:$Vo,63:$Vp,84:[1,199]},{31:201,33:[1,202],38:63,39:64,40:65,41:66,50:$Vm,51:[1,204],52:$Vn,54:$Vo,63:$Vp,84:[1,203]},o([32,42,50,51,52,53,54,55,56,57,58,59,60,61,62,63],[2,43],{43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz}),o([32,42,43,50,51,52,53,54,55,56,57,58,59,60,61,62,63],[2,44],{44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz}),o([32,42,43,44,50,51,52,53,54,55,56,57,58,59,60,61,62,63],[2,45],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz}),o([32,42,43,44,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63],[2,46],{46:$Vw,47:$Vx,48:$Vy,49:$Vz}),o([32,42,43,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63],[2,47],{47:$Vx,48:$Vy,49:$Vz}),o([32,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63],[2,48],{48:$Vy,49:$Vz}),o([32,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63],[2,49],{49:$Vz}),o($VA,[2,50]),o($Vr,[2,54],{42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz}),o($Vr,[2,55],{42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz}),o($Vr,[2,56],{42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz}),o($Vr,[2,57],{42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz}),o($Vr,[2,58],{42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz}),o($Vr,[2,59],{42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz}),o($Vr,[2,60],{42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz}),o($Vr,[2,61],{42:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz}),o($VA,[2,51]),o($VA,[2,52]),{32:[1,205],42:[1,206]},{32:[1,207],42:[1,208]},{32:[1,209],42:[1,210]},{31:211,37:[1,212],38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{32:[1,213],42:[1,214]},{31:215,33:[1,217],37:[1,216],38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{32:[1,218]},{32:[1,219]},{32:[1,220]},{32:[1,221]},{38:98,39:64,40:65,41:66,50:$Vm,51:[1,222],52:$Vn,54:$Vo,63:$Vp},{51:[1,223]},{51:[1,224]},o($Vi,[2,26]),o($Vi,[2,27]),o($Vi,[2,28]),o($Vi,[2,29]),{51:[1,225]},{33:[1,226],80:227},{33:[1,228]},{31:229,38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{29:234,33:[1,231],35:[1,232],37:$Vj,54:[1,230],84:[1,233]},{29:236,31:235,33:[1,237],35:[1,239],37:$Vj,38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp,84:[1,238]},{86:[1,240]},{42:[1,242],51:[1,241]},{38:98,39:64,40:65,41:66,50:$Vm,51:[1,243],52:$Vn,54:$Vo,63:$Vp},{28:244,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8},{37:[1,245]},{38:98,39:64,40:65,41:66,50:$Vm,51:[1,246],52:$Vn,54:$Vo,63:$Vp},{51:[1,247]},{51:[1,248]},{32:[1,249]},{38:98,39:64,40:65,41:66,50:$Vm,51:[1,250],52:$Vn,54:$Vo,63:$Vp},{51:[1,251]},{51:[1,252]},{32:[1,253]},o($Vi,[2,85]),{31:255,37:[1,254],38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},o($Vi,[2,86]),{31:257,37:[1,256],38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},o($Vi,[2,91]),{37:[1,258],54:[1,259]},{38:98,39:64,40:65,41:66,50:$Vm,51:[1,260],52:$Vn,54:$Vo,63:$Vp},{42:[1,261]},o($Vi,[2,92]),{37:[1,262],54:[1,263]},{38:98,39:64,40:65,41:66,50:$Vm,51:[1,264],52:$Vn,54:$Vo,63:$Vp},{42:[1,265]},{42:[1,266]},o($Vi,[2,110]),o($Vi,[2,116]),o($Vi,[2,122]),o($Vi,[2,136]),{32:[1,267]},{32:[1,268]},{32:[1,269]},{31:270,33:[1,271],34:[1,272],35:[1,273],38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{42:[1,275],51:[1,274]},{51:[1,276]},{42:[1,278],51:[1,277]},{38:98,39:64,40:65,41:66,50:$Vm,51:[1,279],52:$Vn,54:$Vo,63:$Vp},{51:[1,280]},{51:[1,281]},{51:[1,282]},{51:[1,283]},{36:$Vk,51:[1,284]},{38:98,39:64,40:65,41:66,50:$Vm,51:[1,285],52:$Vn,54:$Vo,63:$Vp},{36:$Vk,51:[1,286]},{51:[1,287]},{51:[1,288]},{51:[1,289]},{50:[1,290]},{32:[1,291]},{31:292,38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{32:[1,293]},{75:[1,294]},o($VB,[2,83]),{32:[1,295]},{32:[1,296]},{32:[1,297]},o($Vi,[2,131]),{32:[1,298]},{32:[1,299]},{32:[1,300]},o($Vi,[2,135]),{32:[1,301]},{32:[1,302],38:98,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{32:[1,303]},{32:[1,304],38:98,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{32:[1,305]},{32:[1,306]},{32:[1,307]},{33:[1,308]},{32:[1,309]},{32:[1,310]},{32:[1,311]},{33:[1,312]},{37:[1,313]},o($Vi,[2,137]),o($Vi,[2,138]),o($Vi,[2,139]),{32:[1,314],38:98,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{32:[1,315]},{32:[1,316]},{32:[1,317]},{32:[1,318]},{31:319,38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp},{32:[1,320]},{32:[1,321]},{54:[1,322]},{32:[1,323]},{32:[1,324]},{32:[1,325]},{32:[1,326]},{32:[1,327]},{32:[1,328]},{32:[1,329]},{32:[1,330]},{32:[1,331]},{32:[1,332]},{32:[1,333]},{29:335,31:334,33:[1,336],35:[1,338],37:$Vj,38:63,39:64,40:65,41:66,50:$Vm,52:$Vn,54:$Vo,63:$Vp,84:[1,337]},o($Vi,[2,106]),{38:98,39:64,40:65,41:66,50:$Vm,51:[1,339],52:$Vn,54:$Vo,63:$Vp},o($Vi,[2,109]),{2:$V0,4:340,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,37:$V1,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,77:$Vc,78:$Vd,83:$Ve,85:$Vf,86:$Vg,90:$Vh},o($Vi,[2,128]),o($Vi,[2,129]),o($Vi,[2,130]),o($Vi,[2,132]),o($Vi,[2,133]),o($Vi,[2,134]),o($Vi,[2,87]),o($Vi,[2,89]),o($Vi,[2,88]),o($Vi,[2,90]),o($Vi,[2,93]),o($Vi,[2,95]),o($Vi,[2,98]),{51:[1,341]},o($Vi,[2,94]),o($Vi,[2,96]),o($Vi,[2,97]),{51:[1,342]},{51:[1,343]},o($Vi,[2,63]),o($Vi,[2,64]),o($Vi,[2,65]),o($Vi,[2,66]),o($Vi,[2,102]),{38:98,39:64,40:65,41:66,50:$Vm,51:[2,140],52:$Vn,54:$Vo,63:$Vp},o($Vi,[2,103]),o($Vi,[2,104]),{51:[1,344]},o($Vi,[2,108]),o($Vi,[2,111]),o($Vi,[2,112]),o($Vi,[2,113]),o($Vi,[2,114]),o($Vi,[2,115]),o($Vi,[2,117]),o($Vi,[2,118]),o($Vi,[2,119]),o($Vi,[2,120]),o($Vi,[2,121]),{38:98,39:64,40:65,41:66,50:$Vm,51:[1,345],52:$Vn,54:$Vo,63:$Vp},{36:$Vk,51:[1,346]},{51:[1,347]},{51:[1,348]},{51:[1,349]},{32:[1,350]},{2:$V0,6:46,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:26,29:27,37:$V1,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,76:[1,351],77:$Vc,78:$Vd,83:$Ve,85:$Vf,86:$Vg,90:$Vh},{32:[1,352]},{32:[1,353]},{32:[1,354]},{32:[1,355]},{32:[1,356]},{32:[1,357]},{32:[1,358]},{32:[1,359]},{32:[1,360]},o($Vi,[2,107]),o($Vi,[2,81]),o($Vi,[2,99]),o($Vi,[2,100]),o($Vi,[2,101]),o($Vi,[2,105]),o($Vi,[2,123]),o($Vi,[2,124]),o($Vi,[2,125]),o($Vi,[2,126]),o($Vi,[2,127])],
defaultActions: {45:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  //Declarciones y tambien las importaciones
const {Declaracion} = require('../instrucciones/Declaracion.ts');
const {Print} = require('../instrucciones/Print.ts');
const {PrintLn} = require('../instrucciones/PrintLn.ts');
const {Bloque} = require('../instrucciones/bloque.ts');
const {Asignacion} = require('../instrucciones/Asignacion.ts');
const {Casteo} = require('../instrucciones/Casteo.ts');
const {Incremento} = require('../instrucciones/Incremento.ts')
const {Decremento} = require('../instrucciones/Decremento.ts')
const {Vector} = require('../instrucciones/Vector.ts')
const {OTernario} = require('../instrucciones/OTernario.ts')
const {If} = require('../instrucciones/If.ts')
const {SwitchG} = require('../instrucciones/Switch.ts')
const {WhileG} = require('../instrucciones/While.ts')
const {For} = require('../instrucciones/For.ts')
const {DoWhile} = require('../instrucciones/DoWhile.ts')
const {DoUntil} = require('../instrucciones/DoUntil.ts')
const {Break} = require('../instrucciones/Break.ts')
const {Continue} = require('../instrucciones/Continue.ts')
const {Return} = require('../instrucciones/Return.ts')
const {Funcion} = require('../instrucciones/Funcion.ts')
const {Metodo} = require('../instrucciones/Metodo.ts')
const {Ejecutar} = require('../instrucciones/Ejecutar.ts')
const {Lower} = require('../instrucciones/Lower.ts')
const {Upper} = require('../instrucciones/Upper.ts')
const {Round} = require('../instrucciones/Round.ts')
const {Length} = require('../instrucciones/Length.ts')
const {Typeof} = require('../instrucciones/Typeof.ts')
const {ToString} = require('../instrucciones/ToString.ts')
const {ToCharArray} = require('../instrucciones/ToCharArray.ts')
const {Push} = require('../instrucciones/Push.ts')
const {Pop} = require('../instrucciones/Pop.ts')
const {Run} = require('../instrucciones/Run.ts')
const {Prueba} = require('../instrucciones/Prueba.ts')
//const { error } =require("../tool/error")

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 33
break;
case 4:return 54
break;
case 5:return 35
break;
case 6:return 34
break;
case 7:return 68
break;
case 8:return 66
break;
case 9:return 69
break;
case 10:return 67
break;
case 11:return 70
break;
case 12:return 77
break;
case 13:return 78
break;
case 14:return 'pr_new'
break;
case 15:return 'pr_if'
break;
case 16:return 'pr_elif'
break;
case 17:return 'pr_else'
break;
case 18:return 'pr_case'
break;
case 19:return 'pr_switch'
break;
case 20:return 'pr_default'
break;
case 21:return 'pr_while'
break;
case 22:return 'pr_for'
break;
case 23:return 'pr_do'
break;
case 24:return 'pr_until'
break;
case 25:return 71
break;
case 26:return 72
break;
case 27:return 73
break;
case 28:return 'pr_void'
break;
case 29:return 79
break;
case 30:return 81
break;
case 31:return 82
break;
case 32:return 'pr_length'
break;
case 33:return 83
break;
case 34:return 85
break;
case 35:return 86
break;
case 36:return 88
break;
case 37:return 89
break;
case 38:return 90
break;
case 39:return "++"
break;
case 40:return "--"
break;
case 41:return ">="
break;
case 42:return "<="
break;
case 43:return 62
break;
case 44:return "=="
break;
case 45:return 87
break;
case 46:return 32
break;
case 47:return 36
break;
case 48:return 42
break;
case 49:return 43
break;
case 50:return 44
break;
case 51:return 45
break;
case 52:return 46
break;
case 53:return 47
break;
case 54:return 49
break;
case 55:return 51
break;
case 56:return 50
break;
case 57:return 76
break;
case 58:return 75
break;
case 59:return 52
break;
case 60:return 53
break;
case 61:return 30
break;
case 62:return 36
break;
case 63:return 56
break;
case 64:return 55
break;
case 65:return "!="
break;
case 66:return 48
break;
case 67:return 61
break;
case 68:return 37;
break;
case 69:return 5
break;
case 70: 
        console.log("error lexico: "+yy_.yytext +"En la linea: " + yy_.yylloc.first_line +", En la columna: "+ yy_.yylloc.first_column);
        //let s = s.add_error(new error("Lexico","No se reconoce el caracter "+yy_.yytext,yy_.yylineno+1,yy_.yylloc.first_column+1));
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([\"][^\"]*[\"]))/i,/^(?:([0-9]+([.][0-9]+)?))/i,/^(?:(true|false\b))/i,/^(?:(([\'][^\n\']*[\'])))/i,/^(?:String\b)/i,/^(?:Int\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:Double\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:New\b)/i,/^(?:If\b)/i,/^(?:Elif\b)/i,/^(?:Else\b)/i,/^(?:Case\b)/i,/^(?:Switch\b)/i,/^(?:Default\b)/i,/^(?:While\b)/i,/^(?:For\b)/i,/^(?:Do\b)/i,/^(?:Until\b)/i,/^(?:Break\b)/i,/^(?:Continue\b)/i,/^(?:Return\b)/i,/^(?:Void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Round\b)/i,/^(?:Length\b)/i,/^(?:Typeof\b)/i,/^(?:ToString\b)/i,/^(?:ToCharArray\b)/i,/^(?:Push\b)/i,/^(?:Pop\b)/i,/^(?:Run\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:==)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\?)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\})/i,/^(?:\{)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:,)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?::)/i,/^(?:\|)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}