package analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;
import java.io.IOException;
import java.io.PrintWriter;

parser code 
{:

    public static LinkedList<TError> errores = new LinkedList<TError>();
    public static ArrayList<String> vars = new ArrayList<String>();


    public static String tipo="Lista";
    public String codigoTraducidoPython="";
    public String codigoTraducidoGolang="";
    public String errorm="";

    public static boolean isNumeric(String cadena) {

        boolean resultado;

        try {
            Integer.parseInt(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }

        return resultado;
    }
    
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\t" + errorm);
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError tmp = new TError("Sintactico",lexema,"Caracter no esperado",fila,columna);
        errores.add(tmp);
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left + 1)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 

        TError tmp = new TError("Sintactico",lexema, "TOKEN NO ERA EL ESPERADO",fila,columna);
        errores.add(tmp);
    }  
:}


//definicion de terminales
terminal String numero;
terminal String numerooperacion;
terminal String tvariable;
terminal String tcaracter;
terminal String tpunto;
terminal String tcoma;
terminal String tpuntoycoma;
terminal String tcadena;
terminal String tsuma;
terminal String tresta;
terminal String tmultiplicacion;
terminal String tdivision;
terminal String tmodulo;
terminal String tparA;
terminal String tparC;
terminal String tcorA;
terminal String tcorC;
terminal String tguionBajo;
terminal String tflecha;
terminal String tinterrogaciona;
terminal String tinterrogacionc;
terminal String tigual;
terminal String prInicio;
terminal String prBoolean;
terminal String prVerdadero;
terminal String prFalso;
terminal String prCaracter;
terminal String prNumero;
terminal String prCadena;
terminal String prPotencia;
terminal String prMod;
terminal String prIngresar;
terminal String prComo;
terminal String prConValor;
terminal String prSi;
terminal String prMayor;
terminal String prMenor;
terminal String prMayorIgual;
terminal String prMenorIgual;
terminal String prEsIGUAL;
terminal String prEsDiferente;
terminal String prOR;
terminal String prAND;
terminal String prNOT;
terminal String prEntonces;
terminal String prFinSi;
terminal String prOSi;
terminal String prDeloContrario;
terminal String prSegun;
terminal String prHacer;
terminal String prFinSegun;
terminal String prPara;
terminal String prHasta;
terminal String prFinPara;
terminal String prIncremental;
terminal String prMientras;
terminal String prFinMientras;
terminal String prRepetir;
terminal String prHastaQue;
terminal String prRetornar;
terminal String prMetodo;
terminal String prConParametros;
terminal String prFinMetodo;
terminal String prFuncion;
terminal String prFinFuncion;
terminal String prEjecutar;
terminal String prImprimir;
terminal String prImprimirNl;
terminal String prFin;



//definicion de no terminales
non terminal INICIO,INSTRUCCIONES,INSTRUCCION, ERROR;
non terminal E,DECLARACIONES,ASIGNACIONES,IF,LISTAOSI,LISTAOSI2,SEGUN,CICLO_FOR, CICLO_WHILE; 
non terminal CICLO_DOWHILE,RETORNO,METODO,FUNCIONES,PARAMETROS,EJECUTAR,IMPRIMIR,IMPRIMIRNL;
non terminal DECLARARNUM,DECLARARNUML,DECLARARCADENA,DECLARARCADENAL,DECLARARBOOLEANO,DECLARARBOOLEANOL,DECLARARCARACTER;
non terminal DECLARARCARACTERL,LISTAVARIABLES,LISTAVARIABLES2,DECLARARCONOPERACION,CONDICIONIF,ERROR_INSTRUCCIONES;
non terminal ASIGNARNUM,ASIGNARNUML,ASIGNARCADENA,ASIGNARCADENAL,ASIGNARBOOLEANO,ASIGNARBOOLEANOL,ASIGNARCARACTER,ASIGNARCARACTERL;
non terminal EXPRESIONARITMETICA,EXPRESIONES,EXPRESION,PROCEDIMIENTOS;
non terminal CONDICIONMIENTRAS, LISTAPARAMETROS;
non terminal OPREACIONESP;
non terminal operaciones, relacional,logico, PRUEBA;
non terminal expr_list, expr_part;
non terminal expr;

//precedencia de los operadores

precedence left tsuma;
precedence left tresta, tmultiplicacion,tdivision, prMod, prPotencia;
precedence left prMayor, prMenor, prMayorIgual, prMenorIgual, prEsIGUAL,prEsDiferente;
precedence left prOR, prAND, prNOT;


//gramaticas
start with INICIO;

//INICIO::= prInicio INSTRUCCIONES prFin {:System.out.println("FIN DE ANALISIS");:};
INICIO::= prInicio INSTRUCCIONES prFin {: System.out.println("FIN DE ANALISIS");

    String fileName = "SalidaTraducida.py";
    try{
    PrintWriter writer = new PrintWriter(fileName);
    writer.println("def main():");
    writer.println(codigoTraducidoPython);
    writer.println("");
    writer.println("");
    writer.println("if __name__ == '__main__':");
    writer.println("\tmain()");
    writer.println("");
    writer.close();
    }
    catch (IOException e){
      System.out.println("An error occurred.");
      e.printStackTrace();
      }
:}
;



INSTRUCCIONES::= INSTRUCCION:a INSTRUCCIONES:b {: RESULT= a; :}
                | INSTRUCCION:a {: RESULT=a; :}
;


INSTRUCCION::= DECLARACIONES:declarar {: RESULT=declarar; :}
            | ASIGNACIONES:asign {: RESULT=asign; :}
            | IF:conif {: RESULT=conif; :}
            | SEGUN:seg {: RESULT=seg; :}
            | CICLO_FOR:foor {: RESULT=foor; :}
            | CICLO_WHILE:whilee {: RESULT=whilee; :}
            | CICLO_DOWHILE:dowhile {: RESULT=dowhile; :}
            | RETORNO:retrn {: RESULT=retrn; :}
            | METODO:met {: RESULT=met; :}
            | FUNCIONES:func {: RESULT=func; :}
            | EJECUTAR:exec {: RESULT=exec; :}
            | IMPRIMIR:impr {: RESULT=impr; :}
            | IMPRIMIRNL:imprln {: RESULT=imprln; :}
            | error tpuntoycoma  {: System.out.println("Falta un ;"); :}
;

//gramatica para las declaraciones

DECLARACIONES::= DECLARARCONOPERACION:dec {: RESULT=dec; :}
            | DECLARARNUML:dec1 {: RESULT=dec1; :}
            | DECLARARCADENA:dec2 {: RESULT=dec2; :}
            | DECLARARCADENAL:dec3 {: RESULT=dec3; :}
            | DECLARARBOOLEANO:dec4 {: RESULT=dec4; :}
            | DECLARARBOOLEANOL:dec5 {: RESULT=dec5; :}
            | DECLARARCARACTER:dec6 {: RESULT=dec6; :}
            | DECLARARCARACTERL:dec7 {: RESULT=dec7; :}
            | DECLARARNUM:dec8 {: RESULT=dec8; :}
;

//Lista de variables

LISTAVARIABLES::= tvariable:a LISTAVARIABLES2 {: vars.add(a); :}
            |
;

LISTAVARIABLES2::= tcoma tvariable:a LISTAVARIABLES2 {: vars.add(a); :}
            | tcoma tvariable:a {: vars.add(a); :}
;

//declaracion de operaciones

DECLARARCONOPERACION::= prIngresar tvariable:a prComo prNumero prConValor EXPRESIONARITMETICA:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n"; :} 
                    | prIngresar tvariable:a prComo prNumero prConValor relacional:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n"; :}
                    | prIngresar tvariable:a prComo prNumero prConValor logico:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n"; :}
                    | prIngresar tvariable:a prComo prBoolean prConValor operaciones:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n"; :}
                    | prIngresar tvariable:a prComo prBoolean prConValor relacional:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n"; :}
                    | prIngresar tvariable:a prComo prBoolean prConValor logico:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n"; :}
;

EXPRESIONARITMETICA::= EXPRESIONARITMETICA EXPRESIONES:a {: RESULT=a;:}
            | EXPRESIONES:a {: RESULT=a;:}
;

EXPRESIONES::= EXPRESION:e {: System.out.println("=" + e + ";"); RESULT=e; :}
;

EXPRESION::= numero:n {: RESULT=n; :}
        | EXPRESION:I tsuma EXPRESION:r {: RESULT= I + " + " + r ;:}
        | EXPRESION:I tresta EXPRESION:r {: RESULT= I + " - " + r ; :}
        | EXPRESION:I tmultiplicacion EXPRESION:r {: RESULT= I + " * " + r ; :}
        | EXPRESION:I tdivision EXPRESION:r {: RESULT= I + " / " + r ; :}
        | EXPRESION:I prMod EXPRESION:r {:RESULT= I + "%" + r;:}
        | EXPRESION:I prPotencia EXPRESION:r {: RESULT= I + "**" + r;:}
        | tparA:para EXPRESION:e tparC {: RESULT= "(" + e + ")"; :}
        | tcorA:para EXPRESION:e tcorC {: RESULT= "[" + e + "]"; :}
;


operaciones::= operaciones:op1 tresta:signo operaciones:op2 {: RESULT=op1+signo+op2; :}
            | operaciones:op1 tsuma:signo operaciones:op {: RESULT=op1+signo+op1; :}
            | operaciones:op1 tmultiplicacion:signo operaciones:op2 {: RESULT=op1+signo+op1; :}
            | operaciones:op1 tdivision:signo operaciones:op2 {: RESULT=op1+signo+op1; :}
            | operaciones:op1 prPotencia:signo operaciones:op2 {: RESULT=op1+signo+op1; :}
            | operaciones:op1 prMod:signo operaciones:op2 {: RESULT=op1+signo+op1; :}
            | tparA:parA operaciones:op tparC:parC {: RESULT=parA+op+parC; :}
            | tcorA:corA operaciones:op tcorC:corC {: RESULT=corA+op+corC; :}
            | tvariable:b {: RESULT=b; :}
;



relacional::= operaciones:op1 prMayor:signo operaciones:op2 {: RESULT=op1+">"+op2; :}
        | operaciones:op1 prMenor:signo operaciones:op2 {: RESULT=op1+"<"+op2; :}
        | operaciones:op1 prMayorIgual:signo operaciones:op2 {: RESULT=op1+">="+op2; :}
        | operaciones:op1 prMenorIgual:signo operaciones:op2 {: RESULT=op1+"<="+op2; :}
        | operaciones:op1 prEsIGUAL:signo operaciones:op2 {: RESULT=op1+"=="+op2; :}
        | operaciones:op1 prEsDiferente:signo operaciones:op2 {: RESULT=op1+"!="+op2; :}
;   


logico::= operaciones:op1 prOR:signo operaciones:op2 {: RESULT=op1+"or"+op2; :}
        | operaciones:op1 prAND:signo operaciones:op2 {: RESULT=op1+"and"+op2; :}
        | operaciones:op1 prNOT:signo operaciones:op2 {: RESULT=op1+"not"+op2; :}
; 


//declaracion de numeros

//DECLARARNUM::= prIngresar tvariable:a prComo prNumero prConValor operaciones:num tpuntoycoma {: a = a.replace("_", "");
//codigoTraducidoPython += a + " = " + num + "\n" ; :} 
//            | prIngresar tvariable:a prComo prNumero prConValor numero:b tpuntoycoma
//;

DECLARARNUML::= prIngresar LISTAVARIABLES prComo prNumero prConValor numero:num tpuntoycoma {: 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + num + "\n" ;
}
vars.clear(); :}
;

//declaracion de cadenas

DECLARARCADENA::= prIngresar tvariable:a prComo prCadena prConValor tcadena:b tpuntoycoma 
{: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n" ; :}
;

DECLARARCADENAL::= prIngresar LISTAVARIABLES prComo prCadena prConValor tcadena:cad tpuntoycoma {: 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + cad + "\n" ;
}
vars.clear(); :}
;

//declaracion de booleanos

DECLARARBOOLEANO::= prIngresar tvariable:a prComo prBoolean prConValor prVerdadero:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython +=  a + " = " + "True" + "\n" ; :}   
                |  prIngresar tvariable:a prComo prBoolean prConValor prFalso:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + "False" + "\n" ; :}   
;

DECLARARBOOLEANOL::= prIngresar LISTAVARIABLES prComo prBoolean prConValor prVerdadero:v tpuntoycoma {: 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + v + "\n" ;
}
vars.clear(); :}
                | prIngresar LISTAVARIABLES prComo prBoolean prConValor prFalso:f tpuntoycoma {: 
for (String varia : vars) {
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + f + "\n" ;
}
vars.clear(); :}
;

//declaracion de caracteres

DECLARARCARACTER::= prIngresar tvariable:a prComo prCaracter prConValor tcaracter:b tpuntoycoma
{: a = a.replace("_", "");
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            codigoTraducidoPython += a + " = " + "'" +  s  + "'" + "\n";
            //System.out.println("Es un número");
        } else {
            codigoTraducidoPython += a + " = " + "'" + b  + "'" + "\n";
            //System.out.println("Es una letra");
        }
:}
;

DECLARARCARACTERL::= prIngresar LISTAVARIABLES prComo prCaracter prConValor tcaracter:b tpuntoycoma {: 
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
            codigoTraducidoPython += varia + " = " + "'" +  s  + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es un número");
        } else {
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
             codigoTraducidoPython += varia + " = " + "'" + b  + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es una letra");
        } 
:}
;

// gramatica para las asignaciones


ASIGNACIONES::= ASIGNARNUM
            | ASIGNARNUML
            | ASIGNARCADENA
            | ASIGNARCADENAL
            | ASIGNARBOOLEANO
            | ASIGNARBOOLEANOL
            | ASIGNARCARACTER
            | ASIGNARCARACTERL
;

//asignando numeros

ASIGNARNUM::= tvariable:a tflecha numero:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython +=  a + " = " + b + "\n" ; :}    
;

ASIGNARNUML::= LISTAVARIABLES tflecha numero:num tpuntoycoma {: 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + num + "\n" ;
}
vars.clear(); :}
;

//asignando cadena

ASIGNARCADENA::= tvariable:a tflecha tcadena:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + b + "\n" ; :}   
;

ASIGNARCADENAL::= LISTAVARIABLES tflecha tcadena:cad tpuntoycoma {: 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + cad + "\n" ;
}
vars.clear(); :}
;

//asignando booleano

ASIGNARBOOLEANO::= tvariable:a tflecha prVerdadero:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + "True" + "\n" ; :}   
                | tvariable:a tflecha prFalso:b tpuntoycoma {: a = a.replace("_", "");
codigoTraducidoPython += a + " = " + "False" + "\n" ; :}   
;

ASIGNARBOOLEANOL::= LISTAVARIABLES tflecha prVerdadero:v tpuntoycoma {: 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + v + "\n" ;
}
vars.clear(); :}
                | LISTAVARIABLES tflecha prFalso:f tpuntoycoma {: 
for (String varia : vars) {
  System.out.println("es el for " + varia);
    varia = varia.replace("_", "");
  codigoTraducidoPython += varia + " = " + f + "\n" ;
}
vars.clear(); :}
;

//asignando caracter

ASIGNARCARACTER::= tvariable:a tflecha tcaracter:b tpuntoycoma {: a = a.replace("_", "");
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            codigoTraducidoPython += a + " = " + "'" +  s  + "'" + "\n";
            //System.out.println("Es un número");
        } else {
            codigoTraducidoPython += a + " = " + "'" + b  + "'" + "\n";
            //System.out.println("Es una letra");
        }
:}   
;

ASIGNARCARACTERL::= LISTAVARIABLES tflecha tcaracter:b tpuntoycoma {: 
b = b.replace("$","");
b = b.replace("{","");
b = b.replace("}","");
b = b.replace("'","");

        if (isNumeric(b) == true) {
            int prueba = Integer.parseInt(b);
            char convertedChar =  (char)prueba;
            String s=String.valueOf(convertedChar);
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
            codigoTraducidoPython += varia + " = " + "'" +  s  + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es un número");
        } else {
            for (String varia : vars) {
            System.out.println("es el for " + varia);
              varia = varia.replace("_", "");
             codigoTraducidoPython += varia + " = " + "'" + b  + "'" + "\n";
            }
            vars.clear();
            //System.out.println("Es una letra");
        } 
:}
;

//Sentencias
// IF

IF::= prSi CONDICIONIF:a prEntonces INSTRUCCIONES:in prFinSi {: codigoTraducidoPython += "if " + "(" + a + "):" + "\n" + in; :}
    | prSi CONDICIONIF:a prEntonces INSTRUCCIONES:in prDeloContrario:b INSTRUCCIONES:in2 prFinSi {: codigoTraducidoPython += "if " + "(" + a + "):" + "\n" + in + " else: " + "\n" + in2 +  "\n"; :}
    | prSi CONDICIONIF:a prEntonces INSTRUCCIONES:in LISTAOSI:ls prDeloContrario INSTRUCCIONES:in2 prFinSi {: codigoTraducidoPython += "if " + "(" + a + "):" + "\n" + in + ls + in2 + " else: " + "\n" + in2 +  "\n"; :}
;



LISTAOSI::= prOSi CONDICIONIF:a prEntonces INSTRUCCIONES:in LISTAOSI:lis {: RESULT= "else " +  a + in + lis  + "\n" ;:}
            | prOSi CONDICIONIF:a prEntonces INSTRUCCIONES:in {: RESULT= "else " + a +  in + "\n"; :}
;

CONDICIONIF::= tvariable:a prEsIGUAL tvariable:b {: a = a.replace("_", ""); b = b.replace("_", "");  RESULT= a + "==" + b; :}
            | tvariable:a prEsIGUAL numero:b {: a = a.replace("_", "");
  RESULT = "("+ a + "==" + b + "):" + "\n"; :}
            | tvariable:a {: a = a.replace("_", ""); 
  RESULT = "("+ a + "):" + "\n"; :}
            | tvariable:a prMayorIgual tvariable:b {: a = a.replace("_", ""); b = b.replace("_", "");
  RESULT = "("+ a + ">=" + b + "):" + "\n"; :}
            | tvariable:a prMenorIgual tvariable:b {: a = a.replace("_", ""); b = b.replace("_", "");
  RESULT = "("+ a + "<=" + b + "):" + "\n"; :}
            | tvariable:a prMayorIgual numero:b {: a = a.replace("_", ""); 
  RESULT = "("+ a + ">=" + b + "):" + "\n"; :}
            | tvariable:a prMenorIgual numero:b {: a = a.replace("_", "");
  RESULT = "("+ a + "<=" + b + "):" + "\n"; :}
            | tvariable:a prMayor tvariable:b {: a = a.replace("_", ""); b = b.replace("_", "");
  RESULT = "("+ a + ">" + b + "):" + "\n"; :}
            | tvariable:a prMenor tvariable:b {: a = a.replace("_", ""); b = b.replace("_", "");
  RESULT = "("+ a + "<" + b + "):" + "\n"; :}
            | tvariable:a prMayor numero:b {: a = a.replace("_", "");
  RESULT = "("+ a + ">" + b + "):" + "\n"; :}
            | tvariable:a prMenor numero:b {: a = a.replace("_", "");
  RESULT = "("+ a + "<" + b + "):" + "\n"; :}
;

// SEGUN

SEGUN::= prSegun tvariable prHacer prFinSegun
;

// PARA

CICLO_FOR::= prPara tvariable tflecha tvariable prHasta tvariable prHacer INSTRUCCIONES prFinPara
            | prPara tvariable tflecha numero prHasta tvariable prHacer INSTRUCCIONES prFinPara
            | prPara tvariable tflecha tvariable prHasta numero prHacer INSTRUCCIONES prFinPara
            | prPara tvariable tflecha numero prHasta numero prHacer INSTRUCCIONES prFinPara
            | prPara tvariable tflecha prHasta prHacer 
;
// MIENTRAS

CICLO_WHILE::= prMientras CONDICIONMIENTRAS prHacer INSTRUCCIONES prFinMientras {:
//codigoTraducidoPython += "whileeee";
:}
            | prMientras CONDICIONMIENTRAS prHacer prFinMientras {: //codigoTraducidoPython += "while" + "\n"; :}
;

CONDICIONMIENTRAS::= tvariable:a prEsIGUAL tvariable:b {: a = a.replace("_", ""); b = b.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "==" + b + "):" + "\n"; :}
            | tvariable:a prEsIGUAL numero:b {: a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "==" + b + "):" + "\n"; :}
            | tvariable:a prMayorIgual tvariable:b {: a = a.replace("_", ""); b = b.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + ">=" + b + "):" + "\n"; :}
            | tvariable:a {: a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "):" + "\n"; :}
            | tvariable:a prMenorIgual tvariable:b {: a = a.replace("_", ""); b = b.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "<=" + b + "):" + "\n"; :}
            | tvariable:a prMayorIgual numero:b {: a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + ">=" + b + "):" + "\n"; :}
            | tvariable:a prMenorIgual numero:b {: a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "<=" + b + "):" + "\n"; :}
            | tvariable:a prMayor numero:b {: a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + ">" + b + "):" + "\n"; :}
            | tvariable:a prMenor numero:b {: a = a.replace("_", "");
  codigoTraducidoPython += "while" + "("+ a + "<" + b + "):" + "\n"; :}
;

//REPETIR HASTA

CICLO_DOWHILE::= prRepetir INSTRUCCION prHastaQue CONDICIONMIENTRAS
                | prRepetir prHastaQue CONDICIONMIENTRAS
;

//RETORNO

RETORNO::= prRetornar CONDICIONMIENTRAS
        | prRetornar numero
;

//METODO

METODO::= prMetodo tvariable INSTRUCCIONES prFinMetodo
        | prMetodo tvariable prConParametros tparA tparC LISTAPARAMETROS prFinMetodo
;

LISTAPARAMETROS::= tvariable tcoma
;

//FUNCIONES


//LLAMADA DE FUNCIONES Y METODOS

EJECUTAR::= prEjecutar tvariable:a tparA tparC tpuntoycoma
{: 
System.out.println("ejecutar" + a + "\n");
:}
;



// impresiones

IMPRIMIR::= prImprimir tcadena:a tpuntoycoma {: a = a.replace("_", ""); RESULT= "print" + "(" + a + ")" + "\n"; :}
            | prImprimir tvariable:b tpuntoycoma {:  b = b.replace("_", ""); RESULT= "print" + "(" +  b + ")" + "\n"; :}
            | prImprimir tparA tvariable:c tparC tpuntoycoma {:  c = c.replace("_", ""); RESULT= "print" + "(" +  c + ")" + "\n"; :}
            | prImprimir tparA tcadena:d tparC tpuntoycoma {: RESULT= "print" + "(" +  d + ")" + "\n"; :}

;


IMPRIMIRNL::= prImprimirNl tcadena:a tpuntoycoma {: a = a.replace("_",""); RESULT = "print" + "(" + a + ")" + "\n" ;:}
            | prImprimirNl tvariable:a tpuntoycoma {:  a = a.replace("_", ""); RESULT = "print" + "(" + a + ")" + "\n" ;:}
            | prImprimirNl tparA tvariable:a tparC tpuntoycoma {:  a = a.replace("_", ""); RESULT = "print" + "(" + a + ")" + "\n" ;:}
            | prImprimirNl tparA tcadena:a tparC tpuntoycoma {: RESULT = "print" + "(" + a + ")" + "\n" ;:}
;

