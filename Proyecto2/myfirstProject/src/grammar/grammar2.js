/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,17],$V2=[1,25],$V3=[1,26],$V4=[1,27],$V5=[1,28],$V6=[1,29],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[5,19,43,44,50,51,52,53,54,55,64,66,68,69,70],$Vc=[19,39,40],$Vd=[1,48],$Ve=[1,59],$Vf=[1,60],$Vg=[1,61],$Vh=[1,62],$Vi=[1,63],$Vj=[1,70],$Vk=[20,22],$Vl=[22,31,32,38,40,42],$Vm=[1,93],$Vn=[1,94],$Vo=[1,95],$Vp=[1,96],$Vq=[1,97],$Vr=[22,31,32,33,34,35,36,37,38,39,40,41,42],$Vs=[1,106],$Vt=[1,107],$Vu=[1,149],$Vv=[1,158],$Vw=[1,159];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"LISTAINSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACIONES":7,"ASIGNACIONES":8,"CASTEO":9,"INCREMENTO":10,"DECREMENTO":11,"ENCAPSULAMIENTO":12,"VECTORES":13,"IF":14,"SWITCH":15,"WHILE":16,"IMPRIMIR":17,"TIPOS":18,"expreID":19,"=":20,"OPERACIONA":21,";":22,"cadena":23,"char":24,"bool":25,"LISTAVARIABLES":26,"LISTAVARIABLES2":27,",":28,"EXPRESIONES":29,"EXPRESION":30,"RELACIONAL":31,"LOGICO":32,"+":33,"-":34,"*":35,"/":36,"%":37,"(":38,")":39,"[":40,"]":41,"numero":42,"{":43,"}":44,"DECLARARVECTOR":45,"ACCESOVECTOR":46,"MODIFICARVECTOR":47,"pr_new":48,"LISTAVALORES":49,"pr_int":50,"pr_char":51,"pr_string":52,"pr_bool":53,"pr_double":54,"pr_if":55,"CONDICIONIF":56,"pr_else":57,"pr_elif":58,"LISTAOSI":59,"OPERAD":60,"&&":61,"<":62,">":63,"pr_switch":64,"LISTACASE":65,"pr_default":66,":":67,"pr_case":68,"pr_while":69,"pr_print":70,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"expreID",20:"=",22:";",23:"cadena",24:"char",25:"bool",28:",",31:"RELACIONAL",32:"LOGICO",33:"+",34:"-",35:"*",36:"/",37:"%",38:"(",39:")",40:"[",41:"]",42:"numero",43:"{",44:"}",48:"pr_new",50:"pr_int",51:"pr_char",52:"pr_string",53:"pr_bool",54:"pr_double",55:"pr_if",57:"pr_else",58:"pr_elif",61:"&&",62:"<",63:">",64:"pr_switch",66:"pr_default",67:":",68:"pr_case",69:"pr_while",70:"pr_print"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,3],[7,3],[26,2],[27,3],[27,2],[8,4],[8,4],[8,4],[8,4],[8,4],[21,2],[21,1],[29,1],[29,1],[29,1],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,1],[9,8],[9,8],[9,8],[9,8],[10,4],[11,4],[12,3],[12,5],[13,1],[13,1],[13,1],[45,11],[45,19],[45,16],[45,9],[45,17],[46,8],[46,11],[47,7],[47,12],[18,1],[18,1],[18,1],[18,1],[18,1],[49,3],[49,3],[14,7],[14,11],[14,18],[59,12],[59,11],[56,3],[56,7],[60,1],[60,1],[60,2],[60,2],[15,10],[65,5],[65,4],[16,7],[17,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]);  this.$= $$[$0-1];  
break;
case 3:
this.$=[$$[$0]]
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 25: case 34: case 35: case 36: case 37: case 45: case 54: case 55: case 56: case 66: case 67: case 68: case 69: case 70: case 80: case 81: case 86:
this.$=$$[$0];
break;
case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22:
this.$= new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 23: case 24:
this.$= new Declaracion($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 26: case 33: case 82: case 83: case 85:
this.$=$$[$0-1];
break;
case 28: case 29: case 30: case 31: case 32:
this.$= new Asignacion($$[$0-1]);
break;
case 38:
this.$=$$[$0-2] + '+' + $$[$0];
break;
case 39:
this.$=$$[$0-2] + '-' + $$[$0];
break;
case 40:
this.$=$$[$0-2] + '*' + $$[$0];
break;
case 41:
this.$=$$[$0-2] + '/' + $$[$0];
break;
case 42:
this.$=$$[$0-2] + '%' + $$[$0];
break;
case 43:
this.$= "(" + $$[$0-1] + ")";
break;
case 44:
this.$= "[" + $$[$0-1] + "]";
break;
case 46: case 47: case 48: case 49:
this.$= new Casteo($$[$0-1]);
break;
case 50:
this.$= new Incremento($$[$0-3]);
break;
case 51:
this.$= new Decremento($$[$0-3]);
break;
case 52:
 this.$= new Bloque($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 53:
 this.$= new Bloque($$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 57:
this.$= new Vector($$[$0-7]);
break;
case 58:
this.$= new Vector($$[$0-13]);
break;
case 59: case 65:
this.$= new Vector($$[$0-10]);
break;
case 60:
this.$= new Vector($$[$0-5]);
break;
case 61:
this.$= new Vector($$[$0-11]);
break;
case 62: case 64:
this.$= new Vector($$[$0-6]);
break;
case 63:
this.$= new Vector($$[$0-9]);
break;
case 71: case 72: case 78:
this.$=$$[$0-2];
break;
case 73:
 this.$= new If($$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 74:
 this.$= new If($$[$0-5],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 75:
 this.$= new If($$[$0-12],_$[$0-17].first_line,_$[$0-17].first_column);
break;
case 76: case 79:
this.$=$$[$0-6];
break;
case 77:
this.$=$$[$0-5];
break;
case 84:
this.$= new SwitchG($$[$0-7]);
break;
case 87:
this.$= new WhileG($$[$0-3]);
break;
case 88:
this.$= new Impresion($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},{1:[3]},{5:[1,30],6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),o($Vb,[2,14]),{19:[1,32],26:33,40:[1,34]},{20:[1,35],33:[1,36],34:[1,37],40:[1,38]},{4:39,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,23:[1,40],43:$V1,45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},o($Vb,[2,54]),o($Vb,[2,55]),o($Vb,[2,56]),{38:[1,41]},{38:[1,42]},{38:[1,43]},{38:[1,44]},o($Vc,[2,66]),o($Vc,[2,67]),o($Vc,[2,68]),o($Vc,[2,69]),o($Vc,[2,70]),{1:[2,1]},o($Vb,[2,2]),{20:[1,45],22:[1,46],27:47,28:$Vd},{20:[1,49],22:[1,50]},{41:[1,51]},{19:[1,56],21:52,23:[1,53],24:[1,55],25:[1,54],29:57,30:58,31:$Ve,32:$Vf,38:$Vg,40:$Vh,42:$Vi},{33:[1,64]},{34:[1,65]},{42:[1,66]},{6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,44:[1,67],45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},{28:[1,68]},{19:$Vj,56:69},{19:[1,71]},{19:$Vj,56:72},{23:[1,73]},{19:[1,79],21:74,23:[1,75],24:[1,76],25:[1,77],29:57,30:58,31:$Ve,32:$Vf,38:[1,78],40:$Vh,42:$Vi},o($Vb,[2,24]),o($Vk,[2,25]),{19:[1,80]},{21:81,23:[1,82],24:[1,83],25:[1,84],29:57,30:58,31:$Ve,32:$Vf,38:$Vg,40:$Vh,42:$Vi},o($Vb,[2,23]),{19:[1,85],40:[1,86]},{22:[1,87],29:88,30:58,31:$Ve,32:$Vf,38:$Vg,40:$Vh,42:$Vi},{22:[1,89]},{22:[1,90]},{22:[1,91]},{22:[1,92]},o($Vl,[2,34]),o($Vl,[2,35],{33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq}),o($Vl,[2,36]),o($Vl,[2,37]),{30:98,38:$Vg,40:$Vh,42:$Vi},{30:99,38:$Vg,40:$Vh,42:$Vi},o($Vr,[2,45]),{22:[1,100]},{22:[1,101]},{41:[1,102]},o($Vb,[2,52]),{23:[1,103]},{39:[1,104]},{60:105,62:$Vs,63:$Vt},{39:[1,108]},{39:[1,109]},{39:[1,110]},{22:[1,111],29:88,30:58,31:$Ve,32:$Vf,38:$Vg,40:$Vh,42:$Vi},{22:[1,112]},{22:[1,113]},{22:[1,114]},{18:115,30:98,38:$Vg,40:$Vh,42:$Vi,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6},{40:[1,116]},o($Vk,[2,27],{27:117,28:$Vd}),{22:[1,118],29:88,30:58,31:$Ve,32:$Vf,38:$Vg,40:$Vh,42:$Vi},{22:[1,119]},{22:[1,120]},{22:[1,121]},{20:[1,122]},{41:[1,123]},o($Vb,[2,28]),o($Vl,[2,33]),o($Vb,[2,29]),o($Vb,[2,30]),o($Vb,[2,31]),o($Vb,[2,32]),{30:124,38:$Vg,40:$Vh,42:$Vi},{30:125,38:$Vg,40:$Vh,42:$Vi},{30:126,38:$Vg,40:$Vh,42:$Vi},{30:127,38:$Vg,40:$Vh,42:$Vi},{30:128,38:$Vg,40:$Vh,42:$Vi},{33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:[1,129]},{33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,41:[1,130]},o($Vb,[2,50]),o($Vb,[2,51]),{20:[1,131]},{44:[1,132]},{43:[1,133]},{42:[1,134]},{20:[1,135],42:[2,80]},{20:[1,136],42:[2,81]},{43:[1,137]},{43:[1,138]},{22:[1,139]},o($Vb,[2,15]),o($Vb,[2,16]),o($Vb,[2,17]),o($Vb,[2,18]),{39:[1,140]},{42:[1,141]},o($Vk,[2,26]),o($Vb,[2,19]),o($Vb,[2,20]),o($Vb,[2,21]),o($Vb,[2,22]),{43:[1,143],48:[1,142]},{19:[1,144]},o([22,31,32,33,38,39,40,41,42],[2,38],{34:$Vn,35:$Vo,36:$Vp,37:$Vq}),o([22,31,32,33,34,38,39,40,41,42],[2,39],{35:$Vo,36:$Vp,37:$Vq}),o([22,31,32,33,34,35,38,39,40,41,42],[2,40],{36:$Vp,37:$Vq}),o([22,31,32,33,34,35,36,38,39,40,41,42],[2,41],{37:$Vq}),o($Vr,[2,42]),o($Vr,[2,43]),o($Vr,[2,44]),{23:[1,145]},o($Vb,[2,53]),{4:146,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},{39:[2,78],61:[1,147]},{42:[2,82]},{42:[2,83]},{65:148,68:$Vu},{4:150,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},o($Vb,[2,88]),{23:[1,152],24:[1,153],25:[1,154],42:[1,151]},{41:[1,155]},{18:156,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6},{23:$Vv,42:$Vw,49:157},{20:[1,160]},{22:[1,161],33:[1,162]},{6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,44:[1,163],45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},{19:[1,164]},{66:[1,165]},{42:[1,166]},{6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,44:[1,167],45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},{22:[1,168]},{22:[1,169]},{22:[1,170]},{22:[1,171]},{22:[1,172],40:[1,173]},{40:[1,174]},{44:[1,175]},{28:[1,176]},{28:[1,177]},{43:[1,179],48:[1,178]},o($Vb,[2,64]),{19:[1,180]},o($Vb,[2,73],{57:[1,181],58:[1,182]}),{60:183,62:$Vs,63:$Vt},{67:[1,184]},{67:[1,185]},o($Vb,[2,87]),o($Vb,[2,46]),o($Vb,[2,47]),o($Vb,[2,48]),o($Vb,[2,49]),o($Vb,[2,62]),{42:[1,186]},{42:[1,187]},{22:[1,188]},{23:[1,189]},{42:[1,190]},{18:191,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6},{43:[1,192]},{40:[1,193]},{43:[1,194]},{38:[1,195]},{42:[1,196]},{4:197,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},{4:198,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},{41:[1,199]},{41:[1,200]},o($Vb,[2,60]),{44:[2,71]},{44:[2,72]},{40:[1,201]},{23:$Vv,42:$Vw,49:202},{42:[1,203]},{4:204,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},{19:$Vj,56:205},{39:[2,79]},{6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,44:[1,206],45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},{6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,65:207,66:[2,86],68:$Vu,69:$V9,70:$Va},{22:[1,208]},{22:[1,209]},{38:[1,210],42:[1,211]},{44:[1,212]},{41:[1,213]},{6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,44:[1,214],45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},{39:[1,215]},o($Vb,[2,84]),{66:[2,85]},o($Vb,[2,63]),o($Vb,[2,57]),{18:216,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6},{41:[1,217]},{28:[1,218]},{22:[1,219]},o($Vb,[2,74]),{43:[1,220]},{39:[1,221]},{40:[1,222]},{43:[1,223]},o($Vb,[2,65]),{4:224,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},{23:[1,225]},{42:[1,226]},{23:$Vv,42:$Vw,49:227},{6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,44:[1,228],45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},{41:[1,229]},{41:[1,230]},{44:[1,231]},{57:[1,232]},{40:[1,233]},{22:[1,234]},{44:[1,235]},{43:[1,236]},{42:[1,237]},o($Vb,[2,59]),{22:[1,238]},{4:239,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},{41:[1,240]},o($Vb,[2,61]),{6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,43:$V1,44:[1,241],45:18,46:19,47:20,50:$V2,51:$V3,52:$V4,53:$V5,54:$V6,55:$V7,64:$V8,69:$V9,70:$Va},{22:[1,242]},o($Vb,[2,75]),o($Vb,[2,58])],
defaultActions: {30:[2,1],135:[2,82],136:[2,83],189:[2,71],190:[2,72],196:[2,79],207:[2,85]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  //Declarciones y tambien las importaciones
const {Declaracion} = require('../instrucciones/Declaracion.ts');
const {Impresion} = require('../instrucciones/Imprimir.ts');
const {Bloque} = require('../instrucciones/bloque.ts');
const {Asignacion} = require('../instrucciones/Asignacion.ts');
const {Casteo} = require('../instrucciones/Casteo.ts');
const {Incremento} = require('../instrucciones/Incremento.ts')
const {Decremento} = require('../instrucciones/Decremento.ts')
const {Vector} = require('../instrucciones/Vector.ts')
const {If} = require('../instrucciones/If.ts')
const {SwitchG} = require('../instrucciones/Switch.ts')
const {WhileG} = require('../instrucciones/While.ts')

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 23
break;
case 4:return 42
break;
case 5:return 25
break;
case 6:return 24
break;
case 7:return 52
break;
case 8:return 50
break;
case 9:return 53
break;
case 10:return 51
break;
case 11:return 54
break;
case 12:return 70
break;
case 13:return 48
break;
case 14:return 55
break;
case 15:return 58
break;
case 16:return 57
break;
case 17:return 68
break;
case 18:return 64
break;
case 19:return 66
break;
case 20:return 69
break;
case 21:return 22
break;
case 22:return 28
break;
case 23:return 33
break;
case 24:return 34
break;
case 25:return 35
break;
case 26:return 36
break;
case 27:return 37
break;
case 28:return 39
break;
case 29:return 38
break;
case 30:return 44
break;
case 31:return 43
break;
case 32:return 40
break;
case 33:return 41
break;
case 34:return 20
break;
case 35:return 28
break;
case 36:return 62
break;
case 37:return 63
break;
case 38:return 61
break;
case 39:return 67
break;
case 40:return 19;
break;
case 41:return 5
break;
case 42: 
        console.log("error lexico: "+yy_.yytext +"En la linea: " + yy_.yylloc.first_line +", En la columna: "+ yy_.yylloc.first_column);
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([\"][^\"]*[\"]))/i,/^(?:([0-9]+([.][0-9]+)?))/i,/^(?:(true|false\b))/i,/^(?:(([\'][^\n\']*[\'])))/i,/^(?:String\b)/i,/^(?:Int\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:Double\b)/i,/^(?:Print\b)/i,/^(?:New\b)/i,/^(?:If\b)/i,/^(?:Elif\b)/i,/^(?:Else\b)/i,/^(?:Case\b)/i,/^(?:Switch\b)/i,/^(?:Default\b)/i,/^(?:While\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\))/i,/^(?:\()/i,/^(?:\})/i,/^(?:\{)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:,)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?::)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar2;
exports.Parser = grammar2.Parser;
exports.parse = function () { return grammar2.parse.apply(grammar2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}