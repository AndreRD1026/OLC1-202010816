/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>A_lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 42,  3, 43, 42, 42,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    39,  0,  4,  0,  0,  0,  0,  0, 12, 13,  7, 10,  8, 11,  0,  6, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  0,  9,  0, 17, 14, 16, 
     0, 27, 24, 21, 30, 26, 31, 36, 38, 19, 41,  1, 25, 35, 20, 22, 
    34, 40, 29, 33, 23, 37, 28,  1,  1,  1,  1,  0,  0,  0,  0,  2, 
     0, 27, 24, 21, 30, 26, 31, 36, 38, 19, 41,  1, 25, 35, 20, 22, 
    34, 40, 29, 33, 23, 37, 28,  1,  1,  1,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 43,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 15, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\1\11\2\1\1\4\2\1\0\1\21"+
    "\1\0\1\22\2\0\1\23\2\0\3\2\1\0\6\2"+
    "\1\0\3\2\1\24\1\0\1\24\3\2\1\0\4\2"+
    "\1\25\2\0\1\26\2\0\1\2\1\26\4\2\1\0"+
    "\6\2\1\0\2\27\2\2\1\0\3\2\1\0\1\2"+
    "\1\30\2\2\1\0\1\2\1\31\3\0\3\2\2\0"+
    "\1\32\1\33\6\2\3\0\2\2\1\0\2\2\1\34"+
    "\1\0\3\2\1\0\1\2\3\0\3\2\3\0\6\2"+
    "\5\0\2\35\1\0\1\2\2\36\1\2\1\0\2\2"+
    "\1\37\2\40\1\41\2\0\1\41\2\2\3\0\5\2"+
    "\1\0\1\2\2\0\1\42\5\0\2\2\1\0\1\2"+
    "\1\43\3\0\2\2\3\0\1\44\4\2\2\45\6\0"+
    "\2\46\1\0\1\2\1\0\1\2\1\0\1\47\1\50"+
    "\1\47\1\50\3\0\2\51\1\52\1\2\1\53\3\0"+
    "\1\54\2\0\2\55\2\56\2\0\1\57\2\0\1\60"+
    "\2\0\1\61\2\0\1\62\6\0\1\63\1\64\3\0"+
    "\1\65\4\0\1\66\3\0\1\67\2\0\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\54\0\260\0\334\0\u0108"+
    "\0\54\0\54\0\54\0\54\0\u0134\0\54\0\54\0\54"+
    "\0\54\0\54\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\204\0\54\0\260\0\54\0\u03f4\0\u0420\0\54"+
    "\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580"+
    "\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0"+
    "\0\54\0\u070c\0\130\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8"+
    "\0\u0814\0\u0840\0\u086c\0\u03f4\0\u0898\0\u08c4\0\54\0\u08f0"+
    "\0\u091c\0\u0948\0\130\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24"+
    "\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84"+
    "\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4"+
    "\0\u0d10\0\130\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\54\0\u0dec"+
    "\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\130"+
    "\0\54\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054"+
    "\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\130"+
    "\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8"+
    "\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448"+
    "\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8"+
    "\0\u15d4\0\u1600\0\54\0\130\0\u162c\0\u1658\0\54\0\130"+
    "\0\u1684\0\u16b0\0\u16dc\0\u1708\0\130\0\u1734\0\u1760\0\54"+
    "\0\u178c\0\u17b8\0\130\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894"+
    "\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4"+
    "\0\u1a20\0\54\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28"+
    "\0\u1b54\0\u1b80\0\u1bac\0\130\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c"+
    "\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\130\0\u1d38\0\u1d64\0\u1d90"+
    "\0\u1dbc\0\54\0\130\0\u1de8\0\u1e14\0\u1e40\0\u1e6c\0\u1e98"+
    "\0\u1ec4\0\54\0\130\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0"+
    "\0\54\0\u1fcc\0\130\0\u1ff8\0\u2024\0\u2050\0\u207c\0\54"+
    "\0\130\0\130\0\u20a8\0\130\0\u20d4\0\u2100\0\u212c\0\54"+
    "\0\u2158\0\u2184\0\54\0\130\0\54\0\130\0\u21b0\0\u21dc"+
    "\0\54\0\u2208\0\u2234\0\130\0\u2260\0\u228c\0\54\0\u22b8"+
    "\0\u22e4\0\54\0\u2310\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec"+
    "\0\54\0\54\0\u2418\0\u2444\0\u2470\0\54\0\u249c\0\u24c8"+
    "\0\u24f4\0\u2520\0\54\0\u254c\0\u2578\0\u25a4\0\54\0\u25d0"+
    "\0\u25fc\0\54\0\54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\2\1\20"+
    "\1\21\1\22\1\23\1\24\1\3\1\25\1\26\1\3"+
    "\1\27\1\3\1\30\1\3\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\2\3\1\41\1\5\2\3"+
    "\1\5\56\0\1\3\21\0\15\3\1\0\6\3\1\0"+
    "\2\3\2\0\2\42\1\43\1\0\50\42\3\44\1\0"+
    "\1\45\47\44\5\0\1\7\54\0\1\46\1\47\62\0"+
    "\1\50\61\0\1\51\16\0\1\52\11\0\1\3\21\0"+
    "\1\3\1\53\13\3\1\0\2\3\1\54\3\3\1\0"+
    "\2\3\3\0\1\3\21\0\3\3\1\55\11\3\1\0"+
    "\6\3\1\0\2\3\3\0\1\3\1\56\20\0\15\3"+
    "\1\0\6\3\1\0\2\3\3\0\1\3\21\0\3\3"+
    "\1\57\11\3\1\0\6\3\1\0\2\3\3\0\1\3"+
    "\21\0\1\3\1\60\13\3\1\0\6\3\1\0\1\3"+
    "\1\61\3\0\1\3\21\0\7\3\1\62\5\3\1\0"+
    "\6\3\1\0\2\3\3\0\1\3\21\0\7\3\1\63"+
    "\5\3\1\0\6\3\1\0\2\3\3\0\1\3\21\0"+
    "\7\3\1\64\5\3\1\0\6\3\1\0\2\3\3\0"+
    "\1\3\20\0\1\65\1\66\7\3\1\67\4\3\1\0"+
    "\4\3\1\70\1\3\1\0\2\3\24\0\2\71\6\0"+
    "\1\72\22\0\1\3\20\0\1\71\1\73\6\3\1\74"+
    "\5\3\1\0\6\3\1\0\2\3\3\0\1\3\21\0"+
    "\3\3\1\75\4\3\1\76\4\3\1\0\6\3\1\0"+
    "\2\3\3\0\1\3\20\0\1\77\1\100\2\3\1\101"+
    "\3\3\1\102\5\3\1\0\6\3\1\0\2\3\3\0"+
    "\1\3\21\0\10\3\1\103\4\3\1\0\6\3\1\0"+
    "\2\3\2\0\3\104\1\0\50\104\6\47\1\0\1\105"+
    "\44\47\22\0\2\106\3\0\1\107\14\0\1\110\51\0"+
    "\1\111\12\0\1\3\20\0\1\106\1\112\3\3\1\113"+
    "\10\3\1\0\3\3\1\114\2\3\1\0\2\3\3\0"+
    "\1\3\21\0\15\3\1\0\1\3\1\115\4\3\1\0"+
    "\2\3\3\0\1\3\21\0\1\3\1\116\13\3\1\0"+
    "\2\3\1\117\3\3\1\0\2\3\42\0\2\120\13\0"+
    "\1\3\21\0\3\3\1\121\11\3\1\0\6\3\1\0"+
    "\2\3\3\0\1\3\21\0\4\3\1\122\10\3\1\0"+
    "\6\3\1\0\2\3\3\0\1\3\21\0\7\3\1\123"+
    "\5\3\1\0\6\3\1\0\2\3\3\0\1\3\21\0"+
    "\12\3\1\124\2\3\1\0\6\3\1\0\2\3\3\0"+
    "\1\3\21\0\4\3\1\125\10\3\1\0\1\3\1\126"+
    "\4\3\1\0\2\3\3\0\1\3\1\127\20\0\15\3"+
    "\1\0\6\3\1\0\2\3\26\0\1\130\30\0\1\3"+
    "\21\0\1\3\1\131\13\3\1\0\6\3\1\0\2\3"+
    "\3\0\1\3\21\0\6\3\1\132\6\3\1\0\6\3"+
    "\1\0\2\3\3\0\1\3\21\0\1\3\1\133\13\3"+
    "\1\0\6\3\1\0\2\3\46\0\1\134\10\0\1\3"+
    "\21\0\15\3\1\0\3\3\1\135\2\3\1\0\2\3"+
    "\3\0\1\3\21\0\4\3\1\136\10\3\1\0\6\3"+
    "\1\0\2\3\3\0\1\3\21\0\12\3\1\137\2\3"+
    "\1\0\6\3\1\0\2\3\34\0\1\140\22\0\1\3"+
    "\21\0\7\3\1\141\5\3\1\0\6\3\1\0\2\3"+
    "\3\0\1\3\21\0\13\3\1\142\1\3\1\0\6\3"+
    "\1\0\2\3\3\0\1\3\21\0\4\3\1\143\10\3"+
    "\1\0\6\3\1\0\2\3\3\0\1\3\21\0\2\3"+
    "\1\144\12\3\1\145\1\146\5\3\1\0\2\3\10\0"+
    "\1\147\72\0\1\150\63\0\1\151\53\0\1\152\17\0"+
    "\1\3\21\0\2\3\1\153\12\3\1\0\6\3\1\0"+
    "\2\3\3\0\1\3\21\0\12\3\1\154\2\3\1\0"+
    "\6\3\1\0\2\3\3\0\1\3\21\0\12\3\1\155"+
    "\2\3\1\0\6\3\1\0\2\3\3\0\1\3\1\156"+
    "\20\0\15\3\1\0\6\3\1\157\2\3\3\0\1\3"+
    "\21\0\3\3\1\160\11\3\1\0\6\3\1\0\2\3"+
    "\24\0\2\161\31\0\1\3\21\0\6\3\1\162\6\3"+
    "\1\0\6\3\1\0\2\3\3\0\1\3\21\0\3\3"+
    "\1\163\11\3\1\0\6\3\1\0\2\3\3\0\1\3"+
    "\21\0\2\3\1\164\12\3\1\0\6\3\1\0\2\3"+
    "\3\0\1\3\21\0\13\3\1\165\1\3\1\0\6\3"+
    "\1\0\2\3\3\0\1\3\21\0\3\3\1\166\11\3"+
    "\1\0\6\3\1\0\2\3\3\0\1\3\21\0\7\3"+
    "\1\167\5\3\1\0\6\3\1\0\2\3\33\0\1\170"+
    "\24\0\1\171\52\0\1\3\1\171\20\0\15\3\1\0"+
    "\6\3\1\0\2\3\3\0\1\3\21\0\15\3\1\172"+
    "\1\173\5\3\1\0\2\3\3\0\1\3\21\0\2\3"+
    "\1\174\12\3\1\0\6\3\1\0\2\3\47\0\1\175"+
    "\7\0\1\3\21\0\15\3\1\0\4\3\1\176\1\3"+
    "\1\0\2\3\3\0\1\3\21\0\7\3\1\177\5\3"+
    "\1\0\6\3\1\0\2\3\3\0\1\3\21\0\10\3"+
    "\1\200\4\3\1\0\6\3\1\0\2\3\26\0\1\201"+
    "\30\0\1\3\21\0\1\3\1\202\13\3\1\0\6\3"+
    "\1\0\2\3\3\0\1\3\21\0\3\3\1\203\11\3"+
    "\1\0\6\3\1\0\2\3\3\0\1\3\21\0\7\3"+
    "\1\204\5\3\1\0\6\3\1\0\2\3\31\0\1\205"+
    "\25\0\1\3\21\0\4\3\1\206\10\3\1\0\6\3"+
    "\1\0\2\3\24\0\2\207\62\0\1\210\43\0\2\211"+
    "\31\0\1\3\20\0\1\207\1\212\14\3\1\0\6\3"+
    "\1\0\2\3\3\0\1\3\21\0\7\3\1\213\5\3"+
    "\1\0\6\3\1\0\2\3\3\0\1\3\20\0\1\211"+
    "\1\214\14\3\1\0\6\3\1\0\2\3\36\0\1\215"+
    "\5\0\1\216\33\0\2\217\31\0\1\3\21\0\7\3"+
    "\1\220\5\3\1\0\6\3\1\0\2\3\3\0\1\3"+
    "\21\0\1\3\1\221\13\3\1\0\6\3\1\0\2\3"+
    "\3\0\1\3\21\0\15\3\1\0\4\3\1\222\1\3"+
    "\1\0\2\3\3\0\1\3\21\0\10\3\1\223\4\3"+
    "\1\0\6\3\1\0\2\3\3\0\1\3\21\0\12\3"+
    "\1\224\2\3\1\0\6\3\1\0\2\3\3\0\1\3"+
    "\21\0\4\3\1\225\10\3\1\0\6\3\1\0\2\3"+
    "\30\0\1\226\64\0\1\227\2\230\1\231\1\232\36\0"+
    "\1\233\26\0\1\3\21\0\3\3\1\234\11\3\1\0"+
    "\6\3\1\0\2\3\3\0\1\3\20\0\1\235\1\236"+
    "\14\3\1\0\6\3\1\0\2\3\26\0\1\237\30\0"+
    "\1\3\21\0\1\3\1\240\13\3\1\0\6\3\1\0"+
    "\2\3\3\0\1\3\21\0\1\3\1\241\13\3\1\0"+
    "\6\3\1\0\2\3\31\0\1\242\25\0\1\3\21\0"+
    "\4\3\1\243\10\3\1\0\6\3\1\0\2\3\3\0"+
    "\1\3\21\0\13\3\1\244\1\3\1\0\6\3\1\0"+
    "\2\3\3\0\1\3\21\0\12\3\1\245\2\3\1\0"+
    "\6\3\1\0\2\3\35\0\1\246\21\0\1\3\21\0"+
    "\10\3\1\247\4\3\1\0\6\3\1\0\2\3\30\0"+
    "\1\250\65\0\2\251\55\0\1\252\11\0\1\3\21\0"+
    "\3\3\1\253\11\3\1\0\6\3\1\0\2\3\3\0"+
    "\1\3\21\0\15\3\1\251\1\254\5\3\1\0\2\3"+
    "\3\0\1\3\21\0\15\3\1\0\2\3\1\255\3\3"+
    "\1\0\2\3\35\0\1\256\53\0\1\257\44\0\1\260"+
    "\30\0\1\3\21\0\10\3\1\261\4\3\1\0\6\3"+
    "\1\0\2\3\3\0\1\3\21\0\2\3\1\262\12\3"+
    "\1\0\6\3\1\0\2\3\3\0\1\3\21\0\4\3"+
    "\1\263\10\3\1\0\6\3\1\0\2\3\3\0\1\3"+
    "\21\0\13\3\1\264\1\3\1\0\6\3\1\0\2\3"+
    "\3\0\1\3\21\0\1\3\1\265\13\3\1\0\6\3"+
    "\1\0\2\3\3\0\1\3\20\0\1\266\1\267\14\3"+
    "\1\0\6\3\1\0\2\3\4\0\1\270\116\0\1\271"+
    "\30\0\2\272\6\0\1\273\54\0\1\274\42\0\2\275"+
    "\6\0\1\276\47\0\1\277\26\0\1\3\21\0\3\3"+
    "\1\300\11\3\1\0\6\3\1\0\2\3\3\0\1\3"+
    "\21\0\2\3\1\301\12\3\1\0\6\3\1\0\2\3"+
    "\37\0\1\302\17\0\1\3\21\0\12\3\1\303\2\3"+
    "\1\0\6\3\1\0\2\3\3\0\1\3\21\0\3\3"+
    "\1\304\11\3\1\0\6\3\1\0\2\3\4\0\1\305"+
    "\52\0\1\3\1\305\20\0\15\3\1\0\6\3\1\0"+
    "\2\3\35\0\1\306\42\0\2\307\31\0\1\3\21\0"+
    "\10\3\1\310\4\3\1\0\6\3\1\0\2\3\3\0"+
    "\1\3\20\0\1\307\1\311\14\3\1\0\6\3\1\0"+
    "\2\3\33\0\1\312\57\0\1\313\43\0\1\314\27\0"+
    "\1\3\21\0\1\3\1\315\13\3\1\0\6\3\1\0"+
    "\2\3\3\0\1\3\21\0\7\3\1\316\5\3\1\0"+
    "\6\3\1\0\2\3\3\0\1\3\21\0\10\3\1\317"+
    "\4\3\1\0\6\3\1\0\2\3\3\0\1\3\21\0"+
    "\7\3\1\320\5\3\1\0\6\3\1\0\2\3\3\0"+
    "\1\3\21\0\10\3\1\321\4\3\1\0\6\3\1\0"+
    "\2\3\37\0\1\322\17\0\1\3\21\0\12\3\1\323"+
    "\2\3\1\0\6\3\1\0\2\3\27\0\1\324\52\0"+
    "\1\325\73\0\1\326\44\0\1\327\50\0\1\330\50\0"+
    "\1\331\50\0\1\332\30\0\1\3\21\0\1\3\1\333"+
    "\13\3\1\0\6\3\1\0\2\3\3\0\1\3\20\0"+
    "\1\334\1\335\14\3\1\0\6\3\1\0\2\3\35\0"+
    "\1\336\21\0\1\3\21\0\10\3\1\337\4\3\1\0"+
    "\6\3\1\0\2\3\52\0\1\340\40\0\1\341\53\0"+
    "\1\342\17\0\1\3\21\0\12\3\1\343\2\3\1\0"+
    "\6\3\1\0\2\3\3\0\1\3\21\0\12\3\1\344"+
    "\2\3\1\0\6\3\1\0\2\3\30\0\1\345\60\0"+
    "\1\346\55\0\1\347\17\0\1\3\21\0\15\3\1\350"+
    "\1\351\5\3\1\0\2\3\3\0\1\3\21\0\12\3"+
    "\1\352\2\3\1\0\6\3\1\0\2\3\3\0\1\3"+
    "\21\0\12\3\1\353\2\3\1\0\6\3\1\0\2\3"+
    "\3\0\1\3\21\0\12\3\1\354\2\3\1\0\6\3"+
    "\1\0\2\3\30\0\1\355\52\0\1\356\73\0\1\357"+
    "\41\0\1\360\44\0\1\361\55\0\1\362\60\0\1\363"+
    "\21\0\1\3\21\0\10\3\1\364\4\3\1\0\6\3"+
    "\1\0\2\3\42\0\2\365\13\0\1\3\21\0\15\3"+
    "\1\365\1\366\5\3\1\0\2\3\47\0\1\367\10\0"+
    "\1\370\52\0\1\3\1\370\20\0\15\3\1\0\6\3"+
    "\1\0\2\3\37\0\1\371\61\0\1\372\42\0\1\373"+
    "\22\0\1\3\21\0\3\3\1\374\11\3\1\0\6\3"+
    "\1\0\2\3\26\0\1\375\51\0\2\376\54\0\1\377"+
    "\56\0\1\u0100\62\0\1\u0101\47\0\1\u0102\45\0\1\u0103"+
    "\61\0\1\u0104\64\0\1\u0105\37\0\1\u0106\52\0\1\u0107"+
    "\62\0\1\u0108\44\0\1\u0109\56\0\1\u010a\51\0\1\u010b"+
    "\56\0\1\u010c\56\0\1\u010d\42\0\1\u010e\62\0\1\u010f"+
    "\55\0\1\u0110\42\0\1\u0111\62\0\1\u0112\60\0\2\u0113"+
    "\40\0\1\u0114\54\0\1\u0115\61\0\1\u0116\56\0\2\u0117"+
    "\45\0\1\u0118\42\0\2\u0119\61\0\1\u011a\50\0\1\u011b"+
    "\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9768];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\4\11\1\1\5\11"+
    "\17\1\1\0\1\11\1\0\1\11\2\0\1\11\2\0"+
    "\3\1\1\0\6\1\1\0\3\1\1\11\1\0\4\1"+
    "\1\0\5\1\2\0\1\11\2\0\6\1\1\0\6\1"+
    "\1\0\4\1\1\0\3\1\1\0\4\1\1\0\1\1"+
    "\1\11\3\0\3\1\2\0\1\1\1\11\6\1\3\0"+
    "\2\1\1\0\3\1\1\0\3\1\1\0\1\1\3\0"+
    "\3\1\3\0\6\1\5\0\1\11\1\1\1\0\1\1"+
    "\1\11\2\1\1\0\5\1\1\11\2\0\3\1\3\0"+
    "\5\1\1\0\1\1\2\0\1\11\5\0\2\1\1\0"+
    "\2\1\3\0\2\1\3\0\5\1\1\11\1\1\6\0"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\11"+
    "\3\1\3\0\1\11\4\1\3\0\1\11\2\0\1\11"+
    "\1\1\1\11\1\1\2\0\1\11\2\0\1\1\2\0"+
    "\1\11\2\0\1\11\6\0\2\11\3\0\1\11\4\0"+
    "\1\11\3\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico : "+yytext()+
                        " Linea "+(yyline+1)+" Columna "+yycolumn);
            } 
            // fall through
          case 58: break;
          case 2: 
            { System.out.println("Reconocio token: <id> lexema: "+yytext());
                    return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            } 
            // fall through
          case 59: break;
          case 3: 
            { //codigo en java
                    System.out.println("Reconocio token: <guion_bajo> lexema: "+yytext());
                    return new Symbol(Simbolos.guionBajo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 60: break;
          case 4: 
            { /* Espacios en blanco se ignoran */
            } 
            // fall through
          case 61: break;
          case 5: 
            { System.out.println("Reconocio token: <numero> lexema: "+ yytext());
                    return new Symbol(Simbolos.numero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 62: break;
          case 6: 
            { //codigo en java
                    System.out.println("Reconocio token: <diagonal> lexema: "+yytext());
                    return new Symbol(Simbolos.diagonal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 63: break;
          case 7: 
            { //codigo en java
                    System.out.println("Reconocio token: <asterisco> lexema: "+yytext());
                    return new Symbol(Simbolos.asterisco, yycolumn, yyline, yytext());
            } 
            // fall through
          case 64: break;
          case 8: 
            { //codigo en java
                    System.out.println("Reconocio token: <coma> lexema: "+yytext());
                    return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 65: break;
          case 9: 
            { //codigo en java
                    System.out.println("Reconocio token: <puntoycoma> lexema: "+yytext());
                    return new Symbol(Simbolos.puntoycoma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 66: break;
          case 10: 
            { //codigo en java
                    System.out.println("Reconocio token: <cruz> lexema: "+yytext());
                    return new Symbol(Simbolos.cruz, yycolumn, yyline, yytext());
            } 
            // fall through
          case 67: break;
          case 11: 
            { //codigo en java
                    System.out.println("Reconocio token: <guion> lexema: "+yytext());
                    return new Symbol(Simbolos.guion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 68: break;
          case 12: 
            { //codigo en java
                    System.out.println("Reconocio token: <parentesisAbre> lexema: "+yytext());
                    return new Symbol(Simbolos.parA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 69: break;
          case 13: 
            { //codigo en java
                    System.out.println("Reconocio token: <parentesisCierra> lexema: "+yytext());
                    return new Symbol(Simbolos.parC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 14: 
            { //codigo en java
                    System.out.println("Reconocio token: <flecha> lexema: "+yytext());
                    return new Symbol(Simbolos.interrogaciona, yycolumn, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 15: 
            { //codigo en java
                    System.out.println("Reconocio token: <interrogacion> lexema: "+yytext());
                    return new Symbol(Simbolos.interrogacionc, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 16: 
            { //codigo en java
                    System.out.println("Reconocio token: <igual> lexema: "+yytext());
                    return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 17: 
            { System.out.println("Reconocio token: <var> lexema: "+yytext());
                    return new Symbol(Simbolos.var, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 18: 
            { System.out.println("Reconocio token: <cadena> lexema: "+ yytext());
                    return new Symbol(Simbolos.Cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 19: 
            { //codigo en java
                    System.out.println("Reconocio token: <flecha> lexema: "+yytext());
                    return new Symbol(Simbolos.flecha, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 20: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 21: 
            { System.out.println("Reconocio token: <comentario> lexema: "+yytext());
            } 
            // fall through
          case 78: break;
          case 22: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prInt, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 23: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 24: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prMod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 25: 
            { System.out.println("Reconocio token: <comentarioMulti> lexema: "+ yytext());
            } 
            // fall through
          case 82: break;
          case 26: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prComo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 27: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prOSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 28: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prPara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 29: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFalso, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 30: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 31: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prHacer, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 32: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prHasta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 33: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prInicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 34: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFinSi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 35: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 36: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prBoolean, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 37: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prRepetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 38: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 39: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prIngresar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 40: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prImprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 41: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prEntonces, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 42: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prEjecutar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 43: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prRetornar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 44: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFinPara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 45: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prPotencia, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 46: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prMientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 47: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prConValor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 48: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prVerdadero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 49: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFinSegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 50: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prHastaQue, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 51: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFinMetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 52: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prImprimirNl, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 53: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFinFuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 54: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prFinMientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 55: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prConParametros, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 56: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prIncremental, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 57: 
            { //codigo en java
                    System.out.println("Reconocio palabra_reservada, lexema: "+yytext());
                    return new Symbol(Simbolos.prDeloContrario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
